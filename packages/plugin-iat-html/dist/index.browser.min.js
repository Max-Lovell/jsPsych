var jsPsychIatHtml = (function (r) {
  "use strict";
  var p = {
    name: "@jspsych/plugin-iat-html",
    version: "2.0.0",
    description:
      "jsPsych plugin for running an IAT (Implicit Association Test) with an HTML-formatted stimulus",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-iat-html",
    },
    author: "Kristin Diep",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/iat-html",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const d = {
    name: "iat-html",
    version: p.version,
    parameters: {
      stimulus: { type: r.ParameterType.HTML_STRING, default: void 0 },
      left_category_key: { type: r.ParameterType.KEY, default: "e" },
      right_category_key: { type: r.ParameterType.KEY, default: "i" },
      left_category_label: { type: r.ParameterType.STRING, array: !0, default: ["left"] },
      right_category_label: { type: r.ParameterType.STRING, array: !0, default: ["right"] },
      key_to_move_forward: { type: r.ParameterType.KEYS, default: "ALL_KEYS" },
      display_feedback: { type: r.ParameterType.BOOL, default: !1 },
      html_when_wrong: {
        type: r.ParameterType.HTML_STRING,
        default: '<span style="color: red; font-size: 80px">X</span>',
      },
      bottom_instructions: {
        type: r.ParameterType.HTML_STRING,
        default:
          "<p>If you press the wrong key, a red X will appear. Press any key to continue.</p>",
      },
      force_correct_key_press: { type: r.ParameterType.BOOL, default: !1 },
      stim_key_association: {
        type: r.ParameterType.SELECT,
        options: ["left", "right"],
        default: void 0,
      },
      response_ends_trial: { type: r.ParameterType.BOOL, default: !0 },
      trial_duration: { type: r.ParameterType.INT, default: null },
    },
    data: {
      stimulus: { type: r.ParameterType.HTML_STRING },
      response: { type: r.ParameterType.STRING },
      correct: { type: r.ParameterType.BOOL },
      rt: { type: r.ParameterType.INT },
    },
  };
  class _ {
    constructor(t) {
      this.jsPsych = t;
    }
    trial(t, e) {
      var i = "";
      (i +=
        "<div style='position: absolute; height: 20%; width: 100%; margin-left: auto; margin-right: auto; top: 42%; left: 0; right: 0'><p id='jspsych-iat-stim'>" +
        e.stimulus +
        "</p></div>"),
        (i += "<div id='trial_left_align' style='position: absolute; top: 18%; left: 20%'>"),
        e.left_category_label.length == 1
          ? (i +=
              "<p>Press " +
              e.left_category_key +
              " for:<br> " +
              e.left_category_label[0].bold() +
              "</p></div>")
          : (i +=
              "<p>Press " +
              e.left_category_key +
              " for:<br> " +
              e.left_category_label[0].bold() +
              "<br>or<br>" +
              e.left_category_label[1].bold() +
              "</p></div>"),
        (i += "<div id='trial_right_align' style='position: absolute; top: 18%; right: 20%'>"),
        e.right_category_label.length == 1
          ? (i +=
              "<p>Press " +
              e.right_category_key +
              " for:<br> " +
              e.right_category_label[0].bold() +
              "</p></div>")
          : (i +=
              "<p>Press " +
              e.right_category_key +
              " for:<br> " +
              e.right_category_label[0].bold() +
              "<br>or<br>" +
              e.right_category_label[1].bold() +
              "</p></div>"),
        (i +=
          "<div id='wrongImgID' style='position:relative; top: 300px; margin-left: auto; margin-right: auto; left: 0; right: 0'>"),
        e.display_feedback === !0 &&
          (i +=
            "<div id='wrongImgContainer' style='visibility: hidden; position: absolute; top: -75px; margin-left: auto; margin-right: auto; left: 0; right: 0'><p>" +
            e.html_when_wrong +
            "</p></div>"),
        (i += "<div>" + e.bottom_instructions + "</div>"),
        (i += "</div>"),
        (t.innerHTML = i);
      var s = { rt: null, key: null, correct: !1 };
      const a = () => {
        typeof c != "undefined" && this.jsPsych.pluginAPI.cancelKeyboardResponse(c);
        var o = { rt: s.rt, stimulus: e.stimulus, response: s.key, correct: s.correct };
        this.jsPsych.finishTrial(o);
      };
      var l = e.left_category_key,
        u = e.right_category_key;
      const g = (o) => {
        var n = document.getElementById("wrongImgContainer");
        if (
          ((t.querySelector("#jspsych-iat-stim").className += " responded"),
          s.key == null && ((s.key = o.key), (s.rt = o.rt)),
          e.stim_key_association == "right")
        )
          if (s.rt !== null && this.jsPsych.pluginAPI.compareKeys(s.key, u))
            (s.correct = !0), e.response_ends_trial && a();
          else if (
            ((s.correct = !1),
            !e.response_ends_trial && e.display_feedback == !0 && (n.style.visibility = "visible"),
            e.response_ends_trial && e.display_feedback == !0)
          )
            if (((n.style.visibility = "visible"), e.force_correct_key_press))
              var y = this.jsPsych.pluginAPI.getKeyboardResponse({
                callback_function: a,
                valid_responses: [e.right_category_key],
              });
            else
              var y = this.jsPsych.pluginAPI.getKeyboardResponse({
                callback_function: a,
                valid_responses: e.key_to_move_forward,
              });
          else
            e.response_ends_trial && e.display_feedback != !0
              ? a()
              : !e.response_ends_trial && e.display_feedback != !0;
        else if (e.stim_key_association == "left")
          if (s.rt !== null && this.jsPsych.pluginAPI.compareKeys(s.key, l))
            (s.correct = !0), e.response_ends_trial && a();
          else if (
            ((s.correct = !1),
            !e.response_ends_trial && e.display_feedback == !0 && (n.style.visibility = "visible"),
            e.response_ends_trial && e.display_feedback == !0)
          )
            if (((n.style.visibility = "visible"), e.force_correct_key_press))
              var y = this.jsPsych.pluginAPI.getKeyboardResponse({
                callback_function: a,
                valid_responses: [e.left_category_key],
              });
            else
              var y = this.jsPsych.pluginAPI.getKeyboardResponse({
                callback_function: a,
                valid_responses: e.key_to_move_forward,
              });
          else
            e.response_ends_trial && e.display_feedback != !0
              ? a()
              : !e.response_ends_trial && e.display_feedback != !0;
      };
      if (e.left_category_key != "NO_KEYS" && e.right_category_key != "NO_KEYS")
        var c = this.jsPsych.pluginAPI.getKeyboardResponse({
          callback_function: g,
          valid_responses: [e.left_category_key, e.right_category_key],
          rt_method: "performance",
          persist: !1,
          allow_held_key: !1,
        });
      e.trial_duration !== null &&
        e.response_ends_trial != !0 &&
        this.jsPsych.pluginAPI.setTimeout(() => {
          a();
        }, e.trial_duration);
    }
    simulate(t, e, i, s) {
      e == "data-only" && (s(), this.simulate_data_only(t, i)),
        e == "visual" && this.simulate_visual(t, i, s);
    }
    create_simulation_data(t, e) {
      const i = this.jsPsych.pluginAPI.getValidKey([t.left_category_key, t.right_category_key]),
        s = t.stim_key_association == "left" ? i == t.left_category_key : i == t.right_category_key,
        a = {
          stimulus: t.stimulus,
          response: i,
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, !0),
          correct: s,
        },
        l = this.jsPsych.pluginAPI.mergeSimulationData(a, e);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(t, l), l;
    }
    simulate_data_only(t, e) {
      const i = this.create_simulation_data(t, e);
      this.jsPsych.finishTrial(i);
    }
    simulate_visual(t, e, i) {
      const s = this.create_simulation_data(t, e),
        a = this.jsPsych.getDisplayElement();
      this.trial(a, t),
        i(),
        s.response !== null && this.jsPsych.pluginAPI.pressKey(s.response, s.rt);
      const l = s.rt == null ? t.trial_duration : s.rt;
      t.force_correct_key_press
        ? s.correct ||
          this.jsPsych.pluginAPI.pressKey(
            t.stim_key_association == "left" ? t.left_category_key : t.right_category_key,
            l + this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0)
          )
        : this.jsPsych.pluginAPI.pressKey(
            this.jsPsych.pluginAPI.getValidKey(t.key_to_move_forward),
            l + this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0)
          );
    }
  }
  return (_.info = d), _;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
