{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"iat-html\",\n  version: version,\n  parameters: {\n    /** The HTML string to be displayed. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /** Key press that is associated with the `left_category_label`. */\n    left_category_key: {\n      type: ParameterType.KEY,\n      default: \"e\",\n    },\n    /** Key press that is associated with the `right_category_label`. */\n    right_category_key: {\n      type: ParameterType.KEY,\n      default: \"i\",\n    },\n    /** An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left\n     * side of the page. */\n    left_category_label: {\n      type: ParameterType.STRING,\n      array: true,\n      default: [\"left\"],\n    },\n    /** An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right\n     * side of the page. */\n    right_category_label: {\n      type: ParameterType.STRING,\n      array: true,\n      default: [\"right\"],\n    },\n    /** This array contains the characters the participant is allowed to press to move on to the next trial if their key\n     * press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the\n     * user to select the right key to move forward.  */\n    key_to_move_forward: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /** If `true`, then `html_when_wrong` and `wrong_image_name` is required. If `false`, `trial_duration` is needed\n     *  and trial will continue automatically. */\n    display_feedback: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** The content to display when a user presses the wrong key. */\n    html_when_wrong: {\n      type: ParameterType.HTML_STRING,\n      default: '<span style=\"color: red; font-size: 80px\">X</span>',\n    },\n    /** Instructions about making a wrong key press and whether another key press is needed to continue. */\n    bottom_instructions: {\n      type: ParameterType.HTML_STRING,\n      default: \"<p>If you press the wrong key, a red X will appear. Press any key to continue.</p>\",\n    },\n    /** If this is `true` and the user presses the wrong key then they have to press the other key to continue. An example\n     * would be two keys 'e' and 'i'. If the key associated with the stimulus is 'e' and key 'i' was pressed, then\n     * pressing 'e' is needed to continue the trial. When this is `true`, then parameter `key_to_move_forward`\n     * is not used. If this is `true` and the user presses the wrong key then they have to press the other key to\n     * continue. An example would be two keys 'e' and 'i'. If the key associated with the stimulus is 'e' and key\n     * 'i' was pressed, then pressing 'e' is needed to continue the trial. When this is `true`, then parameter\n     * `key_to_move_forward` is not used. */\n    force_correct_key_press: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Either 'left' or 'right'. This indicates whether the stimulus is associated with the key press and\n     * category on the left or right side of the page (`left_category_key` or `right_category_key`). */\n    stim_key_association: {\n      type: ParameterType.SELECT,\n      options: [\"left\", \"right\"],\n      default: undefined,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their\n     * response before the cutoff specified by the `trial_duration` parameter). If false, then the trial will\n     * continue until the value for `trial_duration` is reached. You can use this parameter to force the participant\n     * to view a stimulus for a fixed amount of time, even if they respond before the time is complete. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the\n     * participant fails to make a response before this timer is reached, the participant's response will be\n     * recorded as `null` for the trial and the trial will end. If the value of this parameter is `null`, then\n     * the trial will wait for a response indefinitely. */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n  },\n  data: {\n    /** The string containing the HTML-formatted content that the participant saw on this trial. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n    },\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** Boolean indicating whether the user's key press was correct or incorrect for the given stimulus. */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response.  */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin runs a single trial of the [implicit association test (IAT)](https://implicit.harvard.edu/implicit/iatdetails.html), using HTML content as the stimulus.\n *\n * @author Kristin Diep\n * @see {@link https://www.jspsych.org/latest/plugins/iat-html/ iat-html plugin documentation on jspsych.org}\n */\nclass IatHtmlPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var html_str = \"\";\n\n    html_str +=\n      \"<div style='position: absolute; height: 20%; width: 100%; margin-left: auto; margin-right: auto; top: 42%; left: 0; right: 0'><p id='jspsych-iat-stim'>\" +\n      trial.stimulus +\n      \"</p></div>\";\n\n    html_str += \"<div id='trial_left_align' style='position: absolute; top: 18%; left: 20%'>\";\n\n    if (trial.left_category_label.length == 1) {\n      html_str +=\n        \"<p>Press \" +\n        trial.left_category_key +\n        \" for:<br> \" +\n        trial.left_category_label[0].bold() +\n        \"</p></div>\";\n    } else {\n      html_str +=\n        \"<p>Press \" +\n        trial.left_category_key +\n        \" for:<br> \" +\n        trial.left_category_label[0].bold() +\n        \"<br>\" +\n        \"or<br>\" +\n        trial.left_category_label[1].bold() +\n        \"</p></div>\";\n    }\n\n    html_str += \"<div id='trial_right_align' style='position: absolute; top: 18%; right: 20%'>\";\n\n    if (trial.right_category_label.length == 1) {\n      html_str +=\n        \"<p>Press \" +\n        trial.right_category_key +\n        \" for:<br> \" +\n        trial.right_category_label[0].bold() +\n        \"</p></div>\";\n    } else {\n      html_str +=\n        \"<p>Press \" +\n        trial.right_category_key +\n        \" for:<br> \" +\n        trial.right_category_label[0].bold() +\n        \"<br>\" +\n        \"or<br>\" +\n        trial.right_category_label[1].bold() +\n        \"</p></div>\";\n    }\n\n    html_str +=\n      \"<div id='wrongImgID' style='position:relative; top: 300px; margin-left: auto; margin-right: auto; left: 0; right: 0'>\";\n\n    if (trial.display_feedback === true) {\n      html_str +=\n        \"<div id='wrongImgContainer' style='visibility: hidden; position: absolute; top: -75px; margin-left: auto; margin-right: auto; left: 0; right: 0'><p>\" +\n        trial.html_when_wrong +\n        \"</p></div>\";\n      html_str += \"<div>\" + trial.bottom_instructions + \"</div>\";\n    } else {\n      html_str += \"<div>\" + trial.bottom_instructions + \"</div>\";\n    }\n\n    html_str += \"</div>\";\n\n    display_element.innerHTML = html_str;\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n      correct: false,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n        correct: response.correct,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    var leftKeyCode = trial.left_category_key;\n    var rightKeyCode = trial.right_category_key;\n\n    // function to handle responses by the subject\n    const after_response = (info: { key: string; rt: number }) => {\n      var wImg = document.getElementById(\"wrongImgContainer\");\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-iat-stim\").className += \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response.key = info.key;\n        response.rt = info.rt;\n      }\n\n      if (trial.stim_key_association == \"right\") {\n        if (\n          response.rt !== null &&\n          this.jsPsych.pluginAPI.compareKeys(response.key, rightKeyCode)\n        ) {\n          response.correct = true;\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n        } else {\n          response.correct = false;\n          if (!trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n          }\n          if (trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n            if (trial.force_correct_key_press) {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: [trial.right_category_key],\n              });\n            } else {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: trial.key_to_move_forward,\n              });\n            }\n          } else if (trial.response_ends_trial && trial.display_feedback != true) {\n            end_trial();\n          } else if (!trial.response_ends_trial && trial.display_feedback != true) {\n          }\n        }\n      } else if (trial.stim_key_association == \"left\") {\n        if (response.rt !== null && this.jsPsych.pluginAPI.compareKeys(response.key, leftKeyCode)) {\n          response.correct = true;\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n        } else {\n          response.correct = false;\n          if (!trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n          }\n          if (trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n            if (trial.force_correct_key_press) {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: [trial.left_category_key],\n              });\n            } else {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: trial.key_to_move_forward,\n              });\n            }\n          } else if (trial.response_ends_trial && trial.display_feedback != true) {\n            end_trial();\n          } else if (!trial.response_ends_trial && trial.display_feedback != true) {\n          }\n        }\n      }\n    };\n\n    // start the response listener\n    if (trial.left_category_key != \"NO_KEYS\" && trial.right_category_key != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [trial.left_category_key, trial.right_category_key],\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null && trial.response_ends_trial != true) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    }\n  }\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const key = this.jsPsych.pluginAPI.getValidKey([\n      trial.left_category_key,\n      trial.right_category_key,\n    ]);\n    const correct =\n      trial.stim_key_association == \"left\"\n        ? key == trial.left_category_key\n        : key == trial.right_category_key;\n\n    const default_data = {\n      stimulus: trial.stimulus,\n      response: key,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      correct: correct,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.response !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n\n    const cont_rt = data.rt == null ? trial.trial_duration : data.rt;\n\n    if (trial.force_correct_key_press) {\n      if (!data.correct) {\n        this.jsPsych.pluginAPI.pressKey(\n          trial.stim_key_association == \"left\" ? trial.left_category_key : trial.right_category_key,\n          cont_rt + this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true)\n        );\n      }\n    } else {\n      this.jsPsych.pluginAPI.pressKey(\n        this.jsPsych.pluginAPI.getValidKey(trial.key_to_move_forward),\n        cont_rt + this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true)\n      );\n    }\n  }\n}\n\nexport default IatHtmlPlugin;\n"],"names":["version","info"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAM,IAAc,GAAA;AAAA,EAClB,IAAM,EAAA,UAAA;AAAA,WACNA,gBAAA;AAAA,EACA,UAAY,EAAA;AAAA,IAEV,QAAU,EAAA;AAAA,MACR,MAAM,aAAc,CAAA,WAAA;AAAA,MACpB,OAAS,EAAA,KAAA,CAAA;AAAA,KACX;AAAA,IAEA,iBAAmB,EAAA;AAAA,MACjB,MAAM,aAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA,GAAA;AAAA,KACX;AAAA,IAEA,kBAAoB,EAAA;AAAA,MAClB,MAAM,aAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA,GAAA;AAAA,KACX;AAAA,IAGA,mBAAqB,EAAA;AAAA,MACnB,MAAM,aAAc,CAAA,MAAA;AAAA,MACpB,KAAO,EAAA,IAAA;AAAA,MACP,OAAA,EAAS,CAAC,MAAM,CAAA;AAAA,KAClB;AAAA,IAGA,oBAAsB,EAAA;AAAA,MACpB,MAAM,aAAc,CAAA,MAAA;AAAA,MACpB,KAAO,EAAA,IAAA;AAAA,MACP,OAAA,EAAS,CAAC,OAAO,CAAA;AAAA,KACnB;AAAA,IAIA,mBAAqB,EAAA;AAAA,MACnB,MAAM,aAAc,CAAA,IAAA;AAAA,MACpB,OAAS,EAAA,UAAA;AAAA,KACX;AAAA,IAGA,gBAAkB,EAAA;AAAA,MAChB,MAAM,aAAc,CAAA,IAAA;AAAA,MACpB,OAAS,EAAA,KAAA;AAAA,KACX;AAAA,IAEA,eAAiB,EAAA;AAAA,MACf,MAAM,aAAc,CAAA,WAAA;AAAA,MACpB,OAAS,EAAA,oDAAA;AAAA,KACX;AAAA,IAEA,mBAAqB,EAAA;AAAA,MACnB,MAAM,aAAc,CAAA,WAAA;AAAA,MACpB,OAAS,EAAA,oFAAA;AAAA,KACX;AAAA,IAQA,uBAAyB,EAAA;AAAA,MACvB,MAAM,aAAc,CAAA,IAAA;AAAA,MACpB,OAAS,EAAA,KAAA;AAAA,KACX;AAAA,IAGA,oBAAsB,EAAA;AAAA,MACpB,MAAM,aAAc,CAAA,MAAA;AAAA,MACpB,OAAA,EAAS,CAAC,MAAA,EAAQ,OAAO,CAAA;AAAA,MACzB,OAAS,EAAA,KAAA,CAAA;AAAA,KACX;AAAA,IAKA,mBAAqB,EAAA;AAAA,MACnB,MAAM,aAAc,CAAA,IAAA;AAAA,MACpB,OAAS,EAAA,IAAA;AAAA,KACX;AAAA,IAKA,cAAgB,EAAA;AAAA,MACd,MAAM,aAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA,IAAA;AAAA,KACX;AAAA,GACF;AAAA,EACA,IAAM,EAAA;AAAA,IAEJ,QAAU,EAAA;AAAA,MACR,MAAM,aAAc,CAAA,WAAA;AAAA,KACtB;AAAA,IAEA,QAAU,EAAA;AAAA,MACR,MAAM,aAAc,CAAA,MAAA;AAAA,KACtB;AAAA,IAEA,OAAS,EAAA;AAAA,MACP,MAAM,aAAc,CAAA,IAAA;AAAA,KACtB;AAAA,IAEA,EAAI,EAAA;AAAA,MACF,MAAM,aAAc,CAAA,GAAA;AAAA,KACtB;AAAA,GACF;AACF,CAAA,CAAA;AAUA,MAAM,aAA6C,CAAA;AAAA,EAGjD,YAAoB,OAAkB,EAAA;AAAlB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAAmB;AAAA,EAEvC,KAAA,CAAM,iBAA8B,KAAwB,EAAA;AAC1D,IAAA,IAAI,QAAW,GAAA,EAAA,CAAA;AAEf,IACE,QAAA,IAAA,yJAAA,GACA,MAAM,QACN,GAAA,YAAA,CAAA;AAEF,IAAY,QAAA,IAAA,6EAAA,CAAA;AAEZ,IAAI,IAAA,KAAA,CAAM,mBAAoB,CAAA,MAAA,IAAU,CAAG,EAAA;AACzC,MACE,QAAA,IAAA,WAAA,GACA,MAAM,iBACN,GAAA,YAAA,GACA,MAAM,mBAAoB,CAAA,CAAA,CAAA,CAAG,MAC7B,GAAA,YAAA,CAAA;AAAA,KACG,MAAA;AACL,MAAA,QAAA,IACE,WACA,GAAA,KAAA,CAAM,iBACN,GAAA,YAAA,GACA,MAAM,mBAAoB,CAAA,CAAA,CAAA,CAAG,IAAK,EAAA,GAClC,YAEA,GAAA,KAAA,CAAM,mBAAoB,CAAA,CAAA,CAAA,CAAG,MAC7B,GAAA,YAAA,CAAA;AAAA,KACJ;AAEA,IAAY,QAAA,IAAA,+EAAA,CAAA;AAEZ,IAAI,IAAA,KAAA,CAAM,oBAAqB,CAAA,MAAA,IAAU,CAAG,EAAA;AAC1C,MACE,QAAA,IAAA,WAAA,GACA,MAAM,kBACN,GAAA,YAAA,GACA,MAAM,oBAAqB,CAAA,CAAA,CAAA,CAAG,MAC9B,GAAA,YAAA,CAAA;AAAA,KACG,MAAA;AACL,MAAA,QAAA,IACE,WACA,GAAA,KAAA,CAAM,kBACN,GAAA,YAAA,GACA,MAAM,oBAAqB,CAAA,CAAA,CAAA,CAAG,IAAK,EAAA,GACnC,YAEA,GAAA,KAAA,CAAM,oBAAqB,CAAA,CAAA,CAAA,CAAG,MAC9B,GAAA,YAAA,CAAA;AAAA,KACJ;AAEA,IACE,QAAA,IAAA,uHAAA,CAAA;AAEF,IAAI,IAAA,KAAA,CAAM,qBAAqB,IAAM,EAAA;AACnC,MACE,QAAA,IAAA,sJAAA,GACA,MAAM,eACN,GAAA,YAAA,CAAA;AACF,MAAY,QAAA,IAAA,OAAA,GAAU,MAAM,mBAAsB,GAAA,QAAA,CAAA;AAAA,KAC7C,MAAA;AACL,MAAY,QAAA,IAAA,OAAA,GAAU,MAAM,mBAAsB,GAAA,QAAA,CAAA;AAAA,KACpD;AAEA,IAAY,QAAA,IAAA,QAAA,CAAA;AAEZ,IAAA,eAAA,CAAgB,SAAY,GAAA,QAAA,CAAA;AAG5B,IAAA,IAAI,QAAW,GAAA;AAAA,MACb,EAAI,EAAA,IAAA;AAAA,MACJ,GAAK,EAAA,IAAA;AAAA,MACL,OAAS,EAAA,KAAA;AAAA,KACX,CAAA;AAGA,IAAA,MAAM,YAAY,MAAM;AAEtB,MAAI,IAAA,OAAO,qBAAqB,WAAa,EAAA;AAC3C,QAAK,IAAA,CAAA,OAAA,CAAQ,SAAU,CAAA,sBAAA,CAAuB,gBAAgB,CAAA,CAAA;AAAA,OAChE;AAGA,MAAA,IAAI,UAAa,GAAA;AAAA,QACf,IAAI,QAAS,CAAA,EAAA;AAAA,QACb,UAAU,KAAM,CAAA,QAAA;AAAA,QAChB,UAAU,QAAS,CAAA,GAAA;AAAA,QACnB,SAAS,QAAS,CAAA,OAAA;AAAA,OACpB,CAAA;AAGA,MAAK,IAAA,CAAA,OAAA,CAAQ,YAAY,UAAU,CAAA,CAAA;AAAA,KACrC,CAAA;AAEA,IAAA,IAAI,cAAc,KAAM,CAAA,iBAAA,CAAA;AACxB,IAAA,IAAI,eAAe,KAAM,CAAA,kBAAA,CAAA;AAGzB,IAAM,MAAA,cAAA,GAAiB,CAACC,KAAsC,KAAA;AAC5D,MAAI,IAAA,IAAA,GAAO,QAAS,CAAA,cAAA,CAAe,mBAAmB,CAAA,CAAA;AAGtD,MAAgB,eAAA,CAAA,aAAA,CAAc,mBAAmB,CAAA,CAAE,SAAa,IAAA,YAAA,CAAA;AAGhE,MAAI,IAAA,QAAA,CAAS,OAAO,IAAM,EAAA;AACxB,QAAA,QAAA,CAAS,MAAMA,KAAK,CAAA,GAAA,CAAA;AACpB,QAAA,QAAA,CAAS,KAAKA,KAAK,CAAA,EAAA,CAAA;AAAA,OACrB;AAEA,MAAI,IAAA,KAAA,CAAM,wBAAwB,OAAS,EAAA;AACzC,QACE,IAAA,QAAA,CAAS,EAAO,KAAA,IAAA,IAChB,IAAK,CAAA,OAAA,CAAQ,UAAU,WAAY,CAAA,QAAA,CAAS,GAAK,EAAA,YAAY,CAC7D,EAAA;AACA,UAAA,QAAA,CAAS,OAAU,GAAA,IAAA,CAAA;AACnB,UAAA,IAAI,MAAM,mBAAqB,EAAA;AAC7B,YAAU,SAAA,EAAA,CAAA;AAAA,WACZ;AAAA,SACK,MAAA;AACL,UAAA,QAAA,CAAS,OAAU,GAAA,KAAA,CAAA;AACnB,UAAA,IAAI,CAAC,KAAA,CAAM,mBAAuB,IAAA,KAAA,CAAM,oBAAoB,IAAM,EAAA;AAChE,YAAA,IAAA,CAAK,MAAM,UAAa,GAAA,SAAA,CAAA;AAAA,WAC1B;AACA,UAAA,IAAI,KAAM,CAAA,mBAAA,IAAuB,KAAM,CAAA,gBAAA,IAAoB,IAAM,EAAA;AAC/D,YAAA,IAAA,CAAK,MAAM,UAAa,GAAA,SAAA,CAAA;AACxB,YAAA,IAAI,MAAM,uBAAyB,EAAA;AACjC,cAAkB,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,mBAAoB,CAAA;AAAA,gBAC3D,iBAAmB,EAAA,SAAA;AAAA,gBACnB,eAAA,EAAiB,CAAC,KAAA,CAAM,kBAAkB,CAAA;AAAA,eAC3C,EAAA;AAAA,aACI,MAAA;AACL,cAAkB,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,mBAAoB,CAAA;AAAA,gBAC3D,iBAAmB,EAAA,SAAA;AAAA,gBACnB,iBAAiB,KAAM,CAAA,mBAAA;AAAA,eACxB,EAAA;AAAA,aACH;AAAA,WACS,MAAA,IAAA,KAAA,CAAM,mBAAuB,IAAA,KAAA,CAAM,oBAAoB,IAAM,EAAA;AACtE,YAAU,SAAA,EAAA,CAAA;AAAA,qBACD,CAAC,KAAA,CAAM,mBAAuB,IAAA,KAAA,CAAM,oBAAoB,IAAM,EAAA,CACzE;AAAA,SACF;AAAA,OACF,MAAA,IAAW,KAAM,CAAA,oBAAA,IAAwB,MAAQ,EAAA;AAC/C,QAAI,IAAA,QAAA,CAAS,EAAO,KAAA,IAAA,IAAQ,IAAK,CAAA,OAAA,CAAQ,UAAU,WAAY,CAAA,QAAA,CAAS,GAAK,EAAA,WAAW,CAAG,EAAA;AACzF,UAAA,QAAA,CAAS,OAAU,GAAA,IAAA,CAAA;AACnB,UAAA,IAAI,MAAM,mBAAqB,EAAA;AAC7B,YAAU,SAAA,EAAA,CAAA;AAAA,WACZ;AAAA,SACK,MAAA;AACL,UAAA,QAAA,CAAS,OAAU,GAAA,KAAA,CAAA;AACnB,UAAA,IAAI,CAAC,KAAA,CAAM,mBAAuB,IAAA,KAAA,CAAM,oBAAoB,IAAM,EAAA;AAChE,YAAA,IAAA,CAAK,MAAM,UAAa,GAAA,SAAA,CAAA;AAAA,WAC1B;AACA,UAAA,IAAI,KAAM,CAAA,mBAAA,IAAuB,KAAM,CAAA,gBAAA,IAAoB,IAAM,EAAA;AAC/D,YAAA,IAAA,CAAK,MAAM,UAAa,GAAA,SAAA,CAAA;AACxB,YAAA,IAAI,MAAM,uBAAyB,EAAA;AACjC,cAAkB,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,mBAAoB,CAAA;AAAA,gBAC3D,iBAAmB,EAAA,SAAA;AAAA,gBACnB,eAAA,EAAiB,CAAC,KAAA,CAAM,iBAAiB,CAAA;AAAA,eAC1C,EAAA;AAAA,aACI,MAAA;AACL,cAAkB,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,mBAAoB,CAAA;AAAA,gBAC3D,iBAAmB,EAAA,SAAA;AAAA,gBACnB,iBAAiB,KAAM,CAAA,mBAAA;AAAA,eACxB,EAAA;AAAA,aACH;AAAA,WACS,MAAA,IAAA,KAAA,CAAM,mBAAuB,IAAA,KAAA,CAAM,oBAAoB,IAAM,EAAA;AACtE,YAAU,SAAA,EAAA,CAAA;AAAA,qBACD,CAAC,KAAA,CAAM,mBAAuB,IAAA,KAAA,CAAM,oBAAoB,IAAM,EAAA,CACzE;AAAA,SACF;AAAA,OACF;AAAA,KACF,CAAA;AAGA,IAAA,IAAI,KAAM,CAAA,iBAAA,IAAqB,SAAa,IAAA,KAAA,CAAM,sBAAsB,SAAW,EAAA;AACjF,MAAA,IAAI,gBAAmB,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,mBAAoB,CAAA;AAAA,QAChE,iBAAmB,EAAA,cAAA;AAAA,QACnB,eAAiB,EAAA,CAAC,KAAM,CAAA,iBAAA,EAAmB,MAAM,kBAAkB,CAAA;AAAA,QACnE,SAAW,EAAA,aAAA;AAAA,QACX,OAAS,EAAA,KAAA;AAAA,QACT,cAAgB,EAAA,KAAA;AAAA,OACjB,CAAA,CAAA;AAAA,KACH;AAGA,IAAA,IAAI,KAAM,CAAA,cAAA,KAAmB,IAAQ,IAAA,KAAA,CAAM,uBAAuB,IAAM,EAAA;AACtE,MAAK,IAAA,CAAA,OAAA,CAAQ,SAAU,CAAA,UAAA,CAAW,MAAM;AACtC,QAAU,SAAA,EAAA,CAAA;AAAA,OACZ,EAAG,MAAM,cAAc,CAAA,CAAA;AAAA,KACzB;AAAA,GACF;AAAA,EACA,QACE,CAAA,KAAA,EACA,eACA,EAAA,kBAAA,EACA,aACA,EAAA;AACA,IAAA,IAAI,mBAAmB,WAAa,EAAA;AAClC,MAAc,aAAA,EAAA,CAAA;AACd,MAAK,IAAA,CAAA,kBAAA,CAAmB,OAAO,kBAAkB,CAAA,CAAA;AAAA,KACnD;AACA,IAAA,IAAI,mBAAmB,QAAU,EAAA;AAC/B,MAAK,IAAA,CAAA,eAAA,CAAgB,KAAO,EAAA,kBAAA,EAAoB,aAAa,CAAA,CAAA;AAAA,KAC/D;AAAA,GACF;AAAA,EAEQ,sBAAA,CAAuB,OAAwB,kBAAoB,EAAA;AACzE,IAAA,MAAM,GAAM,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,WAAY,CAAA;AAAA,MAC7C,KAAM,CAAA,iBAAA;AAAA,MACN,KAAM,CAAA,kBAAA;AAAA,KACP,CAAA,CAAA;AACD,IAAM,MAAA,OAAA,GACJ,MAAM,oBAAwB,IAAA,MAAA,GAC1B,OAAO,KAAM,CAAA,iBAAA,GACb,OAAO,KAAM,CAAA,kBAAA,CAAA;AAEnB,IAAA,MAAM,YAAe,GAAA;AAAA,MACnB,UAAU,KAAM,CAAA,QAAA;AAAA,MAChB,QAAU,EAAA,GAAA;AAAA,MACV,EAAA,EAAI,KAAK,OAAQ,CAAA,aAAA,CAAc,iBAAiB,GAAK,EAAA,EAAA,EAAI,CAAI,GAAA,GAAA,EAAK,IAAI,CAAA;AAAA,MACtE,OAAA;AAAA,KACF,CAAA;AAEA,IAAA,MAAM,OAAO,IAAK,CAAA,OAAA,CAAQ,SAAU,CAAA,mBAAA,CAAoB,cAAc,kBAAkB,CAAA,CAAA;AAExF,IAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,+BAAgC,CAAA,KAAA,EAAO,IAAI,CAAA,CAAA;AAElE,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEQ,kBAAA,CAAmB,OAAwB,kBAAoB,EAAA;AACrE,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;AAElE,IAAK,IAAA,CAAA,OAAA,CAAQ,YAAY,IAAI,CAAA,CAAA;AAAA,GAC/B;AAAA,EAEQ,eAAA,CAAgB,KAAwB,EAAA,kBAAA,EAAoB,aAA2B,EAAA;AAC7F,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;AAElE,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,OAAA,CAAQ,iBAAkB,EAAA,CAAA;AAEvD,IAAK,IAAA,CAAA,KAAA,CAAM,iBAAiB,KAAK,CAAA,CAAA;AACjC,IAAc,aAAA,EAAA,CAAA;AAEd,IAAI,IAAA,IAAA,CAAK,aAAa,IAAM,EAAA;AAC1B,MAAA,IAAA,CAAK,QAAQ,SAAU,CAAA,QAAA,CAAS,IAAK,CAAA,QAAA,EAAU,KAAK,EAAE,CAAA,CAAA;AAAA,KACxD;AAEA,IAAA,MAAM,UAAU,IAAK,CAAA,EAAA,IAAM,IAAO,GAAA,KAAA,CAAM,iBAAiB,IAAK,CAAA,EAAA,CAAA;AAE9D,IAAA,IAAI,MAAM,uBAAyB,EAAA;AACjC,MAAI,IAAA,CAAC,KAAK,OAAS,EAAA;AACjB,QAAA,IAAA,CAAK,QAAQ,SAAU,CAAA,QAAA;AAAA,UACrB,KAAM,CAAA,oBAAA,IAAwB,MAAS,GAAA,KAAA,CAAM,oBAAoB,KAAM,CAAA,kBAAA;AAAA,UACvE,OAAA,GAAU,KAAK,OAAQ,CAAA,aAAA,CAAc,iBAAiB,GAAK,EAAA,EAAA,EAAI,CAAI,GAAA,GAAA,EAAK,IAAI,CAAA;AAAA,SAC9E,CAAA;AAAA,OACF;AAAA,KACK,MAAA;AACL,MAAA,IAAA,CAAK,QAAQ,SAAU,CAAA,QAAA;AAAA,QACrB,IAAK,CAAA,OAAA,CAAQ,SAAU,CAAA,WAAA,CAAY,MAAM,mBAAmB,CAAA;AAAA,QAC5D,OAAA,GAAU,KAAK,OAAQ,CAAA,aAAA,CAAc,iBAAiB,GAAK,EAAA,EAAA,EAAI,CAAI,GAAA,GAAA,EAAK,IAAI,CAAA;AAAA,OAC9E,CAAA;AAAA,KACF;AAAA,GACF;AACF,CAAA;AA7QM,aAAA,CACG,IAAO,GAAA,IAAA;;;;"}