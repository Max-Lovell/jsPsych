{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"iat-html\",\n  version: version,\n  parameters: {\n    /** The HTML string to be displayed. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /** Key press that is associated with the `left_category_label`. */\n    left_category_key: {\n      type: ParameterType.KEY,\n      default: \"e\",\n    },\n    /** Key press that is associated with the `right_category_label`. */\n    right_category_key: {\n      type: ParameterType.KEY,\n      default: \"i\",\n    },\n    /** An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left\n     * side of the page. */\n    left_category_label: {\n      type: ParameterType.STRING,\n      array: true,\n      default: [\"left\"],\n    },\n    /** An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right\n     * side of the page. */\n    right_category_label: {\n      type: ParameterType.STRING,\n      array: true,\n      default: [\"right\"],\n    },\n    /** This array contains the characters the participant is allowed to press to move on to the next trial if their key\n     * press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the\n     * user to select the right key to move forward.  */\n    key_to_move_forward: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /** If `true`, then `html_when_wrong` and `wrong_image_name` is required. If `false`, `trial_duration` is needed\n     *  and trial will continue automatically. */\n    display_feedback: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** The content to display when a user presses the wrong key. */\n    html_when_wrong: {\n      type: ParameterType.HTML_STRING,\n      default: '<span style=\"color: red; font-size: 80px\">X</span>',\n    },\n    /** Instructions about making a wrong key press and whether another key press is needed to continue. */\n    bottom_instructions: {\n      type: ParameterType.HTML_STRING,\n      default: \"<p>If you press the wrong key, a red X will appear. Press any key to continue.</p>\",\n    },\n    /** If this is `true` and the user presses the wrong key then they have to press the other key to continue. An example\n     * would be two keys 'e' and 'i'. If the key associated with the stimulus is 'e' and key 'i' was pressed, then\n     * pressing 'e' is needed to continue the trial. When this is `true`, then parameter `key_to_move_forward`\n     * is not used. If this is `true` and the user presses the wrong key then they have to press the other key to\n     * continue. An example would be two keys 'e' and 'i'. If the key associated with the stimulus is 'e' and key\n     * 'i' was pressed, then pressing 'e' is needed to continue the trial. When this is `true`, then parameter\n     * `key_to_move_forward` is not used. */\n    force_correct_key_press: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Either 'left' or 'right'. This indicates whether the stimulus is associated with the key press and\n     * category on the left or right side of the page (`left_category_key` or `right_category_key`). */\n    stim_key_association: {\n      type: ParameterType.SELECT,\n      options: [\"left\", \"right\"],\n      default: undefined,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their\n     * response before the cutoff specified by the `trial_duration` parameter). If false, then the trial will\n     * continue until the value for `trial_duration` is reached. You can use this parameter to force the participant\n     * to view a stimulus for a fixed amount of time, even if they respond before the time is complete. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the\n     * participant fails to make a response before this timer is reached, the participant's response will be\n     * recorded as `null` for the trial and the trial will end. If the value of this parameter is `null`, then\n     * the trial will wait for a response indefinitely. */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n  },\n  data: {\n    /** The string containing the HTML-formatted content that the participant saw on this trial. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n    },\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** Boolean indicating whether the user's key press was correct or incorrect for the given stimulus. */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response.  */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin runs a single trial of the [implicit association test (IAT)](https://implicit.harvard.edu/implicit/iatdetails.html), using HTML content as the stimulus.\n *\n * @author Kristin Diep\n * @see {@link https://www.jspsych.org/latest/plugins/iat-html/ iat-html plugin documentation on jspsych.org}\n */\nclass IatHtmlPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var html_str = \"\";\n\n    html_str +=\n      \"<div style='position: absolute; height: 20%; width: 100%; margin-left: auto; margin-right: auto; top: 42%; left: 0; right: 0'><p id='jspsych-iat-stim'>\" +\n      trial.stimulus +\n      \"</p></div>\";\n\n    html_str += \"<div id='trial_left_align' style='position: absolute; top: 18%; left: 20%'>\";\n\n    if (trial.left_category_label.length == 1) {\n      html_str +=\n        \"<p>Press \" +\n        trial.left_category_key +\n        \" for:<br> \" +\n        trial.left_category_label[0].bold() +\n        \"</p></div>\";\n    } else {\n      html_str +=\n        \"<p>Press \" +\n        trial.left_category_key +\n        \" for:<br> \" +\n        trial.left_category_label[0].bold() +\n        \"<br>\" +\n        \"or<br>\" +\n        trial.left_category_label[1].bold() +\n        \"</p></div>\";\n    }\n\n    html_str += \"<div id='trial_right_align' style='position: absolute; top: 18%; right: 20%'>\";\n\n    if (trial.right_category_label.length == 1) {\n      html_str +=\n        \"<p>Press \" +\n        trial.right_category_key +\n        \" for:<br> \" +\n        trial.right_category_label[0].bold() +\n        \"</p></div>\";\n    } else {\n      html_str +=\n        \"<p>Press \" +\n        trial.right_category_key +\n        \" for:<br> \" +\n        trial.right_category_label[0].bold() +\n        \"<br>\" +\n        \"or<br>\" +\n        trial.right_category_label[1].bold() +\n        \"</p></div>\";\n    }\n\n    html_str +=\n      \"<div id='wrongImgID' style='position:relative; top: 300px; margin-left: auto; margin-right: auto; left: 0; right: 0'>\";\n\n    if (trial.display_feedback === true) {\n      html_str +=\n        \"<div id='wrongImgContainer' style='visibility: hidden; position: absolute; top: -75px; margin-left: auto; margin-right: auto; left: 0; right: 0'><p>\" +\n        trial.html_when_wrong +\n        \"</p></div>\";\n      html_str += \"<div>\" + trial.bottom_instructions + \"</div>\";\n    } else {\n      html_str += \"<div>\" + trial.bottom_instructions + \"</div>\";\n    }\n\n    html_str += \"</div>\";\n\n    display_element.innerHTML = html_str;\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n      correct: false,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n        correct: response.correct,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    var leftKeyCode = trial.left_category_key;\n    var rightKeyCode = trial.right_category_key;\n\n    // function to handle responses by the subject\n    const after_response = (info: { key: string; rt: number }) => {\n      var wImg = document.getElementById(\"wrongImgContainer\");\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-iat-stim\").className += \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response.key = info.key;\n        response.rt = info.rt;\n      }\n\n      if (trial.stim_key_association == \"right\") {\n        if (\n          response.rt !== null &&\n          this.jsPsych.pluginAPI.compareKeys(response.key, rightKeyCode)\n        ) {\n          response.correct = true;\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n        } else {\n          response.correct = false;\n          if (!trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n          }\n          if (trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n            if (trial.force_correct_key_press) {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: [trial.right_category_key],\n              });\n            } else {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: trial.key_to_move_forward,\n              });\n            }\n          } else if (trial.response_ends_trial && trial.display_feedback != true) {\n            end_trial();\n          } else if (!trial.response_ends_trial && trial.display_feedback != true) {\n          }\n        }\n      } else if (trial.stim_key_association == \"left\") {\n        if (response.rt !== null && this.jsPsych.pluginAPI.compareKeys(response.key, leftKeyCode)) {\n          response.correct = true;\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n        } else {\n          response.correct = false;\n          if (!trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n          }\n          if (trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n            if (trial.force_correct_key_press) {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: [trial.left_category_key],\n              });\n            } else {\n              var keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: trial.key_to_move_forward,\n              });\n            }\n          } else if (trial.response_ends_trial && trial.display_feedback != true) {\n            end_trial();\n          } else if (!trial.response_ends_trial && trial.display_feedback != true) {\n          }\n        }\n      }\n    };\n\n    // start the response listener\n    if (trial.left_category_key != \"NO_KEYS\" && trial.right_category_key != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [trial.left_category_key, trial.right_category_key],\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null && trial.response_ends_trial != true) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    }\n  }\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const key = this.jsPsych.pluginAPI.getValidKey([\n      trial.left_category_key,\n      trial.right_category_key,\n    ]);\n    const correct =\n      trial.stim_key_association == \"left\"\n        ? key == trial.left_category_key\n        : key == trial.right_category_key;\n\n    const default_data = {\n      stimulus: trial.stimulus,\n      response: key,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      correct: correct,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.response !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n\n    const cont_rt = data.rt == null ? trial.trial_duration : data.rt;\n\n    if (trial.force_correct_key_press) {\n      if (!data.correct) {\n        this.jsPsych.pluginAPI.pressKey(\n          trial.stim_key_association == \"left\" ? trial.left_category_key : trial.right_category_key,\n          cont_rt + this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true)\n        );\n      }\n    } else {\n      this.jsPsych.pluginAPI.pressKey(\n        this.jsPsych.pluginAPI.getValidKey(trial.key_to_move_forward),\n        cont_rt + this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true)\n      );\n    }\n  }\n}\n\nexport default IatHtmlPlugin;\n"],"names":["version","ParameterType","info"],"mappings":"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"}