var jsPsychInstructions = (function (r) {
  "use strict";
  var f = {
    name: "@jspsych/plugin-instructions",
    version: "2.0.0",
    description: "jsPsych plugin to display instructions",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-instructions",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/instructions",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const P = {
    name: "instructions",
    version: f.version,
    parameters: {
      pages: { type: r.ParameterType.HTML_STRING, default: void 0, array: !0 },
      key_forward: { type: r.ParameterType.KEY, default: "ArrowRight" },
      key_backward: { type: r.ParameterType.KEY, default: "ArrowLeft" },
      allow_backward: { type: r.ParameterType.BOOL, default: !0 },
      allow_keys: { type: r.ParameterType.BOOL, default: !0 },
      show_clickable_nav: { type: r.ParameterType.BOOL, default: !1 },
      show_page_number: { type: r.ParameterType.BOOL, default: !1 },
      page_label: { type: r.ParameterType.STRING, default: "Page" },
      button_label_previous: { type: r.ParameterType.STRING, default: "Previous" },
      button_label_next: { type: r.ParameterType.STRING, default: "Next" },
      on_page_change: {
        type: r.ParameterType.FUNCTION,
        pretty_name: "Page change callback",
        default: function (k) {},
      },
    },
    data: {
      view_history: {
        type: r.ParameterType.COMPLEX,
        array: !0,
        parameters: {
          page_index: { type: r.ParameterType.INT },
          viewing_time: { type: r.ParameterType.INT },
        },
      },
      rt: { type: r.ParameterType.INT },
    },
  };
  class v {
    constructor(t) {
      this.jsPsych = t;
    }
    trial(t, e) {
      var i = 0,
        a = [],
        u = performance.now(),
        y = u;
      function h() {
        this.id === "jspsych-instructions-back"
          ? s()
          : this.id === "jspsych-instructions-next" && n();
      }
      function p() {
        var o = e.pages[i],
          _ = "";
        if (
          (e.show_page_number &&
            (_ =
              "<span style='margin: 0 1em;' class='jspsych-instructions-pagenum'>" +
              e.page_label +
              " " +
              (i + 1) +
              "/" +
              e.pages.length +
              "</span>"),
          e.show_clickable_nav)
        ) {
          var d = "<div class='jspsych-instructions-nav' style='padding: 10px 0px;'>";
          if (e.allow_backward) {
            var m = i > 0 ? "" : "disabled='disabled'";
            d +=
              "<button id='jspsych-instructions-back' class='jspsych-btn' style='margin-right: 5px;' " +
              m +
              ">&lt; " +
              e.button_label_previous +
              "</button>";
          }
          e.pages.length > 1 && e.show_page_number && (d += _),
            (d +=
              "<button id='jspsych-instructions-next' class='jspsych-btn'style='margin-left: 5px;'>" +
              e.button_label_next +
              " &gt;</button></div>"),
            (o += d),
            (t.innerHTML = o),
            i != 0 &&
              e.allow_backward &&
              t
                .querySelector("#jspsych-instructions-back")
                .addEventListener("click", h, { once: !0 }),
            t
              .querySelector("#jspsych-instructions-next")
              .addEventListener("click", h, { once: !0 });
        } else
          e.show_page_number &&
            e.pages.length > 1 &&
            (o += "<div class='jspsych-instructions-pagenum'>" + _ + "</div>"),
            (t.innerHTML = o);
      }
      function n() {
        l(), i++, i >= e.pages.length ? w() : p(), e.on_page_change(i);
      }
      function s() {
        l(), i--, p(), e.on_page_change(i);
      }
      function l() {
        var o = performance.now(),
          _ = Math.round(o - y);
        a.push({ page_index: i, viewing_time: _ }), (y = o);
      }
      const w = () => {
          e.allow_keys && this.jsPsych.pluginAPI.cancelKeyboardResponse(c);
          var o = { view_history: a, rt: Math.round(performance.now() - u) };
          this.jsPsych.finishTrial(o);
        },
        g = (o) => {
          (c = this.jsPsych.pluginAPI.getKeyboardResponse({
            callback_function: g,
            valid_responses: [e.key_forward, e.key_backward],
            rt_method: "performance",
            persist: !1,
            allow_held_key: !1,
          })),
            this.jsPsych.pluginAPI.compareKeys(o.key, e.key_backward) &&
              i !== 0 &&
              e.allow_backward &&
              s(),
            this.jsPsych.pluginAPI.compareKeys(o.key, e.key_forward) && n();
        };
      if ((p(), e.allow_keys))
        var c = this.jsPsych.pluginAPI.getKeyboardResponse({
          callback_function: g,
          valid_responses: [e.key_forward, e.key_backward],
          rt_method: "performance",
          persist: !1,
        });
    }
    simulate(t, e, i, a) {
      e == "data-only" && (a(), this.simulate_data_only(t, i)),
        e == "visual" && this.simulate_visual(t, i, a);
    }
    create_simulation_data(t, e) {
      var i, a, u, y, h, p;
      let n = 0,
        s = 0,
        l = [];
      if (!((i = e.data) != null && i.view_history) && !((a = e.data) != null && a.rt))
        for (; n !== t.pages.length; ) {
          const c = Math.round(
            this.jsPsych.randomization.sampleExGaussian(3e3, 300, 0.0033333333333333335)
          );
          l.push({ page_index: n, viewing_time: c }),
            (s += c),
            n == 0 || !t.allow_backward || this.jsPsych.randomization.sampleBernoulli(0.9) == 1
              ? n++
              : n--;
        }
      if (!((u = e.data) != null && u.view_history) && ((y = e.data) == null ? void 0 : y.rt)) {
        for (s = e.data.rt; n !== t.pages.length; )
          l.push({ page_index: n, viewing_time: null }),
            n == 0 || !t.allow_backward || this.jsPsych.randomization.sampleBernoulli(0.9) == 1
              ? n++
              : n--;
        const c = e.data.rt / l.length;
        let o = 0;
        for (const m of l) {
          const b = Math.round(
            this.jsPsych.randomization.sampleExGaussian(c, c / 10, 1 / (c / 10))
          );
          (m.viewing_time = b), (o += b);
        }
        const _ = e.data.rt - o,
          d = Math.round(_ / l.length);
        for (const m of l) m.viewing_time += d;
      }
      if (((h = e.data) == null ? void 0 : h.view_history) && !((p = e.data) != null && p.rt)) {
        (l = e.data.view_history), (s = 0);
        for (const c of e.data.view_history) s += c.viewing_time;
      }
      const w = { view_history: l, rt: s },
        g = this.jsPsych.pluginAPI.mergeSimulationData(w, e);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(t, g), g;
    }
    simulate_data_only(t, e) {
      const i = this.create_simulation_data(t, e);
      this.jsPsych.finishTrial(i);
    }
    simulate_visual(t, e, i) {
      const a = this.create_simulation_data(t, e),
        u = this.jsPsych.getDisplayElement();
      this.trial(u, t), i();
      const y = (s) => {
          t.allow_keys
            ? this.jsPsych.pluginAPI.pressKey(t.key_forward, s)
            : t.show_clickable_nav &&
              this.jsPsych.pluginAPI.clickTarget(u.querySelector("#jspsych-instructions-next"), s);
        },
        h = (s) => {
          t.allow_keys
            ? this.jsPsych.pluginAPI.pressKey(t.key_backward, s)
            : t.show_clickable_nav &&
              this.jsPsych.pluginAPI.clickTarget(u.querySelector("#jspsych-instructions-back"), s);
        };
      let p = 0,
        n = 0;
      for (let s = 0; s < a.view_history.length; s++)
        s == a.view_history.length - 1
          ? y(n + a.view_history[s].viewing_time)
          : (a.view_history[s + 1].page_index > p && y(n + a.view_history[s].viewing_time),
            a.view_history[s + 1].page_index < p && h(n + a.view_history[s].viewing_time),
            (n += a.view_history[s].viewing_time),
            (p = a.view_history[s + 1].page_index));
    }
  }
  return (v.info = P), v;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
