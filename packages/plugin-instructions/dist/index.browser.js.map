{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\nimport { parameterPathArrayToString } from \"jspsych/src/timeline/util\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"instructions\",\n  version: version,\n  parameters: {\n    /** Each element of the array is the content for a single page. Each page should be an HTML-formatted string.  */\n    pages: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n      array: true,\n    },\n    /** This is the key that the participant can press in order to advance to the next page. This key should be\n     * specified as a string (e.g., `'a'`, `'ArrowLeft'`, `' '`, `'Enter'`). */\n    key_forward: {\n      type: ParameterType.KEY,\n      default: \"ArrowRight\",\n    },\n    /** This is the key that the participant can press to return to the previous page. This key should be specified as a\n     * string (e.g., `'a'`, `'ArrowLeft'`, `' '`, `'Enter'`). */\n    key_backward: {\n      type: ParameterType.KEY,\n      default: \"ArrowLeft\",\n    },\n    /** If true, the participant can return to previous pages of the instructions. If false, they may only advace to the next page. */\n    allow_backward: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** If `true`, the participant can use keyboard keys to navigate the pages. If `false`, they may not. */\n    allow_keys: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** If true, then a `Previous` and `Next` button will be displayed beneath the instructions. Participants can\n     * click the buttons to navigate. */\n    show_clickable_nav: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** If true, and clickable navigation is enabled, then Page x/y will be shown between the nav buttons. */\n    show_page_number: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** The text that appears before x/y pages displayed when show_page_number is true.*/\n    page_label: {\n      type: ParameterType.STRING,\n      default: \"Page\",\n    },\n    /** The text that appears on the button to go backwards. */\n    button_label_previous: {\n      type: ParameterType.STRING,\n      default: \"Previous\",\n    },\n    /** The text that appears on the button to go forwards. */\n    button_label_next: {\n      type: ParameterType.STRING,\n      default: \"Next\",\n    },\n    /** The callback function when page changes */\n    on_page_change: {\n      type: ParameterType.FUNCTION,\n      pretty_name: \"Page change callback\",\n      default: function (current_page: number) {},\n    },\n  },\n  data: {\n    /** An array containing the order of pages the participant viewed (including when the participant returned to previous pages)\n     *  and the time spent viewing each page. Each object in the array represents a single page view,\n     * and contains keys called `page_index` (the page number, starting with 0) and `viewing_time`\n     * (duration of the page view). This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()`\n     * functions.\n     */\n    view_history: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      parameters: {\n        page_index: {\n          type: ParameterType.INT,\n        },\n        viewing_time: {\n          type: ParameterType.INT,\n        },\n      },\n    },\n    /** The response time in milliseconds for the participant to view all of the pages. */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin is for showing instructions to the participant. It allows participants to navigate through multiple pages\n * of instructions at their own pace, recording how long the participant spends on each page. Navigation can be done using\n *  the mouse or keyboard. participants can be allowed to navigate forwards and backwards through pages, if desired.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/instructions/ instructions plugin documentation on jspsych.org}\n */\nclass InstructionsPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var current_page = 0;\n\n    var view_history = [];\n\n    var start_time = performance.now();\n\n    var last_page_update_time = start_time;\n\n    function btnListener() {\n      if (this.id === \"jspsych-instructions-back\") {\n        back();\n      } else if (this.id === \"jspsych-instructions-next\") {\n        next();\n      }\n    }\n\n    function show_current_page() {\n      var html = trial.pages[current_page];\n\n      var pagenum_display = \"\";\n      if (trial.show_page_number) {\n        pagenum_display =\n          \"<span style='margin: 0 1em;' class='\" +\n          \"jspsych-instructions-pagenum'>\" +\n          trial.page_label +\n          \" \" +\n          (current_page + 1) +\n          \"/\" +\n          trial.pages.length +\n          \"</span>\";\n      }\n\n      if (trial.show_clickable_nav) {\n        var nav_html = \"<div class='jspsych-instructions-nav' style='padding: 10px 0px;'>\";\n        if (trial.allow_backward) {\n          var allowed = current_page > 0 ? \"\" : \"disabled='disabled'\";\n          nav_html +=\n            \"<button id='jspsych-instructions-back' class='jspsych-btn' style='margin-right: 5px;' \" +\n            allowed +\n            \">&lt; \" +\n            trial.button_label_previous +\n            \"</button>\";\n        }\n        if (trial.pages.length > 1 && trial.show_page_number) {\n          nav_html += pagenum_display;\n        }\n        nav_html +=\n          \"<button id='jspsych-instructions-next' class='jspsych-btn'\" +\n          \"style='margin-left: 5px;'>\" +\n          trial.button_label_next +\n          \" &gt;</button></div>\";\n\n        html += nav_html;\n        display_element.innerHTML = html;\n        if (current_page != 0 && trial.allow_backward) {\n          display_element\n            .querySelector(\"#jspsych-instructions-back\")\n            .addEventListener(\"click\", btnListener, { once: true });\n        }\n\n        display_element\n          .querySelector(\"#jspsych-instructions-next\")\n          .addEventListener(\"click\", btnListener, { once: true });\n      } else {\n        if (trial.show_page_number && trial.pages.length > 1) {\n          // page numbers for non-mouse navigation\n          html += \"<div class='jspsych-instructions-pagenum'>\" + pagenum_display + \"</div>\";\n        }\n        display_element.innerHTML = html;\n      }\n    }\n\n    function next() {\n      add_current_page_to_view_history();\n\n      current_page++;\n\n      // if done, finish up...\n      if (current_page >= trial.pages.length) {\n        endTrial();\n      } else {\n        show_current_page();\n      }\n\n      trial.on_page_change(current_page);\n    }\n\n    function back() {\n      add_current_page_to_view_history();\n\n      current_page--;\n\n      show_current_page();\n\n      trial.on_page_change(current_page);\n    }\n\n    function add_current_page_to_view_history() {\n      var current_time = performance.now();\n\n      var page_view_time = Math.round(current_time - last_page_update_time);\n\n      view_history.push({\n        page_index: current_page,\n        viewing_time: page_view_time,\n      });\n\n      last_page_update_time = current_time;\n    }\n\n    const endTrial = () => {\n      if (trial.allow_keys) {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboard_listener);\n      }\n\n      var trial_data = {\n        view_history: view_history,\n        rt: Math.round(performance.now() - start_time),\n      };\n\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    const after_response = (info) => {\n      // have to reinitialize this instead of letting it persist to prevent accidental skips of pages by holding down keys too long\n      keyboard_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [trial.key_forward, trial.key_backward],\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n      // check if key is forwards or backwards and update page\n      if (this.jsPsych.pluginAPI.compareKeys(info.key, trial.key_backward)) {\n        if (current_page !== 0 && trial.allow_backward) {\n          back();\n        }\n      }\n\n      if (this.jsPsych.pluginAPI.compareKeys(info.key, trial.key_forward)) {\n        next();\n      }\n    };\n\n    show_current_page();\n\n    if (trial.allow_keys) {\n      var keyboard_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [trial.key_forward, trial.key_backward],\n        rt_method: \"performance\",\n        persist: false,\n      });\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    let curr_page = 0;\n    let rt = 0;\n    let view_history = [];\n\n    // if there is no view history and no RT, simulate a random walk through the pages\n    if (!simulation_options.data?.view_history && !simulation_options.data?.rt) {\n      while (curr_page !== trial.pages.length) {\n        const view_time = Math.round(\n          this.jsPsych.randomization.sampleExGaussian(3000, 300, 1 / 300)\n        );\n        view_history.push({ page_index: curr_page, viewing_time: view_time });\n        rt += view_time;\n        if (curr_page == 0 || !trial.allow_backward) {\n          curr_page++;\n        } else {\n          if (this.jsPsych.randomization.sampleBernoulli(0.9) == 1) {\n            curr_page++;\n          } else {\n            curr_page--;\n          }\n        }\n      }\n    }\n\n    // if there is an RT but no view history, simulate a random walk through the pages\n    // that ends on the final page when the RT is reached\n    if (!simulation_options.data?.view_history && simulation_options.data?.rt) {\n      rt = simulation_options.data.rt;\n      while (curr_page !== trial.pages.length) {\n        view_history.push({ page_index: curr_page, viewing_time: null });\n        if (curr_page == 0 || !trial.allow_backward) {\n          curr_page++;\n        } else {\n          if (this.jsPsych.randomization.sampleBernoulli(0.9) == 1) {\n            curr_page++;\n          } else {\n            curr_page--;\n          }\n        }\n      }\n      const avg_rt_per_page = simulation_options.data.rt / view_history.length;\n      let total_time = 0;\n      for (const page of view_history) {\n        const t = Math.round(\n          this.jsPsych.randomization.sampleExGaussian(\n            avg_rt_per_page,\n            avg_rt_per_page / 10,\n            1 / (avg_rt_per_page / 10)\n          )\n        );\n        page.viewing_time = t;\n        total_time += t;\n      }\n      const diff = simulation_options.data.rt - total_time;\n      // remove equal diff from each page\n      const diff_per_page = Math.round(diff / view_history.length);\n      for (const page of view_history) {\n        page.viewing_time += diff_per_page;\n      }\n    }\n\n    // if there is a view history but no RT, make the RT equal the sum of the view history\n    if (simulation_options.data?.view_history && !simulation_options.data?.rt) {\n      view_history = simulation_options.data.view_history;\n      rt = 0;\n      for (const page of simulation_options.data.view_history) {\n        rt += page.viewing_time;\n      }\n    }\n\n    const default_data = {\n      view_history: view_history,\n      rt: rt,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const advance = (rt) => {\n      if (trial.allow_keys) {\n        this.jsPsych.pluginAPI.pressKey(trial.key_forward, rt);\n      } else if (trial.show_clickable_nav) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\"#jspsych-instructions-next\"),\n          rt\n        );\n      }\n    };\n\n    const backup = (rt) => {\n      if (trial.allow_keys) {\n        this.jsPsych.pluginAPI.pressKey(trial.key_backward, rt);\n      } else if (trial.show_clickable_nav) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\"#jspsych-instructions-back\"),\n          rt\n        );\n      }\n    };\n\n    let curr_page = 0;\n    let t = 0;\n    for (let i = 0; i < data.view_history.length; i++) {\n      if (i == data.view_history.length - 1) {\n        advance(t + data.view_history[i].viewing_time);\n      } else {\n        if (data.view_history[i + 1].page_index > curr_page) {\n          advance(t + data.view_history[i].viewing_time);\n        }\n        if (data.view_history[i + 1].page_index < curr_page) {\n          backup(t + data.view_history[i].viewing_time);\n        }\n        t += data.view_history[i].viewing_time;\n        curr_page = data.view_history[i + 1].page_index;\n      }\n    }\n  }\n}\n\nexport default InstructionsPlugin;\n"],"names":["version","ParameterType","info"],"mappings":"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"}