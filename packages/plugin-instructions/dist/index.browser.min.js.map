{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\nimport { parameterPathArrayToString } from \"jspsych/src/timeline/util\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"instructions\",\n  version: version,\n  parameters: {\n    /** Each element of the array is the content for a single page. Each page should be an HTML-formatted string.  */\n    pages: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n      array: true,\n    },\n    /** This is the key that the participant can press in order to advance to the next page. This key should be\n     * specified as a string (e.g., `'a'`, `'ArrowLeft'`, `' '`, `'Enter'`). */\n    key_forward: {\n      type: ParameterType.KEY,\n      default: \"ArrowRight\",\n    },\n    /** This is the key that the participant can press to return to the previous page. This key should be specified as a\n     * string (e.g., `'a'`, `'ArrowLeft'`, `' '`, `'Enter'`). */\n    key_backward: {\n      type: ParameterType.KEY,\n      default: \"ArrowLeft\",\n    },\n    /** If true, the participant can return to previous pages of the instructions. If false, they may only advace to the next page. */\n    allow_backward: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** If `true`, the participant can use keyboard keys to navigate the pages. If `false`, they may not. */\n    allow_keys: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** If true, then a `Previous` and `Next` button will be displayed beneath the instructions. Participants can\n     * click the buttons to navigate. */\n    show_clickable_nav: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** If true, and clickable navigation is enabled, then Page x/y will be shown between the nav buttons. */\n    show_page_number: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** The text that appears before x/y pages displayed when show_page_number is true.*/\n    page_label: {\n      type: ParameterType.STRING,\n      default: \"Page\",\n    },\n    /** The text that appears on the button to go backwards. */\n    button_label_previous: {\n      type: ParameterType.STRING,\n      default: \"Previous\",\n    },\n    /** The text that appears on the button to go forwards. */\n    button_label_next: {\n      type: ParameterType.STRING,\n      default: \"Next\",\n    },\n    /** The callback function when page changes */\n    on_page_change: {\n      type: ParameterType.FUNCTION,\n      pretty_name: \"Page change callback\",\n      default: function (current_page: number) {},\n    },\n  },\n  data: {\n    /** An array containing the order of pages the participant viewed (including when the participant returned to previous pages)\n     *  and the time spent viewing each page. Each object in the array represents a single page view,\n     * and contains keys called `page_index` (the page number, starting with 0) and `viewing_time`\n     * (duration of the page view). This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()`\n     * functions.\n     */\n    view_history: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      parameters: {\n        page_index: {\n          type: ParameterType.INT,\n        },\n        viewing_time: {\n          type: ParameterType.INT,\n        },\n      },\n    },\n    /** The response time in milliseconds for the participant to view all of the pages. */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin is for showing instructions to the participant. It allows participants to navigate through multiple pages\n * of instructions at their own pace, recording how long the participant spends on each page. Navigation can be done using\n *  the mouse or keyboard. participants can be allowed to navigate forwards and backwards through pages, if desired.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/instructions/ instructions plugin documentation on jspsych.org}\n */\nclass InstructionsPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var current_page = 0;\n\n    var view_history = [];\n\n    var start_time = performance.now();\n\n    var last_page_update_time = start_time;\n\n    function btnListener() {\n      if (this.id === \"jspsych-instructions-back\") {\n        back();\n      } else if (this.id === \"jspsych-instructions-next\") {\n        next();\n      }\n    }\n\n    function show_current_page() {\n      var html = trial.pages[current_page];\n\n      var pagenum_display = \"\";\n      if (trial.show_page_number) {\n        pagenum_display =\n          \"<span style='margin: 0 1em;' class='\" +\n          \"jspsych-instructions-pagenum'>\" +\n          trial.page_label +\n          \" \" +\n          (current_page + 1) +\n          \"/\" +\n          trial.pages.length +\n          \"</span>\";\n      }\n\n      if (trial.show_clickable_nav) {\n        var nav_html = \"<div class='jspsych-instructions-nav' style='padding: 10px 0px;'>\";\n        if (trial.allow_backward) {\n          var allowed = current_page > 0 ? \"\" : \"disabled='disabled'\";\n          nav_html +=\n            \"<button id='jspsych-instructions-back' class='jspsych-btn' style='margin-right: 5px;' \" +\n            allowed +\n            \">&lt; \" +\n            trial.button_label_previous +\n            \"</button>\";\n        }\n        if (trial.pages.length > 1 && trial.show_page_number) {\n          nav_html += pagenum_display;\n        }\n        nav_html +=\n          \"<button id='jspsych-instructions-next' class='jspsych-btn'\" +\n          \"style='margin-left: 5px;'>\" +\n          trial.button_label_next +\n          \" &gt;</button></div>\";\n\n        html += nav_html;\n        display_element.innerHTML = html;\n        if (current_page != 0 && trial.allow_backward) {\n          display_element\n            .querySelector(\"#jspsych-instructions-back\")\n            .addEventListener(\"click\", btnListener, { once: true });\n        }\n\n        display_element\n          .querySelector(\"#jspsych-instructions-next\")\n          .addEventListener(\"click\", btnListener, { once: true });\n      } else {\n        if (trial.show_page_number && trial.pages.length > 1) {\n          // page numbers for non-mouse navigation\n          html += \"<div class='jspsych-instructions-pagenum'>\" + pagenum_display + \"</div>\";\n        }\n        display_element.innerHTML = html;\n      }\n    }\n\n    function next() {\n      add_current_page_to_view_history();\n\n      current_page++;\n\n      // if done, finish up...\n      if (current_page >= trial.pages.length) {\n        endTrial();\n      } else {\n        show_current_page();\n      }\n\n      trial.on_page_change(current_page);\n    }\n\n    function back() {\n      add_current_page_to_view_history();\n\n      current_page--;\n\n      show_current_page();\n\n      trial.on_page_change(current_page);\n    }\n\n    function add_current_page_to_view_history() {\n      var current_time = performance.now();\n\n      var page_view_time = Math.round(current_time - last_page_update_time);\n\n      view_history.push({\n        page_index: current_page,\n        viewing_time: page_view_time,\n      });\n\n      last_page_update_time = current_time;\n    }\n\n    const endTrial = () => {\n      if (trial.allow_keys) {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboard_listener);\n      }\n\n      var trial_data = {\n        view_history: view_history,\n        rt: Math.round(performance.now() - start_time),\n      };\n\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    const after_response = (info) => {\n      // have to reinitialize this instead of letting it persist to prevent accidental skips of pages by holding down keys too long\n      keyboard_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [trial.key_forward, trial.key_backward],\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n      // check if key is forwards or backwards and update page\n      if (this.jsPsych.pluginAPI.compareKeys(info.key, trial.key_backward)) {\n        if (current_page !== 0 && trial.allow_backward) {\n          back();\n        }\n      }\n\n      if (this.jsPsych.pluginAPI.compareKeys(info.key, trial.key_forward)) {\n        next();\n      }\n    };\n\n    show_current_page();\n\n    if (trial.allow_keys) {\n      var keyboard_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [trial.key_forward, trial.key_backward],\n        rt_method: \"performance\",\n        persist: false,\n      });\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    let curr_page = 0;\n    let rt = 0;\n    let view_history = [];\n\n    // if there is no view history and no RT, simulate a random walk through the pages\n    if (!simulation_options.data?.view_history && !simulation_options.data?.rt) {\n      while (curr_page !== trial.pages.length) {\n        const view_time = Math.round(\n          this.jsPsych.randomization.sampleExGaussian(3000, 300, 1 / 300)\n        );\n        view_history.push({ page_index: curr_page, viewing_time: view_time });\n        rt += view_time;\n        if (curr_page == 0 || !trial.allow_backward) {\n          curr_page++;\n        } else {\n          if (this.jsPsych.randomization.sampleBernoulli(0.9) == 1) {\n            curr_page++;\n          } else {\n            curr_page--;\n          }\n        }\n      }\n    }\n\n    // if there is an RT but no view history, simulate a random walk through the pages\n    // that ends on the final page when the RT is reached\n    if (!simulation_options.data?.view_history && simulation_options.data?.rt) {\n      rt = simulation_options.data.rt;\n      while (curr_page !== trial.pages.length) {\n        view_history.push({ page_index: curr_page, viewing_time: null });\n        if (curr_page == 0 || !trial.allow_backward) {\n          curr_page++;\n        } else {\n          if (this.jsPsych.randomization.sampleBernoulli(0.9) == 1) {\n            curr_page++;\n          } else {\n            curr_page--;\n          }\n        }\n      }\n      const avg_rt_per_page = simulation_options.data.rt / view_history.length;\n      let total_time = 0;\n      for (const page of view_history) {\n        const t = Math.round(\n          this.jsPsych.randomization.sampleExGaussian(\n            avg_rt_per_page,\n            avg_rt_per_page / 10,\n            1 / (avg_rt_per_page / 10)\n          )\n        );\n        page.viewing_time = t;\n        total_time += t;\n      }\n      const diff = simulation_options.data.rt - total_time;\n      // remove equal diff from each page\n      const diff_per_page = Math.round(diff / view_history.length);\n      for (const page of view_history) {\n        page.viewing_time += diff_per_page;\n      }\n    }\n\n    // if there is a view history but no RT, make the RT equal the sum of the view history\n    if (simulation_options.data?.view_history && !simulation_options.data?.rt) {\n      view_history = simulation_options.data.view_history;\n      rt = 0;\n      for (const page of simulation_options.data.view_history) {\n        rt += page.viewing_time;\n      }\n    }\n\n    const default_data = {\n      view_history: view_history,\n      rt: rt,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const advance = (rt) => {\n      if (trial.allow_keys) {\n        this.jsPsych.pluginAPI.pressKey(trial.key_forward, rt);\n      } else if (trial.show_clickable_nav) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\"#jspsych-instructions-next\"),\n          rt\n        );\n      }\n    };\n\n    const backup = (rt) => {\n      if (trial.allow_keys) {\n        this.jsPsych.pluginAPI.pressKey(trial.key_backward, rt);\n      } else if (trial.show_clickable_nav) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\"#jspsych-instructions-back\"),\n          rt\n        );\n      }\n    };\n\n    let curr_page = 0;\n    let t = 0;\n    for (let i = 0; i < data.view_history.length; i++) {\n      if (i == data.view_history.length - 1) {\n        advance(t + data.view_history[i].viewing_time);\n      } else {\n        if (data.view_history[i + 1].page_index > curr_page) {\n          advance(t + data.view_history[i].viewing_time);\n        }\n        if (data.view_history[i + 1].page_index < curr_page) {\n          backup(t + data.view_history[i].viewing_time);\n        }\n        t += data.view_history[i].viewing_time;\n        curr_page = data.view_history[i + 1].page_index;\n      }\n    }\n  }\n}\n\nexport default InstructionsPlugin;\n"],"names":["info","version","ParameterType","current_page","InstructionsPlugin","jsPsych","display_element","trial","view_history","start_time","last_page_update_time","btnListener","back","next","show_current_page","html","pagenum_display","nav_html","allowed","add_current_page_to_view_history","endTrial","current_time","page_view_time","keyboard_listener","trial_data","after_response","simulation_mode","simulation_options","load_callback","_a","_b","_c","_d","_e","_f","curr_page","rt","view_time","avg_rt_per_page","total_time","page","t","diff","diff_per_page","default_data","data","advance","backup","i"],"mappings":"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"}