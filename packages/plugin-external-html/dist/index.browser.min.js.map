{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"external-html\",\n  version: version,\n  parameters: {\n    /** The URL of the page to display. */\n    url: {\n      type: ParameterType.STRING,\n      default: undefined,\n    },\n    /** The key character the participant can use to advance to the next trial. If left as null, then the participant will not be able to advance trials using the keyboard. */\n    cont_key: {\n      type: ParameterType.KEY,\n      default: null,\n    },\n    /** The ID of a clickable element on the page. When the element is clicked, the trial will advance. */\n    cont_btn: {\n      type: ParameterType.STRING,\n      default: null,\n    },\n    /** `function(){ return true; }` | This function is called with the jsPsych `display_element` as the only argument when the participant attempts to advance the trial. The trial will only advance if the function return `true`. This can be used to verify that the participant has correctly filled out a form before continuing, for example. */\n    check_fn: {\n      type: ParameterType.FUNCTION,\n      default: () => true,\n    },\n    /** If `true`, then the plugin will avoid using the cached version of the HTML page to load if one exists. */\n    force_refresh: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** If `true`, then scripts on the remote page will be executed. */\n    execute_script: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Execute scripts\",\n      default: false,\n    },\n  },\n  data: {\n    /** The url of the page. */\n    url: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to finish the trial. */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The HTML plugin displays an external HTML document (often a consent form). Either a keyboard response or a button press can be used to continue to the next trial. It allows the experimenter to check if conditions are met (such as indicating informed consent) before continuing.\n *\n * @author Erik Weitnauer\n * @see {@link https://www.jspsych.org/latest/plugins/external-html/ external-html plugin documentation on jspsych.org}\n */\nclass ExternalHtmlPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    // hold the .resolve() function from the Promise that ends the trial\n    let trial_complete;\n\n    var url = trial.url;\n    if (trial.force_refresh) {\n      url = trial.url + \"?t=\" + performance.now();\n    }\n\n    fetch(url)\n      .then((response) => {\n        return response.text();\n      })\n      .then((html) => {\n        display_element.innerHTML = html;\n        on_load();\n        var t0 = performance.now();\n\n        const key_listener = (e) => {\n          if (this.jsPsych.pluginAPI.compareKeys(e.key, trial.cont_key)) {\n            finish();\n          }\n        };\n\n        const finish = () => {\n          if (trial.check_fn && !trial.check_fn(display_element)) {\n            return;\n          }\n          if (trial.cont_key) {\n            display_element.removeEventListener(\"keydown\", key_listener);\n          }\n          var trial_data = {\n            rt: Math.round(performance.now() - t0),\n            url: trial.url,\n          };\n          this.jsPsych.finishTrial(trial_data);\n          trial_complete();\n        };\n\n        // by default, scripts on the external page are not executed with XMLHttpRequest().\n        // To activate their content through DOM manipulation, we need to relocate all script tags\n        if (trial.execute_script) {\n          // changed for..of getElementsByTagName(\"script\") here to for i loop due to TS error:\n          // Type 'HTMLCollectionOf<HTMLScriptElement>' must have a '[Symbol.iterator]()' method that returns an iterator.ts(2488)\n          var all_scripts = display_element.getElementsByTagName(\"script\");\n          for (var i = 0; i < all_scripts.length; i++) {\n            const relocatedScript = document.createElement(\"script\");\n            const curr_script = all_scripts[i];\n            relocatedScript.text = curr_script.text;\n            curr_script.parentNode.replaceChild(relocatedScript, curr_script);\n          }\n        }\n\n        if (trial.cont_btn) {\n          display_element.querySelector(\"#\" + trial.cont_btn).addEventListener(\"click\", finish);\n        }\n\n        if (trial.cont_key) {\n          display_element.addEventListener(\"keydown\", key_listener);\n        }\n      })\n      .catch((err) => {\n        console.error(`Something went wrong with fetch() in plugin-external-html.`, err);\n      });\n\n    // helper to load via XMLHttpRequest\n    /*const load = (element, file, callback) => {\n      var xmlhttp = new XMLHttpRequest();\n      xmlhttp.open(\"GET\", file, true);\n      xmlhttp.onload = () => {\n        console.log(`loaded ${xmlhttp.status}`)\n        if (xmlhttp.status == 200 || xmlhttp.status == 0) {\n          //Check if loaded\n          element.innerHTML = xmlhttp.responseText;\n          console.log(`made it ${xmlhttp.responseText}`);\n          callback();\n        }\n      };\n      xmlhttp.send();\n    };\n\n    load(display_element, url, () => {\n      \n    });\n*/\n    return new Promise((resolve) => {\n      trial_complete = resolve;\n    });\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      url: trial.url,\n      rt: this.jsPsych.randomization.sampleExGaussian(2000, 200, 1 / 200, true),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial, () => {\n      load_callback();\n      if (trial.cont_key) {\n        this.jsPsych.pluginAPI.pressKey(trial.cont_key, data.rt);\n      } else if (trial.cont_btn) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\"#\" + trial.cont_btn),\n          data.rt\n        );\n      }\n    });\n  }\n}\n\nexport default ExternalHtmlPlugin;\n"],"names":["info","version","ParameterType","ExternalHtmlPlugin","jsPsych","display_element","trial","on_load","trial_complete","url","response","html","t0","key_listener","e","finish","trial_data","all_scripts","i","relocatedScript","curr_script","err","resolve","simulation_mode","simulation_options","load_callback","default_data","data"],"mappings":"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"}