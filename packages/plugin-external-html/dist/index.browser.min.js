var jsPsychExternalHtml = (function (n) {
  "use strict";
  var m = {
    name: "@jspsych/plugin-external-html",
    version: "2.0.0",
    description: "jsPsych plugin to load and display external html pages",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-external-html",
    },
    author: "Erik Weitnauer",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/external-html",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: {
      "@jspsych/config": "^3.0.0",
      "@jspsych/test-utils": "^1.2.0",
      "jest-fetch-mock": "^3.0.3",
    },
  };
  const d = {
    name: "external-html",
    version: m.version,
    parameters: {
      url: { type: n.ParameterType.STRING, default: void 0 },
      cont_key: { type: n.ParameterType.KEY, default: null },
      cont_btn: { type: n.ParameterType.STRING, default: null },
      check_fn: { type: n.ParameterType.FUNCTION, default: () => !0 },
      force_refresh: { type: n.ParameterType.BOOL, default: !1 },
      execute_script: { type: n.ParameterType.BOOL, pretty_name: "Execute scripts", default: !1 },
    },
    data: { url: { type: n.ParameterType.STRING }, rt: { type: n.ParameterType.INT } },
  };
  class u {
    constructor(e) {
      this.jsPsych = e;
    }
    trial(e, t, r) {
      let s;
      var c = t.url;
      return (
        t.force_refresh && (c = t.url + "?t=" + performance.now()),
        fetch(c)
          .then((i) => i.text())
          .then((i) => {
            (e.innerHTML = i), r();
            var g = performance.now();
            const h = (a) => {
                this.jsPsych.pluginAPI.compareKeys(a.key, t.cont_key) && p();
              },
              p = () => {
                if (!(t.check_fn && !t.check_fn(e))) {
                  t.cont_key && e.removeEventListener("keydown", h);
                  var a = { rt: Math.round(performance.now() - g), url: t.url };
                  this.jsPsych.finishTrial(a), s();
                }
              };
            if (t.execute_script)
              for (var y = e.getElementsByTagName("script"), l = 0; l < y.length; l++) {
                const a = document.createElement("script"),
                  o = y[l];
                (a.text = o.text), o.parentNode.replaceChild(a, o);
              }
            t.cont_btn && e.querySelector("#" + t.cont_btn).addEventListener("click", p),
              t.cont_key && e.addEventListener("keydown", h);
          })
          .catch((i) => {
            console.error("Something went wrong with fetch() in plugin-external-html.", i);
          }),
        new Promise((i) => {
          s = i;
        })
      );
    }
    simulate(e, t, r, s) {
      t == "data-only" && (s(), this.simulate_data_only(e, r)),
        t == "visual" && this.simulate_visual(e, r, s);
    }
    create_simulation_data(e, t) {
      const r = {
          url: e.url,
          rt: this.jsPsych.randomization.sampleExGaussian(2e3, 200, 0.005, !0),
        },
        s = this.jsPsych.pluginAPI.mergeSimulationData(r, t);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(e, s), s;
    }
    simulate_data_only(e, t) {
      const r = this.create_simulation_data(e, t);
      this.jsPsych.finishTrial(r);
    }
    simulate_visual(e, t, r) {
      const s = this.create_simulation_data(e, t),
        c = this.jsPsych.getDisplayElement();
      this.trial(c, e, () => {
        r(),
          e.cont_key
            ? this.jsPsych.pluginAPI.pressKey(e.cont_key, s.rt)
            : e.cont_btn &&
              this.jsPsych.pluginAPI.clickTarget(c.querySelector("#" + e.cont_btn), s.rt);
      });
    }
  }
  return (u.info = d), u;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
