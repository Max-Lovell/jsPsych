{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"external-html\",\n  version: version,\n  parameters: {\n    /** The URL of the page to display. */\n    url: {\n      type: ParameterType.STRING,\n      default: undefined,\n    },\n    /** The key character the participant can use to advance to the next trial. If left as null, then the participant will not be able to advance trials using the keyboard. */\n    cont_key: {\n      type: ParameterType.KEY,\n      default: null,\n    },\n    /** The ID of a clickable element on the page. When the element is clicked, the trial will advance. */\n    cont_btn: {\n      type: ParameterType.STRING,\n      default: null,\n    },\n    /** `function(){ return true; }` | This function is called with the jsPsych `display_element` as the only argument when the participant attempts to advance the trial. The trial will only advance if the function return `true`. This can be used to verify that the participant has correctly filled out a form before continuing, for example. */\n    check_fn: {\n      type: ParameterType.FUNCTION,\n      default: () => true,\n    },\n    /** If `true`, then the plugin will avoid using the cached version of the HTML page to load if one exists. */\n    force_refresh: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** If `true`, then scripts on the remote page will be executed. */\n    execute_script: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Execute scripts\",\n      default: false,\n    },\n  },\n  data: {\n    /** The url of the page. */\n    url: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to finish the trial. */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The HTML plugin displays an external HTML document (often a consent form). Either a keyboard response or a button press can be used to continue to the next trial. It allows the experimenter to check if conditions are met (such as indicating informed consent) before continuing.\n *\n * @author Erik Weitnauer\n * @see {@link https://www.jspsych.org/latest/plugins/external-html/ external-html plugin documentation on jspsych.org}\n */\nclass ExternalHtmlPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    // hold the .resolve() function from the Promise that ends the trial\n    let trial_complete;\n\n    var url = trial.url;\n    if (trial.force_refresh) {\n      url = trial.url + \"?t=\" + performance.now();\n    }\n\n    fetch(url)\n      .then((response) => {\n        return response.text();\n      })\n      .then((html) => {\n        display_element.innerHTML = html;\n        on_load();\n        var t0 = performance.now();\n\n        const key_listener = (e) => {\n          if (this.jsPsych.pluginAPI.compareKeys(e.key, trial.cont_key)) {\n            finish();\n          }\n        };\n\n        const finish = () => {\n          if (trial.check_fn && !trial.check_fn(display_element)) {\n            return;\n          }\n          if (trial.cont_key) {\n            display_element.removeEventListener(\"keydown\", key_listener);\n          }\n          var trial_data = {\n            rt: Math.round(performance.now() - t0),\n            url: trial.url,\n          };\n          this.jsPsych.finishTrial(trial_data);\n          trial_complete();\n        };\n\n        // by default, scripts on the external page are not executed with XMLHttpRequest().\n        // To activate their content through DOM manipulation, we need to relocate all script tags\n        if (trial.execute_script) {\n          // changed for..of getElementsByTagName(\"script\") here to for i loop due to TS error:\n          // Type 'HTMLCollectionOf<HTMLScriptElement>' must have a '[Symbol.iterator]()' method that returns an iterator.ts(2488)\n          var all_scripts = display_element.getElementsByTagName(\"script\");\n          for (var i = 0; i < all_scripts.length; i++) {\n            const relocatedScript = document.createElement(\"script\");\n            const curr_script = all_scripts[i];\n            relocatedScript.text = curr_script.text;\n            curr_script.parentNode.replaceChild(relocatedScript, curr_script);\n          }\n        }\n\n        if (trial.cont_btn) {\n          display_element.querySelector(\"#\" + trial.cont_btn).addEventListener(\"click\", finish);\n        }\n\n        if (trial.cont_key) {\n          display_element.addEventListener(\"keydown\", key_listener);\n        }\n      })\n      .catch((err) => {\n        console.error(`Something went wrong with fetch() in plugin-external-html.`, err);\n      });\n\n    // helper to load via XMLHttpRequest\n    /*const load = (element, file, callback) => {\n      var xmlhttp = new XMLHttpRequest();\n      xmlhttp.open(\"GET\", file, true);\n      xmlhttp.onload = () => {\n        console.log(`loaded ${xmlhttp.status}`)\n        if (xmlhttp.status == 200 || xmlhttp.status == 0) {\n          //Check if loaded\n          element.innerHTML = xmlhttp.responseText;\n          console.log(`made it ${xmlhttp.responseText}`);\n          callback();\n        }\n      };\n      xmlhttp.send();\n    };\n\n    load(display_element, url, () => {\n      \n    });\n*/\n    return new Promise((resolve) => {\n      trial_complete = resolve;\n    });\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      url: trial.url,\n      rt: this.jsPsych.randomization.sampleExGaussian(2000, 200, 1 / 200, true),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial, () => {\n      load_callback();\n      if (trial.cont_key) {\n        this.jsPsych.pluginAPI.pressKey(trial.cont_key, data.rt);\n      } else if (trial.cont_btn) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\"#\" + trial.cont_btn),\n          data.rt\n        );\n      }\n    });\n  }\n}\n\nexport default ExternalHtmlPlugin;\n"],"names":["version","ParameterType"],"mappings":"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"}