{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"maxdiff\",\n  version: version,\n  parameters: {\n    /** An array of one or more alternatives of string type to fill the rows of the maxdiff table. If `required` is true,\n     * then the array must contain two or more alternatives, so that at least one can be selected for both the left\n     * and right columns.  */\n    alternatives: {\n      type: ParameterType.STRING,\n      array: true,\n      default: undefined,\n    },\n    /** An array with exactly two labels of string type to display as column headings (to the left and right of the\n     * alternatives) for responses on the criteria of interest. */\n    labels: {\n      type: ParameterType.STRING,\n      array: true,\n      default: undefined,\n    },\n    /** If true, the display order of `alternatives` is randomly determined at the start of the trial. */\n    randomize_alternative_order: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** HTML formatted string to display at the top of the page above the maxdiff table. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      default: \"\",\n    },\n    /** Label of the button to submit response. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /** If true, prevents the user from submitting the response and proceeding until a radio button in both the left and right response columns has been selected. */\n    required: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the maxdiff table first\n     * appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** An object with two keys, `left` and `right`, containing the labels (strings) corresponding to the left and right response\n     * columns. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions.  */\n    labels: {\n      type: ParameterType.COMPLEX,\n      parameters: {\n        left: {\n          type: ParameterType.STRING,\n        },\n        right: {\n          type: ParameterType.STRING,\n        },\n      },\n    },\n    /** An object with two keys, `left` and `right`, containing the alternatives selected on the left and right columns.\n     * This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    response: {\n      type: ParameterType.COMPLEX,\n      parameters: {\n        left: {\n          type: ParameterType.STRING,\n        },\n        right: {\n          type: ParameterType.STRING,\n        },\n      },\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The maxdiff plugin displays a table with rows of alternatives to be selected for two mutually-exclusive categories,\n * typically as 'most' or 'least' on a particular criteria (e.g. importance, preference, similarity). The participant\n * responds by selecting one radio button corresponding to an alternative in both the left and right response columns.\n * The same alternative cannot be endorsed on both the left and right response columns (e.g. 'most' and 'least') simultaneously.\n *\n * @author Angus Hughes\n * @see {@link https://www.jspsych.org/latest/plugins/maxdiff/ maxdiff plugin documentation on jspsych.org}\n */\nclass MaxdiffPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var html = \"\";\n    // inject CSS for trial\n    html += '<style id=\"jspsych-maxdiff-css\">';\n    html +=\n      \".jspsych-maxdiff-statement {display:block; font-size: 16px; padding-top: 40px; margin-bottom:10px;}\" +\n      \"table.jspsych-maxdiff-table {border-collapse: collapse; padding: 15px; margin-left: auto; margin-right: auto;}\" +\n      \"table.jspsych-maxdiff-table td, th {border-bottom: 1px solid #dddddd; text-align: center; padding: 8px;}\" +\n      \"table.jspsych-maxdiff-table tr:nth-child(even) {background-color: #dddddd;}\";\n    html += \"</style>\";\n\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-maxdiff-preamble\" class=\"jspsych-maxdiff-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n    html += '<form id=\"jspsych-maxdiff-form\">';\n\n    // add maxdiff options ///\n    // first generate alternative order, randomized here as opposed to randomizing the order of alternatives\n    // so that the data are always associated with the same alternative regardless of order.\n    var alternative_order = [];\n    for (var i = 0; i < trial.alternatives.length; i++) {\n      alternative_order.push(i);\n    }\n    if (trial.randomize_alternative_order) {\n      alternative_order = this.jsPsych.randomization.shuffle(alternative_order);\n    }\n\n    // Start with column headings\n    var maxdiff_table =\n      '<table class=\"jspsych-maxdiff-table\"><tr><th id=\"jspsych-maxdiff-left-label\">' +\n      trial.labels[0] +\n      '</th><th></th><th id=\"jspsych-maxdiff-right-label\">' +\n      trial.labels[1] +\n      \"</th></tr>\";\n\n    // construct each row of the maxdiff table\n    for (var i = 0; i < trial.alternatives.length; i++) {\n      var alternative = trial.alternatives[alternative_order[i]];\n      // add alternative\n      maxdiff_table +=\n        '<tr><td><input class= \"jspsych-maxdiff-alt-' +\n        i.toString() +\n        '\" type=\"radio\" name=\"left\" data-name = ' +\n        alternative_order[i].toString() +\n        \" /><br></td>\";\n      maxdiff_table +=\n        '<td id=\"jspsych-maxdiff-alternative-' + i.toString() + '\">' + alternative + \"</td>\";\n      maxdiff_table +=\n        '<td><input class= \"jspsych-maxdiff-alt-' +\n        i.toString() +\n        '\" type=\"radio\" name=\"right\" data-name = ' +\n        alternative_order[i].toString() +\n        \" /><br></td></tr>\";\n    }\n    maxdiff_table += \"</table><br><br>\";\n    html += maxdiff_table;\n\n    // add submit button\n    var enable_submit = trial.required == true ? 'disabled = \"disabled\"' : \"\";\n    html +=\n      '<input type=\"submit\" id=\"jspsych-maxdiff-next\" class=\"jspsych-maxdiff jspsych-btn\" ' +\n      enable_submit +\n      ' value=\"' +\n      trial.button_label +\n      '\"></input>';\n    html += \"</form>\";\n\n    display_element.innerHTML = html;\n\n    // function to control responses\n    // first checks that the same alternative cannot be endorsed in the left and right columns simultaneously.\n    // then enables the submit button if the trial is required.\n    const left_right = [\"left\", \"right\"];\n    left_right.forEach((p) => {\n      // Get all elements either 'left' or 'right'\n      document.getElementsByName(p).forEach((alt) => {\n        alt.addEventListener(\"click\", () => {\n          // Find the opposite (if left, then right & vice versa) identified by the class (jspsych-maxdiff-alt-1, 2, etc)\n          var op = alt[\"name\"] == \"left\" ? \"right\" : \"left\";\n          var n = document.getElementsByClassName(alt.className).namedItem(op);\n          // If it's checked, uncheck it.\n          if (n[\"checked\"]) {\n            n[\"checked\"] = false;\n          }\n\n          // check response\n          if (trial.required) {\n            // Now check if one of both left and right have been enabled to allow submission\n            var left_checked = Array.from(document.getElementsByName(\"left\")).some(\n              (c: HTMLInputElement) => c.checked\n            );\n            var right_checked = Array.from(document.getElementsByName(\"right\")).some(\n              (c: HTMLInputElement) => c.checked\n            );\n            if (left_checked && right_checked) {\n              (document.getElementById(\"jspsych-maxdiff-next\") as HTMLInputElement).disabled =\n                false;\n            } else {\n              (document.getElementById(\"jspsych-maxdiff-next\") as HTMLInputElement).disabled = true;\n            }\n          }\n        });\n      });\n    });\n\n    // Get the data once the submit button is clicked\n    // Get the data once the submit button is clicked\n    display_element.querySelector(\"#jspsych-maxdiff-form\").addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // get the alternative by the data-name attribute, allowing a null response if unchecked\n      function get_response(side) {\n        var col = display_element.querySelectorAll('[name=\"' + side + '\"]:checked')[0];\n        if (col === undefined) {\n          return null;\n        } else {\n          var i = parseInt(col.getAttribute(\"data-name\"));\n          return trial.alternatives[i];\n        }\n      }\n\n      // data saving\n      var trial_data = {\n        rt: response_time,\n        labels: { left: trial.labels[0], right: trial.labels[1] },\n        response: { left: get_response(\"left\"), right: get_response(\"right\") },\n      };\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const choices = this.jsPsych.randomization.sampleWithoutReplacement(trial.alternatives, 2);\n    const response = { left: null, right: null };\n    if (!trial.required && this.jsPsych.randomization.sampleBernoulli(0.1)) {\n      choices.pop();\n      if (this.jsPsych.randomization.sampleBernoulli(0.8)) {\n        choices.pop();\n      }\n    }\n\n    if (choices.length == 1) {\n      if (this.jsPsych.randomization.sampleBernoulli(0.5)) {\n        response.left = choices[0];\n      } else {\n        response.right = choices[0];\n      }\n    }\n\n    if (choices.length == 2) {\n      response.left = choices[0];\n      response.right = choices[1];\n    }\n\n    const default_data = {\n      rt: this.jsPsych.randomization.sampleExGaussian(3000, 300, 1 / 300, true),\n      labels: trial.labels,\n      response: response,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    //@ts-ignore something about symbol iterators?\n    const list = [...display_element.querySelectorAll(\"[id^=jspsych-maxdiff-alternative]\")].map(\n      (x) => {\n        return x.innerHTML;\n      }\n    );\n\n    if (data.response.left !== null) {\n      const index_left = list.indexOf(data.response.left);\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(`.jspsych-maxdiff-alt-${index_left}[name=\"left\"]`),\n        data.rt / 3\n      );\n    }\n\n    if (data.response.right !== null) {\n      const index_right = list.indexOf(data.response.right);\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(`.jspsych-maxdiff-alt-${index_right}[name=\"right\"]`),\n        (data.rt / 3) * 2\n      );\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-maxdiff-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default MaxdiffPlugin;\n"],"names":["info","version","ParameterType","MaxdiffPlugin","jsPsych","display_element","trial","html","alternative_order","i","maxdiff_table","alternative","enable_submit","p","alt","op","n","left_checked","c","right_checked","e","endTime","response_time","startTime","get_response","side","col","trial_data","simulation_mode","simulation_options","load_callback","choices","response","default_data","data","list","x","index_left","index_right"],"mappings":"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"}