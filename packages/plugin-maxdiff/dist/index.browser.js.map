{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"maxdiff\",\n  version: version,\n  parameters: {\n    /** An array of one or more alternatives of string type to fill the rows of the maxdiff table. If `required` is true,\n     * then the array must contain two or more alternatives, so that at least one can be selected for both the left\n     * and right columns.  */\n    alternatives: {\n      type: ParameterType.STRING,\n      array: true,\n      default: undefined,\n    },\n    /** An array with exactly two labels of string type to display as column headings (to the left and right of the\n     * alternatives) for responses on the criteria of interest. */\n    labels: {\n      type: ParameterType.STRING,\n      array: true,\n      default: undefined,\n    },\n    /** If true, the display order of `alternatives` is randomly determined at the start of the trial. */\n    randomize_alternative_order: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** HTML formatted string to display at the top of the page above the maxdiff table. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      default: \"\",\n    },\n    /** Label of the button to submit response. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /** If true, prevents the user from submitting the response and proceeding until a radio button in both the left and right response columns has been selected. */\n    required: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the maxdiff table first\n     * appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** An object with two keys, `left` and `right`, containing the labels (strings) corresponding to the left and right response\n     * columns. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions.  */\n    labels: {\n      type: ParameterType.COMPLEX,\n      parameters: {\n        left: {\n          type: ParameterType.STRING,\n        },\n        right: {\n          type: ParameterType.STRING,\n        },\n      },\n    },\n    /** An object with two keys, `left` and `right`, containing the alternatives selected on the left and right columns.\n     * This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    response: {\n      type: ParameterType.COMPLEX,\n      parameters: {\n        left: {\n          type: ParameterType.STRING,\n        },\n        right: {\n          type: ParameterType.STRING,\n        },\n      },\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The maxdiff plugin displays a table with rows of alternatives to be selected for two mutually-exclusive categories,\n * typically as 'most' or 'least' on a particular criteria (e.g. importance, preference, similarity). The participant\n * responds by selecting one radio button corresponding to an alternative in both the left and right response columns.\n * The same alternative cannot be endorsed on both the left and right response columns (e.g. 'most' and 'least') simultaneously.\n *\n * @author Angus Hughes\n * @see {@link https://www.jspsych.org/latest/plugins/maxdiff/ maxdiff plugin documentation on jspsych.org}\n */\nclass MaxdiffPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var html = \"\";\n    // inject CSS for trial\n    html += '<style id=\"jspsych-maxdiff-css\">';\n    html +=\n      \".jspsych-maxdiff-statement {display:block; font-size: 16px; padding-top: 40px; margin-bottom:10px;}\" +\n      \"table.jspsych-maxdiff-table {border-collapse: collapse; padding: 15px; margin-left: auto; margin-right: auto;}\" +\n      \"table.jspsych-maxdiff-table td, th {border-bottom: 1px solid #dddddd; text-align: center; padding: 8px;}\" +\n      \"table.jspsych-maxdiff-table tr:nth-child(even) {background-color: #dddddd;}\";\n    html += \"</style>\";\n\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-maxdiff-preamble\" class=\"jspsych-maxdiff-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n    html += '<form id=\"jspsych-maxdiff-form\">';\n\n    // add maxdiff options ///\n    // first generate alternative order, randomized here as opposed to randomizing the order of alternatives\n    // so that the data are always associated with the same alternative regardless of order.\n    var alternative_order = [];\n    for (var i = 0; i < trial.alternatives.length; i++) {\n      alternative_order.push(i);\n    }\n    if (trial.randomize_alternative_order) {\n      alternative_order = this.jsPsych.randomization.shuffle(alternative_order);\n    }\n\n    // Start with column headings\n    var maxdiff_table =\n      '<table class=\"jspsych-maxdiff-table\"><tr><th id=\"jspsych-maxdiff-left-label\">' +\n      trial.labels[0] +\n      '</th><th></th><th id=\"jspsych-maxdiff-right-label\">' +\n      trial.labels[1] +\n      \"</th></tr>\";\n\n    // construct each row of the maxdiff table\n    for (var i = 0; i < trial.alternatives.length; i++) {\n      var alternative = trial.alternatives[alternative_order[i]];\n      // add alternative\n      maxdiff_table +=\n        '<tr><td><input class= \"jspsych-maxdiff-alt-' +\n        i.toString() +\n        '\" type=\"radio\" name=\"left\" data-name = ' +\n        alternative_order[i].toString() +\n        \" /><br></td>\";\n      maxdiff_table +=\n        '<td id=\"jspsych-maxdiff-alternative-' + i.toString() + '\">' + alternative + \"</td>\";\n      maxdiff_table +=\n        '<td><input class= \"jspsych-maxdiff-alt-' +\n        i.toString() +\n        '\" type=\"radio\" name=\"right\" data-name = ' +\n        alternative_order[i].toString() +\n        \" /><br></td></tr>\";\n    }\n    maxdiff_table += \"</table><br><br>\";\n    html += maxdiff_table;\n\n    // add submit button\n    var enable_submit = trial.required == true ? 'disabled = \"disabled\"' : \"\";\n    html +=\n      '<input type=\"submit\" id=\"jspsych-maxdiff-next\" class=\"jspsych-maxdiff jspsych-btn\" ' +\n      enable_submit +\n      ' value=\"' +\n      trial.button_label +\n      '\"></input>';\n    html += \"</form>\";\n\n    display_element.innerHTML = html;\n\n    // function to control responses\n    // first checks that the same alternative cannot be endorsed in the left and right columns simultaneously.\n    // then enables the submit button if the trial is required.\n    const left_right = [\"left\", \"right\"];\n    left_right.forEach((p) => {\n      // Get all elements either 'left' or 'right'\n      document.getElementsByName(p).forEach((alt) => {\n        alt.addEventListener(\"click\", () => {\n          // Find the opposite (if left, then right & vice versa) identified by the class (jspsych-maxdiff-alt-1, 2, etc)\n          var op = alt[\"name\"] == \"left\" ? \"right\" : \"left\";\n          var n = document.getElementsByClassName(alt.className).namedItem(op);\n          // If it's checked, uncheck it.\n          if (n[\"checked\"]) {\n            n[\"checked\"] = false;\n          }\n\n          // check response\n          if (trial.required) {\n            // Now check if one of both left and right have been enabled to allow submission\n            var left_checked = Array.prototype.slice.call(document.getElementsByName(\"left\")).some(\n              (c: HTMLInputElement) => c.checked\n            );\n            var right_checked = Array.prototype.slice.call(document.getElementsByName(\"right\")).some(\n              (c: HTMLInputElement) => c.checked\n            );\n            if (left_checked && right_checked) {\n              (document.getElementById(\"jspsych-maxdiff-next\") as HTMLInputElement).disabled =\n                false;\n            } else {\n              (document.getElementById(\"jspsych-maxdiff-next\") as HTMLInputElement).disabled = true;\n            }\n          }\n        });\n      });\n    });\n\n    // Get the data once the submit button is clicked\n    // Get the data once the submit button is clicked\n    display_element.querySelector(\"#jspsych-maxdiff-form\").addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // get the alternative by the data-name attribute, allowing a null response if unchecked\n      function get_response(side) {\n        var col = display_element.querySelectorAll('[name=\"' + side + '\"]:checked')[0];\n        if (col === undefined) {\n          return null;\n        } else {\n          var i = parseInt(col.getAttribute(\"data-name\"));\n          return trial.alternatives[i];\n        }\n      }\n\n      // data saving\n      var trial_data = {\n        rt: response_time,\n        labels: { left: trial.labels[0], right: trial.labels[1] },\n        response: { left: get_response(\"left\"), right: get_response(\"right\") },\n      };\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const choices = this.jsPsych.randomization.sampleWithoutReplacement(trial.alternatives, 2);\n    const response = { left: null, right: null };\n    if (!trial.required && this.jsPsych.randomization.sampleBernoulli(0.1)) {\n      choices.pop();\n      if (this.jsPsych.randomization.sampleBernoulli(0.8)) {\n        choices.pop();\n      }\n    }\n\n    if (choices.length == 1) {\n      if (this.jsPsych.randomization.sampleBernoulli(0.5)) {\n        response.left = choices[0];\n      } else {\n        response.right = choices[0];\n      }\n    }\n\n    if (choices.length == 2) {\n      response.left = choices[0];\n      response.right = choices[1];\n    }\n\n    const default_data = {\n      rt: this.jsPsych.randomization.sampleExGaussian(3000, 300, 1 / 300, true),\n      labels: trial.labels,\n      response: response,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    //@ts-ignore something about symbol iterators?\n    const list = [...display_element.querySelectorAll(\"[id^=jspsych-maxdiff-alternative]\")].map(\n      (x) => {\n        return x.innerHTML;\n      }\n    );\n\n    if (data.response.left !== null) {\n      const index_left = list.indexOf(data.response.left);\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(`.jspsych-maxdiff-alt-${index_left}[name=\"left\"]`),\n        data.rt / 3\n      );\n    }\n\n    if (data.response.right !== null) {\n      const index_right = list.indexOf(data.response.right);\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(`.jspsych-maxdiff-alt-${index_right}[name=\"right\"]`),\n        (data.rt / 3) * 2\n      );\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-maxdiff-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default MaxdiffPlugin;\n"],"names":["version","ParameterType","i"],"mappings":"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"}