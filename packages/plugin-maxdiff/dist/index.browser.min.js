var jsPsychMaxdiff = (function (r) {
  "use strict";
  var y = {
    name: "@jspsych/plugin-maxdiff",
    version: "2.0.0",
    description: "a jspsych plugin for maxdiff/conjoint analysis designs",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-maxdiff",
    },
    author: "Angus Hughes",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/maxdiff",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const g = {
    name: "maxdiff",
    version: y.version,
    parameters: {
      alternatives: { type: r.ParameterType.STRING, array: !0, default: void 0 },
      labels: { type: r.ParameterType.STRING, array: !0, default: void 0 },
      randomize_alternative_order: { type: r.ParameterType.BOOL, default: !1 },
      preamble: { type: r.ParameterType.HTML_STRING, default: "" },
      button_label: { type: r.ParameterType.STRING, default: "Continue" },
      required: { type: r.ParameterType.BOOL, default: !1 },
    },
    data: {
      rt: { type: r.ParameterType.INT },
      labels: {
        type: r.ParameterType.COMPLEX,
        parameters: {
          left: { type: r.ParameterType.STRING },
          right: { type: r.ParameterType.STRING },
        },
      },
      response: {
        type: r.ParameterType.COMPLEX,
        parameters: {
          left: { type: r.ParameterType.STRING },
          right: { type: r.ParameterType.STRING },
        },
      },
    },
  };
  class u {
    constructor(i) {
      this.jsPsych = i;
    }
    trial(i, t) {
      var e = "";
      (e += '<style id="jspsych-maxdiff-css">'),
        (e +=
          ".jspsych-maxdiff-statement {display:block; font-size: 16px; padding-top: 40px; margin-bottom:10px;}table.jspsych-maxdiff-table {border-collapse: collapse; padding: 15px; margin-left: auto; margin-right: auto;}table.jspsych-maxdiff-table td, th {border-bottom: 1px solid #dddddd; text-align: center; padding: 8px;}table.jspsych-maxdiff-table tr:nth-child(even) {background-color: #dddddd;}"),
        (e += "</style>"),
        t.preamble !== null &&
          (e +=
            '<div id="jspsych-maxdiff-preamble" class="jspsych-maxdiff-preamble">' +
            t.preamble +
            "</div>"),
        (e += '<form id="jspsych-maxdiff-form">');
      for (var a = [], s = 0; s < t.alternatives.length; s++) a.push(s);
      t.randomize_alternative_order && (a = this.jsPsych.randomization.shuffle(a));
      for (
        var l =
            '<table class="jspsych-maxdiff-table"><tr><th id="jspsych-maxdiff-left-label">' +
            t.labels[0] +
            '</th><th></th><th id="jspsych-maxdiff-right-label">' +
            t.labels[1] +
            "</th></tr>",
          s = 0;
        s < t.alternatives.length;
        s++
      ) {
        var n = t.alternatives[a[s]];
        (l +=
          '<tr><td><input class= "jspsych-maxdiff-alt-' +
          s.toString() +
          '" type="radio" name="left" data-name = ' +
          a[s].toString() +
          " /><br></td>"),
          (l += '<td id="jspsych-maxdiff-alternative-' + s.toString() + '">' + n + "</td>"),
          (l +=
            '<td><input class= "jspsych-maxdiff-alt-' +
            s.toString() +
            '" type="radio" name="right" data-name = ' +
            a[s].toString() +
            " /><br></td></tr>");
      }
      (l += "</table><br><br>"), (e += l);
      var b = t.required == !0 ? 'disabled = "disabled"' : "";
      (e +=
        '<input type="submit" id="jspsych-maxdiff-next" class="jspsych-maxdiff jspsych-btn" ' +
        b +
        ' value="' +
        t.button_label +
        '"></input>'),
        (e += "</form>"),
        (i.innerHTML = e),
        ["left", "right"].forEach((c) => {
          document.getElementsByName(c).forEach((o) => {
            o.addEventListener("click", () => {
              var p = o.name == "left" ? "right" : "left",
                m = document.getElementsByClassName(o.className).namedItem(p);
              if ((m.checked && (m.checked = !1), t.required)) {
                var h = Array.from(document.getElementsByName("left")).some((d) => d.checked),
                  f = Array.from(document.getElementsByName("right")).some((d) => d.checked);
                h && f
                  ? (document.getElementById("jspsych-maxdiff-next").disabled = !1)
                  : (document.getElementById("jspsych-maxdiff-next").disabled = !0);
              }
            });
          });
        }),
        i.querySelector("#jspsych-maxdiff-form").addEventListener("submit", (c) => {
          c.preventDefault();
          var o = performance.now(),
            p = Math.round(o - x);
          function m(f) {
            var d = i.querySelectorAll('[name="' + f + '"]:checked')[0];
            if (d === void 0) return null;
            var j = parseInt(d.getAttribute("data-name"));
            return t.alternatives[j];
          }
          var h = {
            rt: p,
            labels: { left: t.labels[0], right: t.labels[1] },
            response: { left: m("left"), right: m("right") },
          };
          this.jsPsych.finishTrial(h);
        });
      var x = performance.now();
    }
    simulate(i, t, e, a) {
      t == "data-only" && (a(), this.simulate_data_only(i, e)),
        t == "visual" && this.simulate_visual(i, e, a);
    }
    create_simulation_data(i, t) {
      const e = this.jsPsych.randomization.sampleWithoutReplacement(i.alternatives, 2),
        a = { left: null, right: null };
      !i.required &&
        this.jsPsych.randomization.sampleBernoulli(0.1) &&
        (e.pop(), this.jsPsych.randomization.sampleBernoulli(0.8) && e.pop()),
        e.length == 1 &&
          (this.jsPsych.randomization.sampleBernoulli(0.5) ? (a.left = e[0]) : (a.right = e[0])),
        e.length == 2 && ((a.left = e[0]), (a.right = e[1]));
      const s = {
          rt: this.jsPsych.randomization.sampleExGaussian(3e3, 300, 1 / 300, !0),
          labels: i.labels,
          response: a,
        },
        l = this.jsPsych.pluginAPI.mergeSimulationData(s, t);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(i, l), l;
    }
    simulate_data_only(i, t) {
      const e = this.create_simulation_data(i, t);
      this.jsPsych.finishTrial(e);
    }
    simulate_visual(i, t, e) {
      const a = this.create_simulation_data(i, t),
        s = this.jsPsych.getDisplayElement();
      this.trial(s, i), e();
      const l = [...s.querySelectorAll("[id^=jspsych-maxdiff-alternative]")].map(
        (n) => n.innerHTML
      );
      if (a.response.left !== null) {
        const n = l.indexOf(a.response.left);
        this.jsPsych.pluginAPI.clickTarget(
          s.querySelector(`.jspsych-maxdiff-alt-${n}[name="left"]`),
          a.rt / 3
        );
      }
      if (a.response.right !== null) {
        const n = l.indexOf(a.response.right);
        this.jsPsych.pluginAPI.clickTarget(
          s.querySelector(`.jspsych-maxdiff-alt-${n}[name="right"]`),
          (a.rt / 3) * 2
        );
      }
      this.jsPsych.pluginAPI.clickTarget(s.querySelector("#jspsych-maxdiff-next"), a.rt);
    }
  }
  return (u.info = g), u;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
