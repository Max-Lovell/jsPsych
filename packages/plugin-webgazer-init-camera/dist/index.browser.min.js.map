{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import type WebGazerExtension from \"@jspsych/extension-webgazer\";\nimport { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"webgazer-init-camera\",\n  version: version,\n  parameters: {\n    /** Instructions for the participant to follow. */\n    instructions: {\n      type: ParameterType.HTML_STRING,\n      default: `\n            <p>Position your head so that the webcam has a good view of your eyes.</p>\n            <p>Center your face in the box and look directly towards the camera.</p>\n            <p>It is important that you try and keep your head reasonably still throughout the experiment, so please take a moment to adjust your setup to be comfortable.</p>\n            <p>When your face is centered in the box and the box is green, you can click to continue.</p>`,\n    },\n    /** The text for the button that participants click to end the trial. */\n    button_text: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n  },\n  data: {\n    /** The time it took for webgazer to initialize. This can be a long time in some situations, so this\n     * value is recorded for troubleshooting when participants are reporting difficulty.\n     */\n    load_time: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin initializes the camera and helps the participant center their face in the camera view for\n * using the the [WebGazer extension](../extensions/webgazer.md). For a narrative description of eye\n * tracking with jsPsych, see the [eye tracking overview](../overview/eye-tracking.md).\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/webgazer-init-camera/ webgazer-init-camera plugin} and\n * {@link https://www.jspsych.org/latest/overview/eye-tracking/ eye-tracking overview} documentation on jspsych.org\n */\nclass WebgazerInitCameraPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    const extension = this.jsPsych.extensions.webgazer as WebGazerExtension;\n\n    let trial_complete;\n\n    var start_time = performance.now();\n    var load_time: number;\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      extension.pause();\n      extension.hideVideo();\n\n      // gather the data to store for the trial\n      var trial_data = {\n        load_time: load_time,\n      };\n\n      document.querySelector(\"#webgazer-center-style\").remove();\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n\n      trial_complete();\n    };\n\n    const showTrial = () => {\n      on_load();\n\n      load_time = Math.round(performance.now() - start_time);\n\n      var style = `\n          <style id=\"webgazer-center-style\">\n            #webgazerVideoContainer { top: 20px !important; left: calc(50% - 160px) !important;}\n          </style>\n        `;\n      document.querySelector(\"head\").insertAdjacentHTML(\"beforeend\", style);\n\n      var html = `\n          <div id='webgazer-init-container' style='position: relative; width:100vw; height:100vh'>\n          </div>`;\n\n      display_element.innerHTML = html;\n\n      extension.showVideo();\n      extension.resume();\n\n      var wg_container = display_element.querySelector(\"#webgazer-init-container\");\n\n      wg_container.innerHTML = `\n          <div style='position: absolute; top: max(260px, 40%); left: calc(50% - 400px); width:800px;'>\n          ${trial.instructions}\n          <button id='jspsych-wg-cont' class='jspsych-btn' disabled>${trial.button_text}</button>\n          </div>`;\n\n      if (is_face_detect_green()) {\n        (document.querySelector(\"#jspsych-wg-cont\") as HTMLButtonElement).disabled = false;\n      } else {\n        var observer = new MutationObserver(face_detect_event_observer);\n        observer.observe(document, {\n          attributes: true,\n          attributeFilter: [\"style\"],\n          subtree: true,\n        });\n      }\n\n      document.querySelector(\"#jspsych-wg-cont\").addEventListener(\"click\", () => {\n        if (observer) {\n          observer.disconnect();\n        }\n        end_trial();\n      });\n    };\n\n    if (!extension.isInitialized()) {\n      extension\n        .start()\n        .then(() => {\n          showTrial();\n        })\n        .catch((error) => {\n          console.log(error);\n          display_element.innerHTML = `<p>The experiment cannot continue because the eye tracker failed to start.</p>\n              <p>This may be because of a technical problem or because you did not grant permission for the page to use your camera.</p>`;\n        });\n    } else {\n      showTrial();\n    }\n\n    function is_face_detect_green() {\n      if (document.querySelector(\"#webgazerFaceFeedbackBox\")) {\n        return (\n          (document.querySelector(\"#webgazerFaceFeedbackBox\") as HTMLElement).style.borderColor ==\n          \"green\"\n        );\n      } else {\n        return false;\n      }\n    }\n\n    function face_detect_event_observer(mutationsList, observer) {\n      if (mutationsList[0].target == document.querySelector(\"#webgazerFaceFeedbackBox\")) {\n        if (\n          mutationsList[0].type == \"attributes\" &&\n          mutationsList[0].target.style.borderColor == \"green\"\n        ) {\n          (document.querySelector(\"#jspsych-wg-cont\") as HTMLButtonElement).disabled = false;\n        }\n        if (\n          mutationsList[0].type == \"attributes\" &&\n          mutationsList[0].target.style.borderColor == \"red\"\n        ) {\n          (document.querySelector(\"#jspsych-wg-cont\") as HTMLButtonElement).disabled = true;\n        }\n      }\n    }\n\n    return new Promise((resolve) => {\n      trial_complete = resolve;\n    });\n  }\n}\n\nexport default WebgazerInitCameraPlugin;\n"],"names":["info","version","ParameterType","WebgazerInitCameraPlugin","jsPsych","display_element","trial","on_load","extension","trial_complete","start_time","load_time","end_trial","trial_data","showTrial","style","html","wg_container","is_face_detect_green","observer","face_detect_event_observer","error","mutationsList","resolve"],"mappings":"u8BAKA,MAAMA,EAAc,CAClB,KAAM,uBACN,QAASC,EAAAA,QACT,WAAY,CAEV,aAAc,CACZ,KAAMC,EAAc,cAAA,YACpB,QAAS;AAAA;AAAA;AAAA;AAAA,0GAKX,EAEA,YAAa,CACX,KAAMA,EAAAA,cAAc,OACpB,QAAS,UACX,CACF,EACA,KAAM,CAIJ,UAAW,CACT,KAAMA,EAAAA,cAAc,GACtB,CACF,CACF,EAaA,MAAMC,CAAwD,CAG5D,YAAoBC,EAAkB,CAAlB,KAAAA,QAAAA,CAAmB,CAEvC,MAAMC,EAA8BC,EAAwBC,EAAqB,CAC/E,MAAMC,EAAY,KAAK,QAAQ,WAAW,SAE1C,IAAIC,EAEJ,IAAIC,EAAa,YAAY,IAAA,EACzBC,EAGJ,MAAMC,EAAY,IAAM,CACtBJ,EAAU,MAAM,EAChBA,EAAU,UAAU,EAGpB,IAAIK,EAAa,CACf,UAAWF,CACb,EAEA,SAAS,cAAc,wBAAwB,EAAE,OAAO,EAGxD,KAAK,QAAQ,YAAYE,CAAU,EAEnCJ,EAAAA,CACF,EAEMK,EAAY,IAAM,CACtBP,EAAAA,EAEAI,EAAY,KAAK,MAAM,YAAY,MAAQD,CAAU,EAErD,IAAIK,EAAQ;AAAA;AAAA;AAAA;AAAA,UAKZ,SAAS,cAAc,MAAM,EAAE,mBAAmB,YAAaA,CAAK,EAEpE,IAAIC,EAAO;AAAA;AAAA,kBAIXX,EAAgB,UAAYW,EAE5BR,EAAU,YACVA,EAAU,OAEV,EAAA,IAAIS,EAAeZ,EAAgB,cAAc,0BAA0B,EAQ3E,GANAY,EAAa,UAAY;AAAA;AAAA,YAEnBX,EAAM;AAAA,sEACoDA,EAAM;AAAA,kBAGlEY,EAAqB,EACtB,SAAS,cAAc,kBAAkB,EAAwB,SAAW,OACxE,CACL,IAAIC,EAAW,IAAI,iBAAiBC,CAA0B,EAC9DD,EAAS,QAAQ,SAAU,CACzB,WAAY,GACZ,gBAAiB,CAAC,OAAO,EACzB,QAAS,EACX,CAAC,CACH,CAEA,SAAS,cAAc,kBAAkB,EAAE,iBAAiB,QAAS,IAAM,CACrEA,GACFA,EAAS,aAEXP,EACF,CAAA,CAAC,CACH,EAEKJ,EAAU,cAAc,EAY3BM,IAXAN,EACG,MAAM,EACN,KAAK,IAAM,CACVM,EACF,CAAA,CAAC,EACA,MAAOO,GAAU,CAChB,QAAQ,IAAIA,CAAK,EACjBhB,EAAgB,UAAY;AAAA,yIAE9B,CAAC,EAKL,SAASa,GAAuB,CAC9B,OAAI,SAAS,cAAc,0BAA0B,EAEhD,SAAS,cAAc,0BAA0B,EAAkB,MAAM,aAC1E,QAGK,EAEX,CAEA,SAASE,EAA2BE,EAAeH,EAAU,CACvDG,EAAc,GAAG,QAAU,SAAS,cAAc,0BAA0B,IAE5EA,EAAc,GAAG,MAAQ,cACzBA,EAAc,GAAG,OAAO,MAAM,aAAe,UAE5C,SAAS,cAAc,kBAAkB,EAAwB,SAAW,IAG7EA,EAAc,GAAG,MAAQ,cACzBA,EAAc,GAAG,OAAO,MAAM,aAAe,QAE5C,SAAS,cAAc,kBAAkB,EAAwB,SAAW,IAGnF,CAEA,OAAO,IAAI,QAASC,GAAY,CAC9Bd,EAAiBc,CACnB,CAAC,CACH,CACF,CA9HMpB,OAAAA,EACG,KAAOH"}