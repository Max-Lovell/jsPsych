var jsPsychResize = (function (s) {
  "use strict";
  var f = {
    name: "@jspsych/plugin-resize",
    version: "2.0.0",
    description: "jsPsych plugin for controlling the real world size of the display",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest  --passWithNoTests",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-resize",
    },
    author: "Steve Chao",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/resize",
    peerDependencies: { jspsych: ">=7.0.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const w = {
    name: "resize",
    version: f.version,
    parameters: {
      item_height: { type: s.ParameterType.INT, default: 1 },
      item_width: { type: s.ParameterType.INT, default: 1 },
      prompt: { type: s.ParameterType.HTML_STRING, default: null },
      pixels_per_unit: { type: s.ParameterType.INT, default: 100 },
      starting_size: { type: s.ParameterType.INT, default: 100 },
      button_label: { type: s.ParameterType.STRING, default: "Continue" },
    },
    data: {
      final_width_px: { type: s.ParameterType.INT },
      scale_factor: { type: s.ParameterType.FLOAT },
    },
  };
  class m {
    constructor(r) {
      this.jsPsych = r;
    }
    trial(r, e) {
      var n = e.item_width / e.item_height;
      if (e.item_width >= e.item_height)
        var g = e.starting_size,
          y = Math.round(e.starting_size / n);
      else
        var y = e.starting_size,
          g = Math.round(e.starting_size * n);
      var a =
        '<div id="jspsych-resize-div" style="border: 2px solid steelblue; height: ' +
        y +
        "px; width:" +
        g +
        'px; margin: 7px auto; background-color: lightsteelblue; position: relative;">';
      (a +=
        '<div id="jspsych-resize-handle" style="cursor: nwse-resize; background-color: steelblue; width: 10px; height: 10px; border: 2px solid lightsteelblue; position: absolute; bottom: 0; right: 0;"></div>'),
        (a += "</div>"),
        e.prompt !== null && (a += e.prompt),
        (a += '<a class="jspsych-btn" id="jspsych-resize-btn">' + e.button_label + "</a>"),
        (r.innerHTML = a);
      const T = () => {
        document.removeEventListener("mousemove", b), document.removeEventListener("mouseup", x);
        var t = { final_height_px: z, final_width_px: h, scale_factor: l };
        this.jsPsych.finishTrial(t);
      };
      document.getElementById("jspsych-resize-btn").addEventListener("click", () => {
        M(), T();
      });
      var o = !1,
        v,
        _,
        p,
        d,
        j = (t) => {
          t.preventDefault(),
            (o = !0),
            (v = t.pageX),
            (_ = t.pageY),
            (p = parseInt(i.style.width)),
            (d = parseInt(i.style.height));
        };
      r.querySelector("#jspsych-resize-handle").addEventListener("mousedown", j);
      var x = (t) => {
        o = !1;
      };
      document.addEventListener("mouseup", x);
      var i = r.querySelector("#jspsych-resize-div"),
        b = (t) => {
          if (o) {
            var u = t.pageX - v,
              c = t.pageY - _;
            Math.abs(u) >= Math.abs(c)
              ? ((i.style.width = Math.round(Math.max(20, p + u * 2)) + "px"),
                (i.style.height = Math.round(Math.max(20, p + u * 2) / n) + "px"))
              : ((i.style.height = Math.round(Math.max(20, d + c * 2)) + "px"),
                (i.style.width = Math.round(n * Math.max(20, d + c * 2)) + "px"));
          }
        };
      document.addEventListener("mousemove", b);
      var l, z, h;
      function M() {
        h = i.offsetWidth;
        var t = h / e.item_width;
        (l = t / e.pixels_per_unit),
          (document.getElementById("jspsych-content").style.transform = "scale(" + l + ")");
      }
    }
  }
  return (m.info = w), m;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
