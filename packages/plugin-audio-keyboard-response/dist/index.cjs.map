{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import autoBind from \"auto-bind\";\nimport { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { AudioPlayerInterface } from \"../../jspsych/src/modules/plugin-api/AudioPlayer\";\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"audio-keyboard-response\",\n  version: version,\n  parameters: {\n    /** The audio file to be played. */\n    stimulus: {\n      type: ParameterType.AUDIO,\n      default: undefined,\n    },\n    /** This array contains the key(s) that the participant is allowed to press in order to respond to the stimulus.\n     * Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) -\n     * see [this page](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)\n     * and [this page (event.key column)](https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/)\n     * for more examples. Any key presses that are not listed in the array will be ignored. The default value of `\"ALL_KEYS\"`\n     * means that all keys will be accepted as valid responses. Specifying `\"NO_KEYS\"` will mean that no responses are allowed.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that\n     * it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the\n     * participant fails to make a response before this timer is reached, the participant's response will be\n     * recorded as null for the trial and the trial will end. If the value of this parameter is null, then the\n     * trial will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their\n     * response before the cutoff specified by the `trial_duration` parameter). If false, then the trial will\n     * continue until the value for `trial_duration` is reached. You can use set this parameter to `false` to\n     * force the participant to listen to the stimulus for a fixed amount of time, even if they respond before the time is complete\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** If true, then the trial will end as soon as the audio file finishes playing. */\n    trial_ends_after_audio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Trial ends after audio\",\n      default: false,\n    },\n    /** If true, then responses are allowed while the audio is playing. If false, then the audio must finish\n     * playing before a keyboard response is accepted. Once the audio has played all the way through, a valid\n     * keyboard response is allowed (including while the audio is being re-played via on-screen playback controls).\n     */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** Indicates which key the participant pressed. If no key was pressed before the trial ended, then the value will be `null`. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus\n     * first began playing until the participant made a key response. If no key was pressed before the trial ended, then the\n     * value will be `null`.\n     */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** Path to the audio file that played during the trial. */\n    stimulus: {\n      type: ParameterType.STRING,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin plays audio files and records responses generated with the keyboard.\n *\n * If the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the\n * playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of\n * response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio.\n *\n * Audio files can be automatically preloaded by jsPsych using the [`preload` plugin](preload.md). However, if you are using\n * timeline variables or another dynamic method to specify the audio stimulus, then you will need to [manually preload](../overview/media-preloading.md#manual-preloading) the audio.\n *\n * The trial can end when the participant responds, when the audio file has finished playing, or if the participant has\n * failed to respond within a fixed length of time. You can also prevent a keyboard response from being recorded before\n * the audio has finished playing.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/audio-keyboard-response/ audio-keyboard-response plugin documentation on jspsych.org}\n */\nclass AudioKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private audio: AudioPlayerInterface;\n  private params: TrialType<Info>;\n  private display: HTMLElement;\n  private response: { rt: number; key: string } = { rt: null, key: null };\n  private startTime: number;\n  private finish: ({}: { rt: number; response: string; stimulus: string }) => void;\n\n  constructor(private jsPsych: JsPsych) {\n    autoBind(this);\n  }\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    return new Promise(async (resolve) => {\n      this.finish = resolve;\n      this.params = trial;\n      this.display = display_element;\n      // load audio file\n      this.audio = await this.jsPsych.pluginAPI.getAudioPlayer(trial.stimulus);\n\n      // set up end event if trial needs it\n      if (trial.trial_ends_after_audio) {\n        this.audio.addEventListener(\"ended\", this.end_trial);\n      }\n\n      // show prompt if there is one\n      if (trial.prompt !== null) {\n        display_element.innerHTML = trial.prompt;\n      }\n\n      // start playing audio here to record time\n      // use this for offsetting RT measurement in\n      // setup_keyboard_listener\n      this.startTime = this.jsPsych.pluginAPI.audioContext()?.currentTime;\n\n      // start keyboard listener when trial starts or sound ends\n      if (trial.response_allowed_while_playing) {\n        this.setup_keyboard_listener();\n      } else if (!trial.trial_ends_after_audio) {\n        this.audio.addEventListener(\"ended\", this.setup_keyboard_listener);\n      }\n\n      // end trial if time limit is set\n      if (trial.trial_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          this.end_trial();\n        }, trial.trial_duration);\n      }\n\n      // call trial on_load method because we are done with all loading setup\n      on_load();\n\n      this.audio.play();\n    });\n  }\n\n  private end_trial() {\n    // kill any remaining setTimeout handlers\n    this.jsPsych.pluginAPI.clearAllTimeouts();\n\n    // stop the audio file if it is playing\n    this.audio.stop();\n\n    // remove end event listeners if they exist\n    this.audio.removeEventListener(\"ended\", this.end_trial);\n    this.audio.removeEventListener(\"ended\", this.setup_keyboard_listener);\n\n    // kill keyboard listeners\n    this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n\n    // gather the data to store for the trial\n    var trial_data = {\n      rt: this.response.rt,\n      response: this.response.key,\n      stimulus: this.params.stimulus,\n    };\n\n    // clear the display\n    this.display.innerHTML = \"\";\n\n    // move on to the next trial\n    this.finish(trial_data);\n  }\n\n  private after_response(info: { key: string; rt: number }) {\n    this.response = info;\n    if (this.params.response_ends_trial) {\n      this.end_trial();\n    }\n  }\n\n  private setup_keyboard_listener() {\n    // start the response listener\n    if (this.jsPsych.pluginAPI.useWebaudio) {\n      this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: this.after_response,\n        valid_responses: this.params.choices,\n        rt_method: \"audio\",\n        persist: false,\n        allow_held_key: false,\n        audio_context: this.jsPsych.pluginAPI.audioContext(),\n        audio_context_start_time: this.startTime,\n      });\n    } else {\n      this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: this.after_response,\n        valid_responses: this.params.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n  }\n\n  async simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      return this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      return this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    return data;\n  }\n\n  private async simulate_visual(\n    trial: TrialType<Info>,\n    simulation_options,\n    load_callback: () => void\n  ) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    const respond = () => {\n      if (data.rt !== null) {\n        this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n      }\n    };\n\n    const result = await this.trial(display_element, trial, () => {\n      load_callback();\n      if (!trial.response_allowed_while_playing) {\n        this.audio.addEventListener(\"ended\", respond);\n      } else {\n        respond();\n      }\n    });\n\n    return result;\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n}\n\nexport default AudioKeyboardResponsePlugin;\n"],"names":["version","ParameterType","info"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,MAAM,IAAc,GAAA;AAAA,EAClB,IAAM,EAAA,yBAAA;AAAA,WACNA,gBAAA;AAAA,EACA,UAAY,EAAA;AAAA,IAEV,QAAU,EAAA;AAAA,MACR,MAAMC,qBAAc,CAAA,KAAA;AAAA,MACpB,OAAS,EAAA,KAAA,CAAA;AAAA,KACX;AAAA,IAQA,OAAS,EAAA;AAAA,MACP,MAAMA,qBAAc,CAAA,IAAA;AAAA,MACpB,OAAS,EAAA,UAAA;AAAA,KACX;AAAA,IAIA,MAAQ,EAAA;AAAA,MACN,MAAMA,qBAAc,CAAA,WAAA;AAAA,MACpB,WAAa,EAAA,QAAA;AAAA,MACb,OAAS,EAAA,IAAA;AAAA,KACX;AAAA,IAMA,cAAgB,EAAA;AAAA,MACd,MAAMA,qBAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA,IAAA;AAAA,KACX;AAAA,IAMA,mBAAqB,EAAA;AAAA,MACnB,MAAMA,qBAAc,CAAA,IAAA;AAAA,MACpB,OAAS,EAAA,IAAA;AAAA,KACX;AAAA,IAEA,sBAAwB,EAAA;AAAA,MACtB,MAAMA,qBAAc,CAAA,IAAA;AAAA,MACpB,WAAa,EAAA,wBAAA;AAAA,MACb,OAAS,EAAA,KAAA;AAAA,KACX;AAAA,IAKA,8BAAgC,EAAA;AAAA,MAC9B,MAAMA,qBAAc,CAAA,IAAA;AAAA,MACpB,OAAS,EAAA,IAAA;AAAA,KACX;AAAA,GACF;AAAA,EACA,IAAM,EAAA;AAAA,IAEJ,QAAU,EAAA;AAAA,MACR,MAAMA,qBAAc,CAAA,MAAA;AAAA,KACtB;AAAA,IAKA,EAAI,EAAA;AAAA,MACF,MAAMA,qBAAc,CAAA,GAAA;AAAA,KACtB;AAAA,IAEA,QAAU,EAAA;AAAA,MACR,MAAMA,qBAAc,CAAA,MAAA;AAAA,KACtB;AAAA,GACF;AACF,CAAA,CAAA;AAqBA,MAAM,2BAA2D,CAAA;AAAA,EAS/D,YAAoB,OAAkB,EAAA;AAAlB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAJpB,IAAA,IAAA,CAAQ,QAAwC,GAAA,EAAE,EAAI,EAAA,IAAA,EAAM,KAAK,IAAK,EAAA,CAAA;AAKpE,IAAA,QAAA,CAAS,IAAI,CAAA,CAAA;AAAA,GACf;AAAA,EAEA,KAAA,CAAM,eAA8B,EAAA,KAAA,EAAwB,OAAqB,EAAA;AAC/E,IAAO,OAAA,IAAI,OAAQ,CAAA,OAAO,OAAY,KAAA;AACpC,MAAA,IAAA,CAAK,MAAS,GAAA,OAAA,CAAA;AACd,MAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AACd,MAAA,IAAA,CAAK,OAAU,GAAA,eAAA,CAAA;AAEf,MAAA,IAAA,CAAK,QAAQ,MAAM,IAAA,CAAK,QAAQ,SAAU,CAAA,cAAA,CAAe,MAAM,QAAQ,CAAA,CAAA;AAGvE,MAAA,IAAI,MAAM,sBAAwB,EAAA;AAChC,QAAA,IAAA,CAAK,KAAM,CAAA,gBAAA,CAAiB,OAAS,EAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AAAA,OACrD;AAGA,MAAI,IAAA,KAAA,CAAM,WAAW,IAAM,EAAA;AACzB,QAAA,eAAA,CAAgB,YAAY,KAAM,CAAA,MAAA,CAAA;AAAA,OACpC;AAKA,MAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,cAAgB,EAAA,WAAA,CAAA;AAGxD,MAAA,IAAI,MAAM,8BAAgC,EAAA;AACxC,QAAA,IAAA,CAAK,uBAAwB,EAAA,CAAA;AAAA,OAC/B,MAAA,IAAW,CAAC,KAAA,CAAM,sBAAwB,EAAA;AACxC,QAAA,IAAA,CAAK,KAAM,CAAA,gBAAA,CAAiB,OAAS,EAAA,IAAA,CAAK,uBAAuB,CAAA,CAAA;AAAA,OACnE;AAGA,MAAI,IAAA,KAAA,CAAM,mBAAmB,IAAM,EAAA;AACjC,QAAK,IAAA,CAAA,OAAA,CAAQ,SAAU,CAAA,UAAA,CAAW,MAAM;AACtC,UAAA,IAAA,CAAK,SAAU,EAAA,CAAA;AAAA,SACjB,EAAG,MAAM,cAAc,CAAA,CAAA;AAAA,OACzB;AAGA,MAAQ,OAAA,EAAA,CAAA;AAER,MAAA,IAAA,CAAK,MAAM,IAAK,EAAA,CAAA;AAAA,KACjB,CAAA,CAAA;AAAA,GACH;AAAA,EAEQ,SAAY,GAAA;AAElB,IAAK,IAAA,CAAA,OAAA,CAAQ,UAAU,gBAAiB,EAAA,CAAA;AAGxC,IAAA,IAAA,CAAK,MAAM,IAAK,EAAA,CAAA;AAGhB,IAAA,IAAA,CAAK,KAAM,CAAA,mBAAA,CAAoB,OAAS,EAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AACtD,IAAA,IAAA,CAAK,KAAM,CAAA,mBAAA,CAAoB,OAAS,EAAA,IAAA,CAAK,uBAAuB,CAAA,CAAA;AAGpE,IAAK,IAAA,CAAA,OAAA,CAAQ,UAAU,0BAA2B,EAAA,CAAA;AAGlD,IAAA,IAAI,UAAa,GAAA;AAAA,MACf,EAAA,EAAI,KAAK,QAAS,CAAA,EAAA;AAAA,MAClB,QAAA,EAAU,KAAK,QAAS,CAAA,GAAA;AAAA,MACxB,QAAA,EAAU,KAAK,MAAO,CAAA,QAAA;AAAA,KACxB,CAAA;AAGA,IAAA,IAAA,CAAK,QAAQ,SAAY,GAAA,EAAA,CAAA;AAGzB,IAAA,IAAA,CAAK,OAAO,UAAU,CAAA,CAAA;AAAA,GACxB;AAAA,EAEQ,eAAeC,KAAmC,EAAA;AACxD,IAAA,IAAA,CAAK,QAAWA,GAAAA,KAAAA,CAAAA;AAChB,IAAI,IAAA,IAAA,CAAK,OAAO,mBAAqB,EAAA;AACnC,MAAA,IAAA,CAAK,SAAU,EAAA,CAAA;AAAA,KACjB;AAAA,GACF;AAAA,EAEQ,uBAA0B,GAAA;AAEhC,IAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,WAAa,EAAA;AACtC,MAAK,IAAA,CAAA,OAAA,CAAQ,UAAU,mBAAoB,CAAA;AAAA,QACzC,mBAAmB,IAAK,CAAA,cAAA;AAAA,QACxB,eAAA,EAAiB,KAAK,MAAO,CAAA,OAAA;AAAA,QAC7B,SAAW,EAAA,OAAA;AAAA,QACX,OAAS,EAAA,KAAA;AAAA,QACT,cAAgB,EAAA,KAAA;AAAA,QAChB,aAAe,EAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,YAAa,EAAA;AAAA,QACnD,0BAA0B,IAAK,CAAA,SAAA;AAAA,OAChC,CAAA,CAAA;AAAA,KACI,MAAA;AACL,MAAK,IAAA,CAAA,OAAA,CAAQ,UAAU,mBAAoB,CAAA;AAAA,QACzC,mBAAmB,IAAK,CAAA,cAAA;AAAA,QACxB,eAAA,EAAiB,KAAK,MAAO,CAAA,OAAA;AAAA,QAC7B,SAAW,EAAA,aAAA;AAAA,QACX,OAAS,EAAA,KAAA;AAAA,QACT,cAAgB,EAAA,KAAA;AAAA,OACjB,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAAA,EAEA,MAAM,QAAA,CACJ,KACA,EAAA,eAAA,EACA,oBACA,aACA,EAAA;AACA,IAAA,IAAI,mBAAmB,WAAa,EAAA;AAClC,MAAc,aAAA,EAAA,CAAA;AACd,MAAO,OAAA,IAAA,CAAK,kBAAmB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;AAAA,KAC1D;AACA,IAAA,IAAI,mBAAmB,QAAU,EAAA;AAC/B,MAAA,OAAO,IAAK,CAAA,eAAA,CAAgB,KAAO,EAAA,kBAAA,EAAoB,aAAa,CAAA,CAAA;AAAA,KACtE;AAAA,GACF;AAAA,EAEQ,kBAAA,CAAmB,OAAwB,kBAAoB,EAAA;AACrE,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;AAElE,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAc,eAAA,CACZ,KACA,EAAA,kBAAA,EACA,aACA,EAAA;AACA,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;AAElE,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,OAAA,CAAQ,iBAAkB,EAAA,CAAA;AAEvD,IAAA,MAAM,UAAU,MAAM;AACpB,MAAI,IAAA,IAAA,CAAK,OAAO,IAAM,EAAA;AACpB,QAAA,IAAA,CAAK,QAAQ,SAAU,CAAA,QAAA,CAAS,IAAK,CAAA,QAAA,EAAU,KAAK,EAAE,CAAA,CAAA;AAAA,OACxD;AAAA,KACF,CAAA;AAEA,IAAA,MAAM,SAAS,MAAM,IAAA,CAAK,KAAM,CAAA,eAAA,EAAiB,OAAO,MAAM;AAC5D,MAAc,aAAA,EAAA,CAAA;AACd,MAAI,IAAA,CAAC,MAAM,8BAAgC,EAAA;AACzC,QAAK,IAAA,CAAA,KAAA,CAAM,gBAAiB,CAAA,OAAA,EAAS,OAAO,CAAA,CAAA;AAAA,OACvC,MAAA;AACL,QAAQ,OAAA,EAAA,CAAA;AAAA,OACV;AAAA,KACD,CAAA,CAAA;AAED,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AAAA,EAEQ,sBAAA,CAAuB,OAAwB,kBAAoB,EAAA;AACzE,IAAA,MAAM,YAAe,GAAA;AAAA,MACnB,UAAU,KAAM,CAAA,QAAA;AAAA,MAChB,EAAA,EAAI,KAAK,OAAQ,CAAA,aAAA,CAAc,iBAAiB,GAAK,EAAA,EAAA,EAAI,CAAI,GAAA,GAAA,EAAK,IAAI,CAAA;AAAA,MACtE,UAAU,IAAK,CAAA,OAAA,CAAQ,SAAU,CAAA,WAAA,CAAY,MAAM,OAAO,CAAA;AAAA,KAC5D,CAAA;AAEA,IAAA,MAAM,OAAO,IAAK,CAAA,OAAA,CAAQ,SAAU,CAAA,mBAAA,CAAoB,cAAc,kBAAkB,CAAA,CAAA;AAExF,IAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,+BAAgC,CAAA,KAAA,EAAO,IAAI,CAAA,CAAA;AAElE,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AACF,CAAA;AAhLM,2BAAA,CACG,IAAO,GAAA,IAAA;;;;"}