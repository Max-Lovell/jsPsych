{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"survey-text\",\n  version: version,\n  parameters: {\n    /**\n     * An array of objects, each object represents a question that appears on the screen. Each object contains a prompt,\n     * options, required, and horizontal parameter that will be applied to the question. See examples below for further\n     * clarification.`prompt`: Type string, default value is *undefined*. The string is prompt/question that will be\n     * associated with a group of options (radio buttons). All questions will get presented on the same page (trial).\n     * `options`: Type array, defualt value is *undefined*. An array of strings. The array contains a set of options to\n     * display for an individual question.`required`: Type boolean, default value is null. The boolean value indicates\n     * if a question is required('true') or not ('false'), using the HTML5 `required` attribute. If this parameter is\n     * undefined, the question will be optional. `horizontal`:Type boolean, default value is false. If true, then the\n     * question is centered and the options are displayed horizontally. `name`: Name of the question. Used for storing\n     * data. If left undefined then default names (`Q0`, `Q1`, `...`) will be used for the questions.\n     */\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      default: undefined,\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          default: undefined,\n        },\n        /** Placeholder text in the response text box. */\n        placeholder: {\n          type: ParameterType.STRING,\n          default: \"\",\n        },\n        /** The number of rows for the response text box. */\n        rows: {\n          type: ParameterType.INT,\n          default: 1,\n        },\n        /** The number of columns for the response text box. */\n        columns: {\n          type: ParameterType.INT,\n          default: 40,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          default: \"\",\n        },\n      },\n    },\n    /**\n     * If true, the display order of `questions` is randomly determined at the start of the trial. In the data\n     * object, `Q0` will still refer to the first question in the array, regardless of where it was presented\n     * visually.\n     */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** HTML formatted string to display at the top of the page above all the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** Label of the button to submit responses. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /** Setting this to true will enable browser auto-complete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /** An object containing the response for each question. The object will have a separate key (variable) for each question, with the first question in the trial being recorded in `Q0`, the second in `Q1`, and so on. The responses are recorded as integers, representing the position selected on the likert scale for that question. If the `name` parameter is defined for the question, then the response object will use the value of `name` as the key for each question. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    response: {\n      type: ParameterType.COMPLEX,\n      nested: {\n        identifier: {\n          type: ParameterType.STRING,\n        },\n        response: {\n          type:\n            ParameterType.STRING |\n            ParameterType.INT |\n            ParameterType.FLOAT |\n            ParameterType.BOOL |\n            ParameterType.OBJECT,\n        },\n      },\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the questions first appear on the screen until the participant's response(s) are submitted. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** An array with the order of questions. For example `[2,0,1]` would indicate that the first question was `trial.questions[2]` (the third item in the `questions` parameter), the second question was `trial.questions[0]`, and the final question was `trial.questions[1]`. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    question_order: {\n      type: ParameterType.INT,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n *\n * The survey-text plugin displays a set of questions with free response text fields. The participant types in answers.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/survey-text/ survey-text plugin documentation on jspsych.org}\n */\nclass SurveyTextPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].rows == \"undefined\") {\n        trial.questions[i].rows = 1;\n      }\n    }\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].columns == \"undefined\") {\n        trial.questions[i].columns = 40;\n      }\n    }\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].value == \"undefined\") {\n        trial.questions[i].value = \"\";\n      }\n    }\n\n    var html = \"\";\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-survey-text-preamble\" class=\"jspsych-survey-text-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n    // start form\n    if (trial.autocomplete) {\n      html += '<form id=\"jspsych-survey-text-form\">';\n    } else {\n      html += '<form id=\"jspsych-survey-text-form\" autocomplete=\"off\">';\n    }\n    // generate question order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n\n    // add questions\n    for (var i = 0; i < trial.questions.length; i++) {\n      var question = trial.questions[question_order[i]];\n      var question_index = question_order[i];\n      html +=\n        '<div id=\"jspsych-survey-text-' +\n        question_index +\n        '\" class=\"jspsych-survey-text-question\" style=\"margin: 2em 0em;\">';\n      html += '<p class=\"jspsych-survey-text\">' + question.prompt + \"</p>\";\n      var autofocus = i == 0 ? \"autofocus\" : \"\";\n      var req = question.required ? \"required\" : \"\";\n      if (question.rows == 1) {\n        html +=\n          '<input type=\"text\" id=\"input-' +\n          question_index +\n          '\"  name=\"#jspsych-survey-text-response-' +\n          question_index +\n          '\" data-name=\"' +\n          question.name +\n          '\" size=\"' +\n          question.columns +\n          '\" ' +\n          autofocus +\n          \" \" +\n          req +\n          ' placeholder=\"' +\n          question.placeholder +\n          '\"></input>';\n      } else {\n        html +=\n          '<textarea id=\"input-' +\n          question_index +\n          '\" name=\"#jspsych-survey-text-response-' +\n          question_index +\n          '\" data-name=\"' +\n          question.name +\n          '\" cols=\"' +\n          question.columns +\n          '\" rows=\"' +\n          question.rows +\n          '\" ' +\n          autofocus +\n          \" \" +\n          req +\n          ' placeholder=\"' +\n          question.placeholder +\n          '\"></textarea>';\n      }\n      html += \"</div>\";\n    }\n\n    // add submit button\n    html +=\n      '<input type=\"submit\" id=\"jspsych-survey-text-next\" class=\"jspsych-btn jspsych-survey-text\" value=\"' +\n      trial.button_label +\n      '\"></input>';\n\n    html += \"</form>\";\n    display_element.innerHTML = html;\n\n    // backup in case autofocus doesn't work\n    display_element.querySelector<HTMLInputElement>(\"#input-\" + question_order[0]).focus();\n\n    display_element.querySelector(\"#jspsych-survey-text-form\").addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n\n      for (var index = 0; index < trial.questions.length; index++) {\n        var id = \"Q\" + index;\n        var q_element = document\n          .querySelector(\"#jspsych-survey-text-\" + index)\n          .querySelector(\"textarea, input\") as HTMLInputElement;\n        var val = q_element.value;\n        var name = q_element.attributes[\"data-name\"].value;\n        if (name == \"\") {\n          name = id;\n        }\n        var obje = {};\n        obje[name] = val;\n        Object.assign(question_data, obje);\n      }\n      // save data\n      var trialdata = {\n        rt: response_time,\n        response: question_data,\n      };\n\n      // next trial\n      this.jsPsych.finishTrial(trialdata);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      const ans_words =\n        q.rows == 1\n          ? this.jsPsych.randomization.sampleExponential(0.25)\n          : this.jsPsych.randomization.randomInt(1, 10) * q.rows;\n      question_data[name] = this.jsPsych.randomization.randomWords({\n        exactly: ans_words,\n        join: \" \",\n      });\n      rt += this.jsPsych.randomization.sampleExGaussian(2000, 400, 0.004, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers = Object.entries(data.response).map((x) => {\n      return x[1] as string;\n    });\n    for (let i = 0; i < answers.length; i++) {\n      this.jsPsych.pluginAPI.fillTextInput(\n        display_element.querySelector(`#input-${i}`),\n        answers[i],\n        ((data.rt - 1000) / answers.length) * (i + 1)\n      );\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-text-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyTextPlugin;\n"],"names":["info","version","ParameterType","SurveyTextPlugin","jsPsych","display_element","trial","i","html","question_order","question","question_index","autofocus","req","e","endTime","response_time","startTime","question_data","index","id","q_element","val","name","obje","trialdata","simulation_mode","simulation_options","load_callback","rt","q","ans_words","default_data","data","answers","x"],"mappings":"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"}