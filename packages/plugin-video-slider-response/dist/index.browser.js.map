{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"video-slider-response\",\n  version: version,\n  parameters: {\n    /** An array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm)\n     * to maximize the [cross-browser compatibility](https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats).\n     * Usually .mp4 is a safe cross-browser option. The plugin does not reliably support .mov files. The player will use\n     * the first source file in the array that is compatible with the browser, so specify the files in order of preference.\n     */\n    stimulus: {\n      type: ParameterType.VIDEO,\n      default: undefined,\n      array: true,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that\n     * it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** The width of the video in pixels. */\n    width: {\n      type: ParameterType.INT,\n      default: \"\",\n    },\n    /** The height of the video display in pixels. */\n    height: {\n      type: ParameterType.INT,\n      default: \"\",\n    },\n    /** If true, the video will begin playing as soon as it has loaded. */\n    autoplay: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** If true, controls for the video player will be available to the participant. They will be able to pause the\n     * video or move the playback to any point in the video.\n     */\n    controls: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Time to start the clip. If null (default), video will start at the beginning of the file. */\n    start: {\n      type: ParameterType.FLOAT,\n      default: null,\n    },\n    /** Time to stop the clip. If null (default), video will stop at the end of the file. */\n    stop: {\n      type: ParameterType.FLOAT,\n      default: null,\n    },\n    /** The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. */\n    rate: {\n      type: ParameterType.FLOAT,\n      default: 1,\n    },\n    /** Sets the minimum value of the slider. */\n    min: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /** Sets the maximum value of the slider. */\n    max: {\n      type: ParameterType.INT,\n      default: 100,\n    },\n    /** Sets the starting value of the slider. */\n    slider_start: {\n      type: ParameterType.INT,\n      default: 50,\n    },\n    /** Sets the step of the slider. This is the smallest amount by which the slider can change. */\n    step: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /**\n     * Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends\n     * of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the\n     * ends, and the other two will be at 33% and 67% of the slider width.\n     */\n    labels: {\n      type: ParameterType.HTML_STRING,\n      default: [],\n      array: true,\n    },\n    /** Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in\n     * the display.\n     */\n    slider_width: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Label of the button to end the trial. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /** If true, the participant must move the slider before clicking the continue button. */\n    require_movement: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** If true, the trial will end immediately after the video finishes playing. */\n    trial_ends_after_video: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the\n     * participant fails to make a response before this timer is reached, the participant's response will be\n     * recorded as null for the trial and the trial will end. If the value of this parameter is null, then the\n     * trial will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their response\n     * before the cutoff specified by the `trial_duration` parameter). If false, then the trial will continue until\n     * the value for `trial_duration` is reached. You can set this parameter to `false` to force the participant\n     * to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * If true, then responses are allowed while the video is playing. If false, then the video must finish playing\n     * before the slider is enabled and the trial can end via the next button click. Once the video has played all\n     * the way through, the slider is enabled and a response is allowed (including while the video is being re-played\n     * via on-screen playback controls).\n     */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** The numeric value of the slider. */\n    response: {\n      type: ParameterType.INT,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The `stimulus` array. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions.  */\n    stimulus: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n    /** The starting value of the slider. */\n    slider_start: {\n      type: ParameterType.INT,\n    },\n    /** The start time of the video clip. */\n    start: {\n      type: ParameterType.FLOAT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin plays a video and allows the participant to respond by dragging a slider. The stimulus can be displayed\n * until a response is given, or for a pre-determined amount of time. The trial can be ended automatically when the\n * participant responds, when the video file has finished playing, or if the participant has failed to respond within\n * a fixed length of time. You can also prevent the slider response from being made before the video has finished playing.\n *\n * Video files can be automatically preloaded by jsPsych using the [`preload` plugin](preload.md). However, if you are\n * using timeline variables or another dynamic method to specify the video stimulus, you will need to\n * [manually preload](../overview/media-preloading.md#manual-preloading) the videos. Also note that video preloading\n * is disabled when the experiment is running as a file (i.e. opened directly in the browser, rather than through a\n * server), in order to prevent CORS errors - see the section on [Running Experiments](../overview/running-experiments.md) for more information.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/video-slider-response/ video-slider-response plugin documentation on jspsych.org}\n */\nclass VideoSliderResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    if (!Array.isArray(trial.stimulus)) {\n      throw new Error(`\n        The stimulus property for the video-slider-response plugin must be an array\n        of files. See https://www.jspsych.org/latest/plugins/video-slider-response/#parameters\n      `);\n    }\n\n    // half of the thumb width value from jspsych.css, used to adjust the label positions\n    var half_thumb_width = 7.5;\n\n    // setup stimulus\n    var video_html = '<video id=\"jspsych-video-slider-response-stimulus-video\"';\n\n    if (trial.width) {\n      video_html += ' width=\"' + trial.width + '\"';\n    }\n    if (trial.height) {\n      video_html += ' height=\"' + trial.height + '\"';\n    }\n    if (trial.autoplay && trial.start == null) {\n      // if autoplay is true and the start time is specified, then the video will start automatically\n      // via the play() method, rather than the autoplay attribute, to prevent showing the first frame\n      video_html += \" autoplay \";\n    }\n    if (trial.controls) {\n      video_html += \" controls \";\n    }\n    if (trial.start !== null) {\n      // hide video element when page loads if the start time is specified,\n      // to prevent the video element from showing the first frame\n      video_html += ' style=\"visibility: hidden;\"';\n    }\n    video_html += \">\";\n\n    var video_preload_blob = this.jsPsych.pluginAPI.getVideoBuffer(trial.stimulus[0]);\n    if (!video_preload_blob) {\n      for (var i = 0; i < trial.stimulus.length; i++) {\n        var file_name = trial.stimulus[i];\n        if (file_name.indexOf(\"?\") > -1) {\n          file_name = file_name.substring(0, file_name.indexOf(\"?\"));\n        }\n        var type = file_name.substr(file_name.lastIndexOf(\".\") + 1);\n        type = type.toLowerCase();\n        if (type == \"mov\") {\n          console.warn(\n            \"Warning: video-slider-response plugin does not reliably support .mov files.\"\n          );\n        }\n        video_html += '<source src=\"' + file_name + '\" type=\"video/' + type + '\">';\n      }\n    }\n    video_html += \"</video>\";\n\n    var html = '<div id=\"jspsych-video-slider-response-wrapper\" style=\"margin: 100px 0px;\">';\n    html += '<div id=\"jspsych-video-slider-response-stimulus\">' + video_html + \"</div>\";\n    html +=\n      '<div class=\"jspsych-video-slider-response-container\" style=\"position:relative; margin: 0 auto 3em auto; width:';\n    if (trial.slider_width !== null) {\n      html += trial.slider_width + \"px;\";\n    } else {\n      html += \"auto;\";\n    }\n    html += '\">';\n    html +=\n      '<input type=\"range\" class=\"jspsych-slider\" value=\"' +\n      trial.slider_start +\n      '\" min=\"' +\n      trial.min +\n      '\" max=\"' +\n      trial.max +\n      '\" step=\"' +\n      trial.step +\n      '\" id=\"jspsych-video-slider-response-response\"';\n    if (!trial.response_allowed_while_playing) {\n      html += \" disabled\";\n    }\n    html += \"></input><div>\";\n    for (var j = 0; j < trial.labels.length; j++) {\n      var label_width_perc = 100 / (trial.labels.length - 1);\n      var percent_of_range = j * (100 / (trial.labels.length - 1));\n      var percent_dist_from_center = ((percent_of_range - 50) / 50) * 100;\n      var offset = (percent_dist_from_center * half_thumb_width) / 100;\n      html +=\n        '<div style=\"border: 1px solid transparent; display: inline-block; position: absolute; ' +\n        \"left:calc(\" +\n        percent_of_range +\n        \"% - (\" +\n        label_width_perc +\n        \"% / 2) - \" +\n        offset +\n        \"px); text-align: center; width: \" +\n        label_width_perc +\n        '%;\">';\n      html += '<span style=\"text-align: center; font-size: 80%;\">' + trial.labels[j] + \"</span>\";\n      html += \"</div>\";\n    }\n    html += \"</div>\";\n    html += \"</div>\";\n    html += \"</div>\";\n\n    // add prompt if there is one\n    if (trial.prompt !== null) {\n      html += \"<div>\" + trial.prompt + \"</div>\";\n    }\n\n    // add submit button\n    var next_disabled_attribute = \"\";\n    if (trial.require_movement || !trial.response_allowed_while_playing) {\n      next_disabled_attribute = \"disabled\";\n    }\n    html +=\n      '<button id=\"jspsych-video-slider-response-next\" class=\"jspsych-btn\" ' +\n      next_disabled_attribute +\n      \">\" +\n      trial.button_label +\n      \"</button>\";\n\n    display_element.innerHTML = html;\n\n    var video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-slider-response-stimulus-video\"\n    );\n\n    if (video_preload_blob) {\n      video_element.src = video_preload_blob;\n    }\n\n    video_element.onended = () => {\n      if (trial.trial_ends_after_video) {\n        end_trial();\n      } else if (!trial.response_allowed_while_playing) {\n        enable_slider();\n      }\n    };\n\n    video_element.playbackRate = trial.rate;\n\n    // if video start time is specified, hide the video and set the starting time\n    // before showing and playing, so that the video doesn't automatically show the first frame\n    if (trial.start !== null) {\n      video_element.pause();\n      video_element.onseeked = () => {\n        video_element.style.visibility = \"visible\";\n        video_element.muted = false;\n        if (trial.autoplay) {\n          video_element.play();\n        } else {\n          video_element.pause();\n        }\n        video_element.onseeked = () => {};\n      };\n      video_element.onplaying = () => {\n        video_element.currentTime = trial.start;\n        video_element.onplaying = () => {};\n      };\n      // fix for iOS/MacOS browsers: videos aren't seekable until they start playing, so need to hide/mute, play,\n      // change current time, then show/unmute\n      video_element.muted = true;\n      video_element.play();\n    }\n\n    let stopped = false;\n    if (trial.stop !== null) {\n      video_element.addEventListener(\"timeupdate\", (e) => {\n        var currenttime = video_element.currentTime;\n        if (currenttime >= trial.stop) {\n          video_element.pause();\n          if (trial.trial_ends_after_video && !stopped) {\n            // this is to prevent end_trial from being called twice, because the timeupdate event\n            // can fire in quick succession\n            stopped = true;\n            end_trial();\n          }\n\n          if (!trial.response_allowed_while_playing) {\n            enable_slider();\n          }\n        }\n      });\n    }\n\n    if (trial.require_movement) {\n      const enable_button = () => {\n        display_element.querySelector<HTMLInputElement>(\n          \"#jspsych-video-slider-response-next\"\n        ).disabled = false;\n      };\n\n      display_element\n        .querySelector(\"#jspsych-video-slider-response-response\")\n        .addEventListener(\"mousedown\", enable_button);\n\n      display_element\n        .querySelector(\"#jspsych-video-slider-response-response\")\n        .addEventListener(\"touchstart\", enable_button);\n\n      display_element\n        .querySelector(\"#jspsych-video-slider-response-response\")\n        .addEventListener(\"change\", enable_button);\n    }\n\n    var startTime = performance.now();\n\n    // store response\n    var response = {\n      rt: null,\n      response: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // stop the video file if it is playing\n      // remove any remaining end event handlers\n      display_element\n        .querySelector<HTMLVideoElement>(\"#jspsych-video-slider-response-stimulus-video\")\n        .pause();\n      display_element.querySelector<HTMLVideoElement>(\n        \"#jspsych-video-slider-response-stimulus-video\"\n      ).onended = () => {};\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        start: trial.start,\n        slider_start: trial.slider_start,\n        response: response.response,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    display_element\n      .querySelector(\"#jspsych-video-slider-response-next\")\n      .addEventListener(\"click\", () => {\n        // measure response time\n        var endTime = performance.now();\n        response.rt = Math.round(endTime - startTime);\n        response.response = display_element.querySelector<HTMLInputElement>(\n          \"#jspsych-video-slider-response-response\"\n        ).valueAsNumber;\n\n        if (trial.response_ends_trial) {\n          end_trial();\n        } else {\n          display_element.querySelector<HTMLButtonElement>(\n            \"#jspsych-video-slider-response-next\"\n          ).disabled = true;\n        }\n      });\n\n    // function to enable slider after video ends\n    function enable_slider() {\n      (\n        document.querySelector(\"#jspsych-video-slider-response-response\") as HTMLInputElement\n      ).disabled = false;\n      if (!trial.require_movement) {\n        (\n          document.querySelector(\"#jspsych-video-slider-response-next\") as HTMLInputElement\n        ).disabled = false;\n      }\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      slider_start: trial.slider_start,\n      response: this.jsPsych.randomization.randomInt(trial.min, trial.max),\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      start: trial.start,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-button-response-stimulus\"\n    );\n\n    const respond = () => {\n      if (data.rt !== null) {\n        const el = display_element.querySelector<HTMLInputElement>(\"input[type='range']\");\n\n        setTimeout(() => {\n          this.jsPsych.pluginAPI.clickTarget(el);\n          el.valueAsNumber = data.response;\n        }, data.rt / 2);\n\n        this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(\"button\"), data.rt);\n      }\n    };\n\n    if (!trial.response_allowed_while_playing) {\n      video_element.addEventListener(\"ended\", respond);\n    } else {\n      respond();\n    }\n  }\n}\n\nexport default VideoSliderResponsePlugin;\n"],"names":["version","ParameterType"],"mappings":"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"}