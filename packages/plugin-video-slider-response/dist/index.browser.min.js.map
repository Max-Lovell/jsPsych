{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"video-slider-response\",\n  version: version,\n  parameters: {\n    /** An array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm)\n     * to maximize the [cross-browser compatibility](https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats).\n     * Usually .mp4 is a safe cross-browser option. The plugin does not reliably support .mov files. The player will use\n     * the first source file in the array that is compatible with the browser, so specify the files in order of preference.\n     */\n    stimulus: {\n      type: ParameterType.VIDEO,\n      default: undefined,\n      array: true,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that\n     * it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** The width of the video in pixels. */\n    width: {\n      type: ParameterType.INT,\n      default: \"\",\n    },\n    /** The height of the video display in pixels. */\n    height: {\n      type: ParameterType.INT,\n      default: \"\",\n    },\n    /** If true, the video will begin playing as soon as it has loaded. */\n    autoplay: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** If true, controls for the video player will be available to the participant. They will be able to pause the\n     * video or move the playback to any point in the video.\n     */\n    controls: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Time to start the clip. If null (default), video will start at the beginning of the file. */\n    start: {\n      type: ParameterType.FLOAT,\n      default: null,\n    },\n    /** Time to stop the clip. If null (default), video will stop at the end of the file. */\n    stop: {\n      type: ParameterType.FLOAT,\n      default: null,\n    },\n    /** The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. */\n    rate: {\n      type: ParameterType.FLOAT,\n      default: 1,\n    },\n    /** Sets the minimum value of the slider. */\n    min: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /** Sets the maximum value of the slider. */\n    max: {\n      type: ParameterType.INT,\n      default: 100,\n    },\n    /** Sets the starting value of the slider. */\n    slider_start: {\n      type: ParameterType.INT,\n      default: 50,\n    },\n    /** Sets the step of the slider. This is the smallest amount by which the slider can change. */\n    step: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /**\n     * Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends\n     * of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the\n     * ends, and the other two will be at 33% and 67% of the slider width.\n     */\n    labels: {\n      type: ParameterType.HTML_STRING,\n      default: [],\n      array: true,\n    },\n    /** Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in\n     * the display.\n     */\n    slider_width: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Label of the button to end the trial. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /** If true, the participant must move the slider before clicking the continue button. */\n    require_movement: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** If true, the trial will end immediately after the video finishes playing. */\n    trial_ends_after_video: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the\n     * participant fails to make a response before this timer is reached, the participant's response will be\n     * recorded as null for the trial and the trial will end. If the value of this parameter is null, then the\n     * trial will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their response\n     * before the cutoff specified by the `trial_duration` parameter). If false, then the trial will continue until\n     * the value for `trial_duration` is reached. You can set this parameter to `false` to force the participant\n     * to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * If true, then responses are allowed while the video is playing. If false, then the video must finish playing\n     * before the slider is enabled and the trial can end via the next button click. Once the video has played all\n     * the way through, the slider is enabled and a response is allowed (including while the video is being re-played\n     * via on-screen playback controls).\n     */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** The numeric value of the slider. */\n    response: {\n      type: ParameterType.INT,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The `stimulus` array. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions.  */\n    stimulus: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n    /** The starting value of the slider. */\n    slider_start: {\n      type: ParameterType.INT,\n    },\n    /** The start time of the video clip. */\n    start: {\n      type: ParameterType.FLOAT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin plays a video and allows the participant to respond by dragging a slider. The stimulus can be displayed\n * until a response is given, or for a pre-determined amount of time. The trial can be ended automatically when the\n * participant responds, when the video file has finished playing, or if the participant has failed to respond within\n * a fixed length of time. You can also prevent the slider response from being made before the video has finished playing.\n *\n * Video files can be automatically preloaded by jsPsych using the [`preload` plugin](preload.md). However, if you are\n * using timeline variables or another dynamic method to specify the video stimulus, you will need to\n * [manually preload](../overview/media-preloading.md#manual-preloading) the videos. Also note that video preloading\n * is disabled when the experiment is running as a file (i.e. opened directly in the browser, rather than through a\n * server), in order to prevent CORS errors - see the section on [Running Experiments](../overview/running-experiments.md) for more information.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/video-slider-response/ video-slider-response plugin documentation on jspsych.org}\n */\nclass VideoSliderResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    if (!Array.isArray(trial.stimulus)) {\n      throw new Error(`\n        The stimulus property for the video-slider-response plugin must be an array\n        of files. See https://www.jspsych.org/latest/plugins/video-slider-response/#parameters\n      `);\n    }\n\n    // half of the thumb width value from jspsych.css, used to adjust the label positions\n    var half_thumb_width = 7.5;\n\n    // setup stimulus\n    var video_html = '<video id=\"jspsych-video-slider-response-stimulus-video\"';\n\n    if (trial.width) {\n      video_html += ' width=\"' + trial.width + '\"';\n    }\n    if (trial.height) {\n      video_html += ' height=\"' + trial.height + '\"';\n    }\n    if (trial.autoplay && trial.start == null) {\n      // if autoplay is true and the start time is specified, then the video will start automatically\n      // via the play() method, rather than the autoplay attribute, to prevent showing the first frame\n      video_html += \" autoplay \";\n    }\n    if (trial.controls) {\n      video_html += \" controls \";\n    }\n    if (trial.start !== null) {\n      // hide video element when page loads if the start time is specified,\n      // to prevent the video element from showing the first frame\n      video_html += ' style=\"visibility: hidden;\"';\n    }\n    video_html += \">\";\n\n    var video_preload_blob = this.jsPsych.pluginAPI.getVideoBuffer(trial.stimulus[0]);\n    if (!video_preload_blob) {\n      for (var i = 0; i < trial.stimulus.length; i++) {\n        var file_name = trial.stimulus[i];\n        if (file_name.indexOf(\"?\") > -1) {\n          file_name = file_name.substring(0, file_name.indexOf(\"?\"));\n        }\n        var type = file_name.substr(file_name.lastIndexOf(\".\") + 1);\n        type = type.toLowerCase();\n        if (type == \"mov\") {\n          console.warn(\n            \"Warning: video-slider-response plugin does not reliably support .mov files.\"\n          );\n        }\n        video_html += '<source src=\"' + file_name + '\" type=\"video/' + type + '\">';\n      }\n    }\n    video_html += \"</video>\";\n\n    var html = '<div id=\"jspsych-video-slider-response-wrapper\" style=\"margin: 100px 0px;\">';\n    html += '<div id=\"jspsych-video-slider-response-stimulus\">' + video_html + \"</div>\";\n    html +=\n      '<div class=\"jspsych-video-slider-response-container\" style=\"position:relative; margin: 0 auto 3em auto; width:';\n    if (trial.slider_width !== null) {\n      html += trial.slider_width + \"px;\";\n    } else {\n      html += \"auto;\";\n    }\n    html += '\">';\n    html +=\n      '<input type=\"range\" class=\"jspsych-slider\" value=\"' +\n      trial.slider_start +\n      '\" min=\"' +\n      trial.min +\n      '\" max=\"' +\n      trial.max +\n      '\" step=\"' +\n      trial.step +\n      '\" id=\"jspsych-video-slider-response-response\"';\n    if (!trial.response_allowed_while_playing) {\n      html += \" disabled\";\n    }\n    html += \"></input><div>\";\n    for (var j = 0; j < trial.labels.length; j++) {\n      var label_width_perc = 100 / (trial.labels.length - 1);\n      var percent_of_range = j * (100 / (trial.labels.length - 1));\n      var percent_dist_from_center = ((percent_of_range - 50) / 50) * 100;\n      var offset = (percent_dist_from_center * half_thumb_width) / 100;\n      html +=\n        '<div style=\"border: 1px solid transparent; display: inline-block; position: absolute; ' +\n        \"left:calc(\" +\n        percent_of_range +\n        \"% - (\" +\n        label_width_perc +\n        \"% / 2) - \" +\n        offset +\n        \"px); text-align: center; width: \" +\n        label_width_perc +\n        '%;\">';\n      html += '<span style=\"text-align: center; font-size: 80%;\">' + trial.labels[j] + \"</span>\";\n      html += \"</div>\";\n    }\n    html += \"</div>\";\n    html += \"</div>\";\n    html += \"</div>\";\n\n    // add prompt if there is one\n    if (trial.prompt !== null) {\n      html += \"<div>\" + trial.prompt + \"</div>\";\n    }\n\n    // add submit button\n    var next_disabled_attribute = \"\";\n    if (trial.require_movement || !trial.response_allowed_while_playing) {\n      next_disabled_attribute = \"disabled\";\n    }\n    html +=\n      '<button id=\"jspsych-video-slider-response-next\" class=\"jspsych-btn\" ' +\n      next_disabled_attribute +\n      \">\" +\n      trial.button_label +\n      \"</button>\";\n\n    display_element.innerHTML = html;\n\n    var video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-slider-response-stimulus-video\"\n    );\n\n    if (video_preload_blob) {\n      video_element.src = video_preload_blob;\n    }\n\n    video_element.onended = () => {\n      if (trial.trial_ends_after_video) {\n        end_trial();\n      } else if (!trial.response_allowed_while_playing) {\n        enable_slider();\n      }\n    };\n\n    video_element.playbackRate = trial.rate;\n\n    // if video start time is specified, hide the video and set the starting time\n    // before showing and playing, so that the video doesn't automatically show the first frame\n    if (trial.start !== null) {\n      video_element.pause();\n      video_element.onseeked = () => {\n        video_element.style.visibility = \"visible\";\n        video_element.muted = false;\n        if (trial.autoplay) {\n          video_element.play();\n        } else {\n          video_element.pause();\n        }\n        video_element.onseeked = () => {};\n      };\n      video_element.onplaying = () => {\n        video_element.currentTime = trial.start;\n        video_element.onplaying = () => {};\n      };\n      // fix for iOS/MacOS browsers: videos aren't seekable until they start playing, so need to hide/mute, play,\n      // change current time, then show/unmute\n      video_element.muted = true;\n      video_element.play();\n    }\n\n    let stopped = false;\n    if (trial.stop !== null) {\n      video_element.addEventListener(\"timeupdate\", (e) => {\n        var currenttime = video_element.currentTime;\n        if (currenttime >= trial.stop) {\n          video_element.pause();\n          if (trial.trial_ends_after_video && !stopped) {\n            // this is to prevent end_trial from being called twice, because the timeupdate event\n            // can fire in quick succession\n            stopped = true;\n            end_trial();\n          }\n\n          if (!trial.response_allowed_while_playing) {\n            enable_slider();\n          }\n        }\n      });\n    }\n\n    if (trial.require_movement) {\n      const enable_button = () => {\n        display_element.querySelector<HTMLInputElement>(\n          \"#jspsych-video-slider-response-next\"\n        ).disabled = false;\n      };\n\n      display_element\n        .querySelector(\"#jspsych-video-slider-response-response\")\n        .addEventListener(\"mousedown\", enable_button);\n\n      display_element\n        .querySelector(\"#jspsych-video-slider-response-response\")\n        .addEventListener(\"touchstart\", enable_button);\n\n      display_element\n        .querySelector(\"#jspsych-video-slider-response-response\")\n        .addEventListener(\"change\", enable_button);\n    }\n\n    var startTime = performance.now();\n\n    // store response\n    var response = {\n      rt: null,\n      response: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // stop the video file if it is playing\n      // remove any remaining end event handlers\n      display_element\n        .querySelector<HTMLVideoElement>(\"#jspsych-video-slider-response-stimulus-video\")\n        .pause();\n      display_element.querySelector<HTMLVideoElement>(\n        \"#jspsych-video-slider-response-stimulus-video\"\n      ).onended = () => {};\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        start: trial.start,\n        slider_start: trial.slider_start,\n        response: response.response,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    display_element\n      .querySelector(\"#jspsych-video-slider-response-next\")\n      .addEventListener(\"click\", () => {\n        // measure response time\n        var endTime = performance.now();\n        response.rt = Math.round(endTime - startTime);\n        response.response = display_element.querySelector<HTMLInputElement>(\n          \"#jspsych-video-slider-response-response\"\n        ).valueAsNumber;\n\n        if (trial.response_ends_trial) {\n          end_trial();\n        } else {\n          display_element.querySelector<HTMLButtonElement>(\n            \"#jspsych-video-slider-response-next\"\n          ).disabled = true;\n        }\n      });\n\n    // function to enable slider after video ends\n    function enable_slider() {\n      (\n        document.querySelector(\"#jspsych-video-slider-response-response\") as HTMLInputElement\n      ).disabled = false;\n      if (!trial.require_movement) {\n        (\n          document.querySelector(\"#jspsych-video-slider-response-next\") as HTMLInputElement\n        ).disabled = false;\n      }\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      slider_start: trial.slider_start,\n      response: this.jsPsych.randomization.randomInt(trial.min, trial.max),\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      start: trial.start,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-button-response-stimulus\"\n    );\n\n    const respond = () => {\n      if (data.rt !== null) {\n        const el = display_element.querySelector<HTMLInputElement>(\"input[type='range']\");\n\n        setTimeout(() => {\n          this.jsPsych.pluginAPI.clickTarget(el);\n          el.valueAsNumber = data.response;\n        }, data.rt / 2);\n\n        this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(\"button\"), data.rt);\n      }\n    };\n\n    if (!trial.response_allowed_while_playing) {\n      video_element.addEventListener(\"ended\", respond);\n    } else {\n      respond();\n    }\n  }\n}\n\nexport default VideoSliderResponsePlugin;\n"],"names":["info","version","ParameterType","VideoSliderResponsePlugin","jsPsych","display_element","trial","half_thumb_width","video_html","video_preload_blob","i","file_name","type","html","j","label_width_perc","percent_of_range","percent_dist_from_center","offset","next_disabled_attribute","video_element","end_trial","enable_slider","stopped","e","currenttime","enable_button","startTime","response","trial_data","endTime","simulation_mode","simulation_options","load_callback","default_data","data","respond","el"],"mappings":"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"}