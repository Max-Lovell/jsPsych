var jsPsychVideoSliderResponse = (function (s) {
  "use strict";
  var P = {
    name: "@jspsych/plugin-video-slider-response",
    version: "2.0.0",
    description: "jsPsych plugin for playing a video file and getting a slider response",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest --passWithNoTests",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-video-slider-response",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/video-slider-response",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const w = {
    name: "video-slider-response",
    version: P.version,
    parameters: {
      stimulus: { type: s.ParameterType.VIDEO, default: void 0, array: !0 },
      prompt: { type: s.ParameterType.HTML_STRING, default: null },
      width: { type: s.ParameterType.INT, default: "" },
      height: { type: s.ParameterType.INT, default: "" },
      autoplay: { type: s.ParameterType.BOOL, default: !0 },
      controls: { type: s.ParameterType.BOOL, default: !1 },
      start: { type: s.ParameterType.FLOAT, default: null },
      stop: { type: s.ParameterType.FLOAT, default: null },
      rate: { type: s.ParameterType.FLOAT, default: 1 },
      min: { type: s.ParameterType.INT, default: 0 },
      max: { type: s.ParameterType.INT, default: 100 },
      slider_start: { type: s.ParameterType.INT, default: 50 },
      step: { type: s.ParameterType.INT, default: 1 },
      labels: { type: s.ParameterType.HTML_STRING, default: [], array: !0 },
      slider_width: { type: s.ParameterType.INT, default: null },
      button_label: { type: s.ParameterType.STRING, default: "Continue" },
      require_movement: { type: s.ParameterType.BOOL, default: !1 },
      trial_ends_after_video: { type: s.ParameterType.BOOL, default: !1 },
      trial_duration: { type: s.ParameterType.INT, default: null },
      response_ends_trial: { type: s.ParameterType.BOOL, default: !0 },
      response_allowed_while_playing: { type: s.ParameterType.BOOL, default: !0 },
    },
    data: {
      response: { type: s.ParameterType.INT },
      rt: { type: s.ParameterType.INT },
      stimulus: { type: s.ParameterType.STRING, array: !0 },
      slider_start: { type: s.ParameterType.INT },
      start: { type: s.ParameterType.FLOAT },
    },
  };
  class v {
    constructor(t) {
      this.jsPsych = t;
    }
    trial(t, e) {
      if (!Array.isArray(e.stimulus))
        throw new Error(`
        The stimulus property for the video-slider-response plugin must be an array
        of files. See https://www.jspsych.org/latest/plugins/video-slider-response/#parameters
      `);
      var l = 7.5,
        r = '<video id="jspsych-video-slider-response-stimulus-video"';
      e.width && (r += ' width="' + e.width + '"'),
        e.height && (r += ' height="' + e.height + '"'),
        e.autoplay && e.start == null && (r += " autoplay "),
        e.controls && (r += " controls "),
        e.start !== null && (r += ' style="visibility: hidden;"'),
        (r += ">");
      var o = this.jsPsych.pluginAPI.getVideoBuffer(e.stimulus[0]);
      if (!o)
        for (var u = 0; u < e.stimulus.length; u++) {
          var n = e.stimulus[u];
          n.indexOf("?") > -1 && (n = n.substring(0, n.indexOf("?")));
          var p = n.substr(n.lastIndexOf(".") + 1);
          (p = p.toLowerCase()),
            p == "mov" &&
              console.warn(
                "Warning: video-slider-response plugin does not reliably support .mov files."
              ),
            (r += '<source src="' + n + '" type="video/' + p + '">');
        }
      r += "</video>";
      var a = '<div id="jspsych-video-slider-response-wrapper" style="margin: 100px 0px;">';
      (a += '<div id="jspsych-video-slider-response-stimulus">' + r + "</div>"),
        (a +=
          '<div class="jspsych-video-slider-response-container" style="position:relative; margin: 0 auto 3em auto; width:'),
        e.slider_width !== null ? (a += e.slider_width + "px;") : (a += "auto;"),
        (a += '">'),
        (a +=
          '<input type="range" class="jspsych-slider" value="' +
          e.slider_start +
          '" min="' +
          e.min +
          '" max="' +
          e.max +
          '" step="' +
          e.step +
          '" id="jspsych-video-slider-response-response"'),
        e.response_allowed_while_playing || (a += " disabled"),
        (a += "></input><div>");
      for (var y = 0; y < e.labels.length; y++) {
        var h = 100 / (e.labels.length - 1),
          _ = y * (100 / (e.labels.length - 1)),
          b = ((_ - 50) / 50) * 100,
          j = (b * l) / 100;
        (a +=
          '<div style="border: 1px solid transparent; display: inline-block; position: absolute; left:calc(' +
          _ +
          "% - (" +
          h +
          "% / 2) - " +
          j +
          "px); text-align: center; width: " +
          h +
          '%;">'),
          (a += '<span style="text-align: center; font-size: 80%;">' + e.labels[y] + "</span>"),
          (a += "</div>");
      }
      (a += "</div>"),
        (a += "</div>"),
        (a += "</div>"),
        e.prompt !== null && (a += "<div>" + e.prompt + "</div>");
      var g = "";
      (e.require_movement || !e.response_allowed_while_playing) && (g = "disabled"),
        (a +=
          '<button id="jspsych-video-slider-response-next" class="jspsych-btn" ' +
          g +
          ">" +
          e.button_label +
          "</button>"),
        (t.innerHTML = a);
      var i = t.querySelector("#jspsych-video-slider-response-stimulus-video");
      o && (i.src = o),
        (i.onended = () => {
          e.trial_ends_after_video ? c() : e.response_allowed_while_playing || f();
        }),
        (i.playbackRate = e.rate),
        e.start !== null &&
          (i.pause(),
          (i.onseeked = () => {
            (i.style.visibility = "visible"),
              (i.muted = !1),
              e.autoplay ? i.play() : i.pause(),
              (i.onseeked = () => {});
          }),
          (i.onplaying = () => {
            (i.currentTime = e.start), (i.onplaying = () => {});
          }),
          (i.muted = !0),
          i.play());
      let T = !1;
      if (
        (e.stop !== null &&
          i.addEventListener("timeupdate", (d) => {
            var I = i.currentTime;
            I >= e.stop &&
              (i.pause(),
              e.trial_ends_after_video && !T && ((T = !0), c()),
              e.response_allowed_while_playing || f());
          }),
        e.require_movement)
      ) {
        const d = () => {
          t.querySelector("#jspsych-video-slider-response-next").disabled = !1;
        };
        t.querySelector("#jspsych-video-slider-response-response").addEventListener("mousedown", d),
          t
            .querySelector("#jspsych-video-slider-response-response")
            .addEventListener("touchstart", d),
          t.querySelector("#jspsych-video-slider-response-response").addEventListener("change", d);
      }
      var x = performance.now(),
        m = { rt: null, response: null };
      const c = () => {
        t.querySelector("#jspsych-video-slider-response-stimulus-video").pause(),
          (t.querySelector("#jspsych-video-slider-response-stimulus-video").onended = () => {});
        var d = {
          rt: m.rt,
          stimulus: e.stimulus,
          start: e.start,
          slider_start: e.slider_start,
          response: m.response,
        };
        this.jsPsych.finishTrial(d);
      };
      t.querySelector("#jspsych-video-slider-response-next").addEventListener("click", () => {
        var d = performance.now();
        (m.rt = Math.round(d - x)),
          (m.response = t.querySelector("#jspsych-video-slider-response-response").valueAsNumber),
          e.response_ends_trial
            ? c()
            : (t.querySelector("#jspsych-video-slider-response-next").disabled = !0);
      });
      function f() {
        (document.querySelector("#jspsych-video-slider-response-response").disabled = !1),
          e.require_movement ||
            (document.querySelector("#jspsych-video-slider-response-next").disabled = !1);
      }
      e.trial_duration !== null && this.jsPsych.pluginAPI.setTimeout(c, e.trial_duration);
    }
    simulate(t, e, l, r) {
      e == "data-only" && (r(), this.simulate_data_only(t, l)),
        e == "visual" && this.simulate_visual(t, l, r);
    }
    create_simulation_data(t, e) {
      const l = {
          stimulus: t.stimulus,
          slider_start: t.slider_start,
          response: this.jsPsych.randomization.randomInt(t.min, t.max),
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0),
          start: t.start,
        },
        r = this.jsPsych.pluginAPI.mergeSimulationData(l, e);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(t, r), r;
    }
    simulate_data_only(t, e) {
      const l = this.create_simulation_data(t, e);
      this.jsPsych.finishTrial(l);
    }
    simulate_visual(t, e, l) {
      const r = this.create_simulation_data(t, e),
        o = this.jsPsych.getDisplayElement();
      this.trial(o, t), l();
      const u = o.querySelector("#jspsych-video-button-response-stimulus"),
        n = () => {
          if (r.rt !== null) {
            const p = o.querySelector("input[type='range']");
            setTimeout(() => {
              this.jsPsych.pluginAPI.clickTarget(p), (p.valueAsNumber = r.response);
            }, r.rt / 2),
              this.jsPsych.pluginAPI.clickTarget(o.querySelector("button"), r.rt);
          }
        };
      t.response_allowed_while_playing ? n() : u.addEventListener("ended", n);
    }
  }
  return (v.info = w), v;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
