{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"image-button-response\",\n  version: version,\n  parameters: {\n    /** The path of the image file to be displayed. */\n    stimulus: {\n      type: ParameterType.IMAGE,\n      default: undefined,\n    },\n    /** Set the height of the image in pixels. If left null (no value specified), then the image will display at its natural height. */\n    stimulus_height: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Set the width of the image in pixels. If left null (no value specified), then the image will display at its natural width. */\n    stimulus_width: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If setting *only* the width or *only* the height and this parameter is true, then the other dimension will be\n     * scaled to maintain the image's aspect ratio.  */\n    maintain_aspect_ratio: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** Labels for the buttons. Each different string in the array will generate a different button. */\n    choices: {\n      type: ParameterType.STRING,\n      default: undefined,\n      array: true,\n    },\n    /**\n     * ``(choice: string, choice_index: number)=>`<button class=\"jspsych-btn\">${choice}</button>``; | A function that\n     * generates the HTML for each button in the `choices` array. The function gets the string and index of the item in\n     * the `choices` array and should return valid HTML. If you want to use different markup for each button, you can do\n     * that by using a conditional on either parameter. The default parameter returns a button element with the text\n     * label of the choice.\n     */\n    button_html: {\n      type: ParameterType.FUNCTION,\n      default: function (choice: string, choice_index: number) {\n        return `<button class=\"jspsych-btn\">${choice}</button>`;\n      },\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that\n     * it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until\n     * the participant makes a response. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the participant\n     * fails to make a response before this timer is reached, the participant's response will be recorded as null for the\n     * trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely. */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Setting to `'grid'` will make the container element have the CSS property `display: grid` and enable the use of\n     * `grid_rows` and `grid_columns`. Setting to `'flex'` will make the container element have the CSS property\n     * `display: flex`. You can customize how the buttons are laid out by adding inline CSS in the `button_html` parameter.  */\n    button_layout: {\n      type: ParameterType.STRING,\n      default: \"grid\",\n    },\n    /**\n     * The number of rows in the button grid. Only applicable when `button_layout` is set to `'grid'`. If null, the\n     *  number of rows will be determined automatically based on the number of buttons and the number of columns.\n     */\n    grid_rows: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /**\n     * The number of columns in the button grid. Only applicable when `button_layout` is set to `'grid'`. If null, the\n     * number of columns will be determined automatically based on the number of buttons and the number of rows.\n     */\n    grid_columns: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their response\n     * before the cutoff specified by the `trial_duration` parameter). If false, then the trial will continue until\n     * the value for `trial_duration` is reached. You can set this parameter to `false` to force the participant to\n     * view a stimulus for a fixed amount of time, even if they respond before the time is complete. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * If true, the image will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive image trials in some browsers, like Firefox and Edge.\n     * If false, the image will be shown via an img element, as in previous versions of jsPsych. If the stimulus is an **animated gif**, you must set this parameter to false, because the canvas rendering method will only present static images.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** How long the button will delay enabling in milliseconds. */\n    enable_button_after: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n  },\n  data: {\n    /** The path of the image that was displayed. */\n    stimulus: {\n      type: ParameterType.STRING,\n    },\n    /** Indicates which button the participant pressed. The first button in the `choices` array is 0, the second is 1, and so on.  */\n    response: {\n      type: ParameterType.INT,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays an image and records responses generated with a button click. The stimulus can be displayed until\n * a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the participant\n * has failed to respond within a fixed length of time. The button itself can be customized using HTML formatting.\n *\n * Image files can be automatically preloaded by jsPsych using the [`preload` plugin](preload.md). However, if you\n * are using timeline variables or another dynamic method to specify the image stimulus, you will need to\n * [manually preload](../overview/media-preloading.md#manual-preloading) the images.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/image-button-response/ image-button-response plugin documentation on jspsych.org}\n */\nclass ImageButtonResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    const calculateImageDimensions = (image: HTMLImageElement): [number, number] => {\n      let width: number, height: number;\n      // calculate image height and width - this can only be done after image loads because it uses\n      // the image's naturalWidth/naturalHeight properties\n      if (trial.stimulus_height !== null) {\n        height = trial.stimulus_height;\n        if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n          width = image.naturalWidth * (trial.stimulus_height / image.naturalHeight);\n        }\n      } else {\n        height = image.naturalHeight;\n      }\n      if (trial.stimulus_width !== null) {\n        width = trial.stimulus_width;\n        if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n          height = image.naturalHeight * (trial.stimulus_width / image.naturalWidth);\n        }\n      } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n        // if stimulus width is null, only use the image's natural width if the width value wasn't set\n        // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n        width = image.naturalWidth;\n      }\n\n      return [width, height];\n    };\n\n    display_element.innerHTML = \"\";\n    let stimulusElement: HTMLCanvasElement | HTMLImageElement;\n    let canvas: HTMLCanvasElement;\n\n    const image = trial.render_on_canvas ? new Image() : document.createElement(\"img\");\n\n    if (trial.render_on_canvas) {\n      canvas = document.createElement(\"canvas\");\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      stimulusElement = canvas;\n    } else {\n      stimulusElement = image;\n    }\n\n    const drawImage = () => {\n      const [width, height] = calculateImageDimensions(image);\n      if (trial.render_on_canvas) {\n        canvas.width = width;\n        canvas.height = height;\n        canvas.getContext(\"2d\").drawImage(image, 0, 0, width, height);\n      } else {\n        image.style.width = `${width}px`;\n        image.style.height = `${height}px`;\n      }\n    };\n\n    let hasImageBeenDrawn = false;\n\n    // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n    image.onload = () => {\n      if (!hasImageBeenDrawn) {\n        drawImage();\n      }\n    };\n\n    image.src = trial.stimulus;\n    if (image.complete && image.naturalWidth !== 0) {\n      // if image has loaded then draw it now (don't rely on img onload function to draw image\n      // when image is in the cache, because that causes a delay in the image presentation)\n      drawImage();\n      hasImageBeenDrawn = true;\n    }\n\n    stimulusElement.id = \"jspsych-image-button-response-stimulus\";\n    display_element.appendChild(stimulusElement);\n\n    // Display buttons\n    const buttonGroupElement = document.createElement(\"div\");\n    buttonGroupElement.id = \"jspsych-image-button-response-btngroup\";\n    if (trial.button_layout === \"grid\") {\n      buttonGroupElement.classList.add(\"jspsych-btn-group-grid\");\n      if (trial.grid_rows === null && trial.grid_columns === null) {\n        throw new Error(\n          \"You cannot set `grid_rows` to `null` without providing a value for `grid_columns`.\"\n        );\n      }\n      const n_cols =\n        trial.grid_columns === null\n          ? Math.ceil(trial.choices.length / trial.grid_rows)\n          : trial.grid_columns;\n      const n_rows =\n        trial.grid_rows === null\n          ? Math.ceil(trial.choices.length / trial.grid_columns)\n          : trial.grid_rows;\n      buttonGroupElement.style.gridTemplateColumns = `repeat(${n_cols}, 1fr)`;\n      buttonGroupElement.style.gridTemplateRows = `repeat(${n_rows}, 1fr)`;\n    } else if (trial.button_layout === \"flex\") {\n      buttonGroupElement.classList.add(\"jspsych-btn-group-flex\");\n    }\n\n    for (const [choiceIndex, choice] of trial.choices.entries()) {\n      buttonGroupElement.insertAdjacentHTML(\"beforeend\", trial.button_html(choice, choiceIndex));\n      const buttonElement = buttonGroupElement.lastChild as HTMLElement;\n      buttonElement.dataset.choice = choiceIndex.toString();\n      buttonElement.addEventListener(\"click\", () => {\n        after_response(choiceIndex);\n      });\n    }\n\n    display_element.appendChild(buttonGroupElement);\n\n    // Show prompt if there is one\n    if (trial.prompt !== null) {\n      display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n    }\n\n    // start timing\n    var start_time = performance.now();\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.button,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      stimulusElement.classList.add(\"responded\");\n\n      // disable all the buttons after a response\n      for (const button of buttonGroupElement.children) {\n        button.setAttribute(\"disabled\", \"disabled\");\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    function enable_buttons() {\n      var btns = document.querySelectorAll(\".jspsych-image-button-response-button button\");\n      for (var i = 0; i < btns.length; i++) {\n        btns[i].removeAttribute(\"disabled\");\n      }\n    }\n\n    function disable_buttons() {\n      var btns = document.querySelectorAll(\".jspsych-image-button-response-button button\");\n      for (var i = 0; i < btns.length; i++) {\n        btns[i].setAttribute(\"disabled\", \"disabled\");\n      }\n    }\n\n    // set timer of button delay\n    if (trial.enable_button_after > 0) {\n      disable_buttons();\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        enable_buttons();\n      }, trial.enable_button_after);\n    }\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        stimulusElement.style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    } else if (trial.response_ends_trial === false) {\n      console.warn(\n        \"The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true.\"\n      );\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt:\n        this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true) +\n        trial.enable_button_after,\n      response: this.jsPsych.randomization.randomInt(0, trial.choices.length - 1),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(\n          `#jspsych-image-button-response-btngroup [data-choice=\"${data.response}\"]`\n        ),\n        data.rt\n      );\n    }\n  }\n}\n\nexport default ImageButtonResponsePlugin;\n"],"names":["version","ParameterType","image"],"mappings":"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"}