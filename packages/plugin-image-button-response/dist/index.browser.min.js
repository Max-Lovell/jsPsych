var jsPsychImageButtonResponse = (function (n) {
  "use strict";
  var y = {
    name: "@jspsych/plugin-image-button-response",
    version: "2.0.0",
    description: "jsPsych plugin for displaying a stimulus and getting a button response",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-image-button-response",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/image-button-response",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const b = {
    name: "image-button-response",
    version: y.version,
    parameters: {
      stimulus: { type: n.ParameterType.IMAGE, default: void 0 },
      stimulus_height: { type: n.ParameterType.INT, default: null },
      stimulus_width: { type: n.ParameterType.INT, default: null },
      maintain_aspect_ratio: { type: n.ParameterType.BOOL, default: !0 },
      choices: { type: n.ParameterType.STRING, default: void 0, array: !0 },
      button_html: {
        type: n.ParameterType.FUNCTION,
        default: function (m, i) {
          return `<button class="jspsych-btn">${m}</button>`;
        },
      },
      prompt: { type: n.ParameterType.HTML_STRING, default: null },
      stimulus_duration: { type: n.ParameterType.INT, default: null },
      trial_duration: { type: n.ParameterType.INT, default: null },
      button_layout: { type: n.ParameterType.STRING, default: "grid" },
      grid_rows: { type: n.ParameterType.INT, default: 1 },
      grid_columns: { type: n.ParameterType.INT, default: null },
      response_ends_trial: { type: n.ParameterType.BOOL, default: !0 },
      render_on_canvas: { type: n.ParameterType.BOOL, default: !0 },
      enable_button_after: { type: n.ParameterType.INT, default: 0 },
    },
    data: {
      stimulus: { type: n.ParameterType.STRING },
      response: { type: n.ParameterType.INT },
      rt: { type: n.ParameterType.INT },
    },
  };
  class p {
    constructor(i) {
      this.jsPsych = i;
    }
    trial(i, t) {
      const r = (e) => {
        let s, d;
        return (
          t.stimulus_height !== null
            ? ((d = t.stimulus_height),
              t.stimulus_width == null &&
                t.maintain_aspect_ratio &&
                (s = e.naturalWidth * (t.stimulus_height / e.naturalHeight)))
            : (d = e.naturalHeight),
          t.stimulus_width !== null
            ? ((s = t.stimulus_width),
              t.stimulus_height == null &&
                t.maintain_aspect_ratio &&
                (d = e.naturalHeight * (t.stimulus_width / e.naturalWidth)))
            : (t.stimulus_height !== null && t.maintain_aspect_ratio) || (s = e.naturalWidth),
          [s, d]
        );
      };
      i.innerHTML = "";
      let a, l;
      const u = t.render_on_canvas ? new Image() : document.createElement("img");
      t.render_on_canvas
        ? ((l = document.createElement("canvas")),
          (l.style.margin = "0"),
          (l.style.padding = "0"),
          (a = l))
        : (a = u);
      const h = () => {
        const [e, s] = r(u);
        t.render_on_canvas
          ? ((l.width = e), (l.height = s), l.getContext("2d").drawImage(u, 0, 0, e, s))
          : ((u.style.width = `${e}px`), (u.style.height = `${s}px`));
      };
      let g = !1;
      (u.onload = () => {
        g || h();
      }),
        (u.src = t.stimulus),
        u.complete && u.naturalWidth !== 0 && (h(), (g = !0)),
        (a.id = "jspsych-image-button-response-stimulus"),
        i.appendChild(a);
      const o = document.createElement("div");
      if (((o.id = "jspsych-image-button-response-btngroup"), t.button_layout === "grid")) {
        if (
          (o.classList.add("jspsych-btn-group-grid"),
          t.grid_rows === null && t.grid_columns === null)
        )
          throw new Error(
            "You cannot set `grid_rows` to `null` without providing a value for `grid_columns`."
          );
        const e =
            t.grid_columns === null ? Math.ceil(t.choices.length / t.grid_rows) : t.grid_columns,
          s = t.grid_rows === null ? Math.ceil(t.choices.length / t.grid_columns) : t.grid_rows;
        (o.style.gridTemplateColumns = `repeat(${e}, 1fr)`),
          (o.style.gridTemplateRows = `repeat(${s}, 1fr)`);
      } else t.button_layout === "flex" && o.classList.add("jspsych-btn-group-flex");
      for (const [e, s] of t.choices.entries()) {
        o.insertAdjacentHTML("beforeend", t.button_html(s, e));
        const d = o.lastChild;
        (d.dataset.choice = e.toString()),
          d.addEventListener("click", () => {
            T(e);
          });
      }
      i.appendChild(o), t.prompt !== null && i.insertAdjacentHTML("beforeend", t.prompt);
      var f = performance.now(),
        c = { rt: null, button: null };
      const _ = () => {
        var e = { rt: c.rt, stimulus: t.stimulus, response: c.button };
        this.jsPsych.finishTrial(e);
      };
      function T(e) {
        var s = performance.now(),
          d = Math.round(s - f);
        (c.button = parseInt(e)), (c.rt = d), a.classList.add("responded");
        for (const I of o.children) I.setAttribute("disabled", "disabled");
        t.response_ends_trial && _();
      }
      function P() {
        for (
          var e = document.querySelectorAll(".jspsych-image-button-response-button button"), s = 0;
          s < e.length;
          s++
        )
          e[s].removeAttribute("disabled");
      }
      function w() {
        for (
          var e = document.querySelectorAll(".jspsych-image-button-response-button button"), s = 0;
          s < e.length;
          s++
        )
          e[s].setAttribute("disabled", "disabled");
      }
      t.enable_button_after > 0 &&
        (w(),
        this.jsPsych.pluginAPI.setTimeout(() => {
          P();
        }, t.enable_button_after)),
        t.stimulus_duration !== null &&
          this.jsPsych.pluginAPI.setTimeout(() => {
            a.style.visibility = "hidden";
          }, t.stimulus_duration),
        t.trial_duration !== null
          ? this.jsPsych.pluginAPI.setTimeout(() => {
              _();
            }, t.trial_duration)
          : t.response_ends_trial === !1 &&
            console.warn(
              "The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true."
            );
    }
    simulate(i, t, r, a) {
      t == "data-only" && (a(), this.simulate_data_only(i, r)),
        t == "visual" && this.simulate_visual(i, r, a);
    }
    create_simulation_data(i, t) {
      const r = {
          stimulus: i.stimulus,
          rt:
            this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0) +
            i.enable_button_after,
          response: this.jsPsych.randomization.randomInt(0, i.choices.length - 1),
        },
        a = this.jsPsych.pluginAPI.mergeSimulationData(r, t);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(i, a), a;
    }
    simulate_data_only(i, t) {
      const r = this.create_simulation_data(i, t);
      this.jsPsych.finishTrial(r);
    }
    simulate_visual(i, t, r) {
      const a = this.create_simulation_data(i, t),
        l = this.jsPsych.getDisplayElement();
      this.trial(l, i),
        r(),
        a.rt !== null &&
          this.jsPsych.pluginAPI.clickTarget(
            l.querySelector(
              `#jspsych-image-button-response-btngroup [data-choice="${a.response}"]`
            ),
            a.rt
          );
    }
  }
  return (p.info = b), p;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
