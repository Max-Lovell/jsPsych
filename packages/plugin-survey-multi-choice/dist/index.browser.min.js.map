{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"survey-multi-choice\",\n  version: version,\n  parameters: {\n    /**\n     * An array of objects, each object represents a question that appears on the screen. Each object contains a prompt,\n     * options, required, and horizontal parameter that will be applied to the question. See examples below for further\n     * clarification.`prompt`: Type string, default value is *undefined*. The string is prompt/question that will be\n     * associated with a group of options (radio buttons). All questions will get presented on the same page (trial).\n     * `options`: Type array, defualt value is *undefined*. An array of strings. The array contains a set of options to\n     * display for an individual question.`required`: Type boolean, default value is null. The boolean value indicates\n     * if a question is required('true') or not ('false'), using the HTML5 `required` attribute. If this parameter is\n     * undefined, the question will be optional. `horizontal`:Type boolean, default value is false. If true, then the\n     * question is centered and the options are displayed horizontally. `name`: Name of the question. Used for storing\n     * data. If left undefined then default names (`Q0`, `Q1`, `...`) will be used for the questions.\n     */\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          default: undefined,\n        },\n        /** Array of multiple choice options for this question. */\n        options: {\n          type: ParameterType.STRING,\n          array: true,\n          default: undefined,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          default: false,\n        },\n        /** If true, then the question will be centered and options will be displayed horizontally. */\n        horizontal: {\n          type: ParameterType.BOOL,\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          default: \"\",\n        },\n      },\n    },\n    /**\n     * If true, the display order of `questions` is randomly determined at the start of the trial. In the data object,\n     * `Q0` will still refer to the first question in the array, regardless of where it was presented visually.\n     */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** HTML formatted string to display at the top of the page above all the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** Label of the button. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /**\n     * This determines whether or not all of the input elements on the page should allow autocomplete. Setting\n     * this to true will enable autocomplete or auto-fill for the form.\n     */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /** An object containing the response for each question. The object will have a separate key (variable) for each question, with the first question in the trial being recorded in `Q0`, the second in `Q1`, and so on. The responses are recorded as integers, representing the position selected on the likert scale for that question. If the `name` parameter is defined for the question, then the response object will use the value of `name` as the key for each question. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    response: {\n      type: ParameterType.COMPLEX,\n      nested: {\n        identifier: {\n          type: ParameterType.STRING,\n        },\n        response: {\n          type:\n            ParameterType.STRING |\n            ParameterType.INT |\n            ParameterType.FLOAT |\n            ParameterType.BOOL |\n            ParameterType.OBJECT,\n        },\n      },\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the questions first appear on the screen until the participant's response(s) are submitted. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** An array with the order of questions. For example `[2,0,1]` would indicate that the first question was `trial.questions[2]` (the third item in the `questions` parameter), the second question was `trial.questions[0]`, and the final question was `trial.questions[1]`. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    question_order: {\n      type: ParameterType.INT,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **survey-multi-choice**\n *\n * The survey-multi-choice plugin displays a set of questions with multiple choice response fields. The participant selects a single answer.\n *\n * @author Shane Martin\n * @see {@link https://www.jspsych.org/latest/plugins/survey-multi-choice/ survey-multi-choice plugin documentation on jspsych.org}\n */\nclass SurveyMultiChoicePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var plugin_id_name = \"jspsych-survey-multi-choice\";\n\n    var html = \"\";\n\n    // inject CSS for trial\n    html += '<style id=\"jspsych-survey-multi-choice-css\">';\n    html +=\n      \".jspsych-survey-multi-choice-question { margin-top: 2em; margin-bottom: 2em; text-align: left; }\" +\n      \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\n      \".jspsych-survey-multi-choice-option { line-height: 2; }\" +\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\" +\n      \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\";\n    html += \"</style>\";\n\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n\n    // form element\n    if (trial.autocomplete) {\n      html += '<form id=\"jspsych-survey-multi-choice-form\">';\n    } else {\n      html += '<form id=\"jspsych-survey-multi-choice-form\" autocomplete=\"off\">';\n    }\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n    // so that the data are always associated with the same question regardless of order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n\n    // add multiple-choice questions\n    for (var i = 0; i < trial.questions.length; i++) {\n      // get question based on question_order\n      var question = trial.questions[question_order[i]];\n      var question_id = question_order[i];\n\n      // create question container\n      var question_classes = [\"jspsych-survey-multi-choice-question\"];\n      if (question.horizontal) {\n        question_classes.push(\"jspsych-survey-multi-choice-horizontal\");\n      }\n\n      html +=\n        '<div id=\"jspsych-survey-multi-choice-' +\n        question_id +\n        '\" class=\"' +\n        question_classes.join(\" \") +\n        '\"  data-name=\"' +\n        question.name +\n        '\">';\n\n      // add question text\n      html += '<p class=\"jspsych-survey-multi-choice-text survey-multi-choice\">' + question.prompt;\n      if (question.required) {\n        html += \"<span class='required'>*</span>\";\n      }\n      html += \"</p>\";\n\n      // create option radio buttons\n      for (var j = 0; j < question.options.length; j++) {\n        // add label and question text\n        var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n        var input_name = \"jspsych-survey-multi-choice-response-\" + question_id;\n        var input_id = \"jspsych-survey-multi-choice-response-\" + question_id + \"-\" + j;\n\n        var required_attr = question.required ? \"required\" : \"\";\n\n        // add radio button container\n        html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n        html += '<label class=\"jspsych-survey-multi-choice-text\" for=\"' + input_id + '\">';\n        html +=\n          '<input type=\"radio\" name=\"' +\n          input_name +\n          '\" id=\"' +\n          input_id +\n          '\" value=\"' +\n          question.options[j] +\n          '\" ' +\n          required_attr +\n          \"></input>\";\n        html += question.options[j] + \"</label>\";\n        html += \"</div>\";\n      }\n\n      html += \"</div>\";\n    }\n\n    // add submit button\n    html +=\n      '<input type=\"submit\" id=\"' +\n      plugin_id_name +\n      '-next\" class=\"' +\n      plugin_id_name +\n      ' jspsych-btn\"' +\n      (trial.button_label ? ' value=\"' + trial.button_label + '\"' : \"\") +\n      \"></input>\";\n    html += \"</form>\";\n\n    // render\n    display_element.innerHTML = html;\n\n    document.querySelector(\"form\").addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n      for (var i = 0; i < trial.questions.length; i++) {\n        var match = display_element.querySelector(\"#jspsych-survey-multi-choice-\" + i);\n        var id = \"Q\" + i;\n        var val: String;\n        if (match.querySelector(\"input[type=radio]:checked\") !== null) {\n          val = match.querySelector<HTMLInputElement>(\"input[type=radio]:checked\").value;\n        } else {\n          val = \"\";\n        }\n        var obje = {};\n        var name = id;\n        if (match.attributes[\"data-name\"].value !== \"\") {\n          name = match.attributes[\"data-name\"].value;\n        }\n        obje[name] = val;\n        Object.assign(question_data, obje);\n      }\n      // save data\n      var trial_data = {\n        rt: response_time,\n        response: question_data,\n        question_order: question_order,\n      };\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      question_data[name] = this.jsPsych.randomization.sampleWithoutReplacement(q.options, 1)[0];\n      rt += this.jsPsych.randomization.sampleExGaussian(1500, 400, 1 / 200, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n      question_order: trial.randomize_question_order\n        ? this.jsPsych.randomization.shuffle([...Array(trial.questions.length).keys()])\n        : [...Array(trial.questions.length).keys()],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers = Object.entries(data.response);\n    for (let i = 0; i < answers.length; i++) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(\n          `#jspsych-survey-multi-choice-response-${i}-${trial.questions[i].options.indexOf(\n            answers[i][1]\n          )}`\n        ),\n        ((data.rt - 1000) / answers.length) * (i + 1)\n      );\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-multi-choice-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyMultiChoicePlugin;\n"],"names":["info","version","ParameterType","SurveyMultiChoicePlugin","jsPsych","display_element","trial","plugin_id_name","html","question_order","i","question","question_id","question_classes","j","option_id_name","input_name","input_id","required_attr","event","endTime","response_time","startTime","question_data","match","id","val","obje","name","trial_data","simulation_mode","simulation_options","load_callback","rt","q","default_data","data","answers"],"mappings":"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"}