var jsPsychSurveyMultiChoice = (function (i) {
  "use strict";
  var j = {
    name: "@jspsych/plugin-survey-multi-choice",
    version: "2.0.0",
    description: "a jspsych plugin for multiple choice survey questions",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-survey-multi-choice",
    },
    author: "Shane Martin",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/survey-multi-choice",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const P = {
    name: "survey-multi-choice",
    version: j.version,
    parameters: {
      questions: {
        type: i.ParameterType.COMPLEX,
        array: !0,
        nested: {
          prompt: { type: i.ParameterType.HTML_STRING, default: void 0 },
          options: { type: i.ParameterType.STRING, array: !0, default: void 0 },
          required: { type: i.ParameterType.BOOL, default: !1 },
          horizontal: { type: i.ParameterType.BOOL, default: !1 },
          name: { type: i.ParameterType.STRING, default: "" },
        },
      },
      randomize_question_order: { type: i.ParameterType.BOOL, default: !1 },
      preamble: { type: i.ParameterType.HTML_STRING, default: null },
      button_label: { type: i.ParameterType.STRING, default: "Continue" },
      autocomplete: { type: i.ParameterType.BOOL, default: !1 },
    },
    data: {
      response: {
        type: i.ParameterType.COMPLEX,
        nested: {
          identifier: { type: i.ParameterType.STRING },
          response: {
            type:
              i.ParameterType.STRING |
              i.ParameterType.INT |
              i.ParameterType.FLOAT |
              i.ParameterType.BOOL |
              i.ParameterType.OBJECT,
          },
        },
      },
      rt: { type: i.ParameterType.INT },
      question_order: { type: i.ParameterType.INT, array: !0 },
    },
  };
  class m {
    constructor(t) {
      this.jsPsych = t;
    }
    trial(t, r) {
      var o = "jspsych-survey-multi-choice",
        e = "";
      (e += '<style id="jspsych-survey-multi-choice-css">'),
        (e +=
          ".jspsych-survey-multi-choice-question { margin-top: 2em; margin-bottom: 2em; text-align: left; }.jspsych-survey-multi-choice-text span.required {color: darkred;}.jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}.jspsych-survey-multi-choice-option { line-height: 2; }.jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}"),
        (e += "</style>"),
        r.preamble !== null &&
          (e +=
            '<div id="jspsych-survey-multi-choice-preamble" class="jspsych-survey-multi-choice-preamble">' +
            r.preamble +
            "</div>"),
        r.autocomplete
          ? (e += '<form id="jspsych-survey-multi-choice-form">')
          : (e += '<form id="jspsych-survey-multi-choice-form" autocomplete="off">');
      for (var n = [], a = 0; a < r.questions.length; a++) n.push(a);
      r.randomize_question_order && (n = this.jsPsych.randomization.shuffle(n));
      for (var a = 0; a < r.questions.length; a++) {
        var s = r.questions[n[a]],
          u = n[a],
          h = ["jspsych-survey-multi-choice-question"];
        s.horizontal && h.push("jspsych-survey-multi-choice-horizontal"),
          (e +=
            '<div id="jspsych-survey-multi-choice-' +
            u +
            '" class="' +
            h.join(" ") +
            '"  data-name="' +
            s.name +
            '">'),
          (e += '<p class="jspsych-survey-multi-choice-text survey-multi-choice">' + s.prompt),
          s.required && (e += "<span class='required'>*</span>"),
          (e += "</p>");
        for (var c = 0; c < s.options.length; c++) {
          var T = "jspsych-survey-multi-choice-option-" + u + "-" + c,
            q = "jspsych-survey-multi-choice-response-" + u,
            d = "jspsych-survey-multi-choice-response-" + u + "-" + c,
            b = s.required ? "required" : "";
          (e += '<div id="' + T + '" class="jspsych-survey-multi-choice-option">'),
            (e += '<label class="jspsych-survey-multi-choice-text" for="' + d + '">'),
            (e +=
              '<input type="radio" name="' +
              q +
              '" id="' +
              d +
              '" value="' +
              s.options[c] +
              '" ' +
              b +
              "></input>"),
            (e += s.options[c] + "</label>"),
            (e += "</div>");
        }
        e += "</div>";
      }
      (e +=
        '<input type="submit" id="' +
        o +
        '-next" class="' +
        o +
        ' jspsych-btn"' +
        (r.button_label ? ' value="' + r.button_label + '"' : "") +
        "></input>"),
        (e += "</form>"),
        (t.innerHTML = e),
        document.querySelector("form").addEventListener("submit", (x) => {
          x.preventDefault();
          for (
            var O = performance.now(), S = Math.round(O - _), v = {}, l = 0;
            l < r.questions.length;
            l++
          ) {
            var p = t.querySelector("#jspsych-survey-multi-choice-" + l),
              I = "Q" + l,
              y;
            p.querySelector("input[type=radio]:checked") !== null
              ? (y = p.querySelector("input[type=radio]:checked").value)
              : (y = "");
            var g = {},
              f = I;
            p.attributes["data-name"].value !== "" && (f = p.attributes["data-name"].value),
              (g[f] = y),
              Object.assign(v, g);
          }
          var z = { rt: S, response: v, question_order: n };
          this.jsPsych.finishTrial(z);
        });
      var _ = performance.now();
    }
    simulate(t, r, o, e) {
      r == "data-only" && (e(), this.simulate_data_only(t, o)),
        r == "visual" && this.simulate_visual(t, o, e);
    }
    create_simulation_data(t, r) {
      const o = {};
      let e = 1e3;
      for (const s of t.questions) {
        const u = s.name ? s.name : `Q${t.questions.indexOf(s)}`;
        (o[u] = this.jsPsych.randomization.sampleWithoutReplacement(s.options, 1)[0]),
          (e += this.jsPsych.randomization.sampleExGaussian(1500, 400, 0.005, !0));
      }
      const n = {
          response: o,
          rt: e,
          question_order: t.randomize_question_order
            ? this.jsPsych.randomization.shuffle([...Array(t.questions.length).keys()])
            : [...Array(t.questions.length).keys()],
        },
        a = this.jsPsych.pluginAPI.mergeSimulationData(n, r);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(t, a), a;
    }
    simulate_data_only(t, r) {
      const o = this.create_simulation_data(t, r);
      this.jsPsych.finishTrial(o);
    }
    simulate_visual(t, r, o) {
      const e = this.create_simulation_data(t, r),
        n = this.jsPsych.getDisplayElement();
      this.trial(n, t), o();
      const a = Object.entries(e.response);
      for (let s = 0; s < a.length; s++)
        this.jsPsych.pluginAPI.clickTarget(
          n.querySelector(
            `#jspsych-survey-multi-choice-response-${s}-${t.questions[s].options.indexOf(a[s][1])}`
          ),
          ((e.rt - 1e3) / a.length) * (s + 1)
        );
      this.jsPsych.pluginAPI.clickTarget(
        n.querySelector("#jspsych-survey-multi-choice-next"),
        e.rt
      );
    }
  }
  return (m.info = P), m;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
