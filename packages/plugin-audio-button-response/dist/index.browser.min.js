var jsPsychAudioButtonResponse = (function (a) {
  "use strict";
  function c(i) {
    return i && i.__esModule && Object.prototype.hasOwnProperty.call(i, "default") ? i.default : i;
  }
  const _ = (i) => {
    const s = new Set();
    do for (const t of Reflect.ownKeys(i)) s.add([i, t]);
    while ((i = Reflect.getPrototypeOf(i)) && i !== Object.prototype);
    return s;
  };
  var m = (i, { include: s, exclude: t } = {}) => {
      const r = (e) => {
        const n = (o) => (typeof o == "string" ? e === o : o.test(e));
        return s ? s.some(n) : t ? !t.some(n) : !0;
      };
      for (const [e, n] of _(i.constructor.prototype)) {
        if (n === "constructor" || !r(n)) continue;
        const o = Reflect.getOwnPropertyDescriptor(e, n);
        o && typeof o.value == "function" && (i[n] = i[n].bind(i));
      }
      return i;
    },
    y = c(m),
    b = {
      name: "@jspsych/plugin-audio-button-response",
      version: "2.0.1",
      description: "jsPsych plugin for playing an audio file and getting a button response",
      type: "module",
      main: "dist/index.cjs",
      exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
      typings: "dist/index.d.ts",
      unpkg: "dist/index.browser.min.js",
      files: ["src", "dist"],
      source: "src/index.ts",
      scripts: {
        test: "jest",
        "test:watch": "npm test -- --watch",
        tsc: "tsc",
        build: "rollup --config",
        "build:watch": "npm run build -- --watch",
      },
      repository: {
        type: "git",
        url: "git+https://github.com/jspsych/jsPsych.git",
        directory: "packages/plugin-audio-button-response",
      },
      author: "Kristin Diep",
      license: "MIT",
      bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
      homepage: "https://www.jspsych.org/latest/plugins/audio-button-response",
      peerDependencies: { jspsych: ">=7.1.0" },
      devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
    },
    p = (i, s, t) =>
      new Promise((r, e) => {
        var n = (u) => {
            try {
              l(t.next(u));
            } catch (d) {
              e(d);
            }
          },
          o = (u) => {
            try {
              l(t.throw(u));
            } catch (d) {
              e(d);
            }
          },
          l = (u) => (u.done ? r(u.value) : Promise.resolve(u.value).then(n, o));
        l((t = t.apply(i, s)).next());
      });
  const g = {
    name: "audio-button-response",
    version: b.version,
    parameters: {
      stimulus: { type: a.ParameterType.AUDIO, default: void 0 },
      choices: { type: a.ParameterType.STRING, default: void 0, array: !0 },
      button_html: {
        type: a.ParameterType.FUNCTION,
        default: function (i, s) {
          return `<button class="jspsych-btn">${i}</button>`;
        },
      },
      prompt: { type: a.ParameterType.HTML_STRING, default: null },
      trial_duration: { type: a.ParameterType.INT, default: null },
      button_layout: { type: a.ParameterType.STRING, default: "grid" },
      grid_rows: { type: a.ParameterType.INT, default: 1 },
      grid_columns: { type: a.ParameterType.INT, default: null },
      response_ends_trial: { type: a.ParameterType.BOOL, default: !0 },
      trial_ends_after_audio: { type: a.ParameterType.BOOL, default: !1 },
      response_allowed_while_playing: { type: a.ParameterType.BOOL, default: !0 },
      enable_button_after: { type: a.ParameterType.INT, default: 0 },
    },
    data: { rt: { type: a.ParameterType.INT }, response: { type: a.ParameterType.INT } },
  };
  class h {
    constructor(s) {
      (this.jsPsych = s),
        (this.buttonElements = []),
        (this.response = { rt: null, button: null }),
        (this.disable_buttons = () => {
          for (const t of this.buttonElements) t.setAttribute("disabled", "disabled");
        }),
        (this.enable_buttons_without_delay = () => {
          for (const t of this.buttonElements) t.removeAttribute("disabled");
        }),
        (this.enable_buttons_with_delay = (t) => {
          this.jsPsych.pluginAPI.setTimeout(this.enable_buttons_without_delay, t);
        }),
        (this.after_response = (t) => {
          var r = performance.now(),
            e = Math.round(r - this.startTime);
          this.context !== null &&
            ((r = this.context.currentTime), (e = Math.round((r - this.startTime) * 1e3))),
            (this.response.button = parseInt(t)),
            (this.response.rt = e),
            this.disable_buttons(),
            this.params.response_ends_trial && this.end_trial();
        }),
        (this.end_trial = () => {
          this.audio.stop(),
            this.audio.removeEventListener("ended", this.end_trial),
            this.audio.removeEventListener("ended", this.enable_buttons);
          var t = {
            rt: this.response.rt,
            stimulus: this.params.stimulus,
            response: this.response.button,
          };
          this.trial_complete(t);
        }),
        y(this);
    }
    trial(s, t, r) {
      return p(this, null, function* () {
        (this.params = t),
          (this.display = s),
          (this.context = this.jsPsych.pluginAPI.audioContext()),
          (this.audio = yield this.jsPsych.pluginAPI.getAudioPlayer(t.stimulus)),
          t.trial_ends_after_audio && this.audio.addEventListener("ended", this.end_trial),
          !t.response_allowed_while_playing &&
            !t.trial_ends_after_audio &&
            this.audio.addEventListener("ended", this.enable_buttons);
        const e = document.createElement("div");
        if (((e.id = "jspsych-audio-button-response-btngroup"), t.button_layout === "grid")) {
          if (
            (e.classList.add("jspsych-btn-group-grid"),
            t.grid_rows === null && t.grid_columns === null)
          )
            throw new Error(
              "You cannot set `grid_rows` to `null` without providing a value for `grid_columns`."
            );
          const n =
              t.grid_columns === null ? Math.ceil(t.choices.length / t.grid_rows) : t.grid_columns,
            o = t.grid_rows === null ? Math.ceil(t.choices.length / t.grid_columns) : t.grid_rows;
          (e.style.gridTemplateColumns = `repeat(${n}, 1fr)`),
            (e.style.gridTemplateRows = `repeat(${o}, 1fr)`);
        } else t.button_layout === "flex" && e.classList.add("jspsych-btn-group-flex");
        for (const [n, o] of t.choices.entries()) {
          e.insertAdjacentHTML("beforeend", t.button_html(o, n));
          const l = e.lastChild;
          (l.dataset.choice = n.toString()),
            l.addEventListener("click", () => {
              this.after_response(n);
            }),
            this.buttonElements.push(l);
        }
        return (
          s.appendChild(e),
          t.prompt !== null && s.insertAdjacentHTML("beforeend", t.prompt),
          t.response_allowed_while_playing
            ? t.enable_button_after > 0 && (this.disable_buttons(), this.enable_buttons())
            : this.disable_buttons(),
          t.trial_duration !== null &&
            this.jsPsych.pluginAPI.setTimeout(() => {
              this.end_trial();
            }, t.trial_duration),
          r(),
          (this.startTime = performance.now()),
          this.context !== null && (this.startTime = this.context.currentTime),
          this.audio.play(),
          new Promise((n) => {
            this.trial_complete = n;
          })
        );
      });
    }
    enable_buttons() {
      this.params.enable_button_after > 0
        ? this.enable_buttons_with_delay(this.params.enable_button_after)
        : this.enable_buttons_without_delay();
    }
    simulate(s, t, r, e) {
      return p(this, null, function* () {
        t == "data-only" && (e(), this.simulate_data_only(s, r)),
          t == "visual" && this.simulate_visual(s, r, e);
      });
    }
    create_simulation_data(s, t) {
      const r = {
          stimulus: s.stimulus,
          rt:
            this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0) +
            s.enable_button_after,
          response: this.jsPsych.randomization.randomInt(0, s.choices.length - 1),
        },
        e = this.jsPsych.pluginAPI.mergeSimulationData(r, t);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(s, e), e;
    }
    simulate_data_only(s, t) {
      const r = this.create_simulation_data(s, t);
      this.jsPsych.finishTrial(r);
    }
    simulate_visual(s, t, r) {
      const e = this.create_simulation_data(s, t),
        n = this.jsPsych.getDisplayElement(),
        o = () => {
          e.rt !== null &&
            this.jsPsych.pluginAPI.clickTarget(
              n.querySelector(
                `#jspsych-audio-button-response-btngroup [data-choice="${e.response}"]`
              ),
              e.rt
            );
        };
      this.trial(n, s, () => {
        r(), s.response_allowed_while_playing ? o() : this.audio.addEventListener("ended", o);
      });
    }
  }
  return (h.info = g), h;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
