{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"serial-reaction-time-mouse\",\n  version: version,\n  parameters: {\n    /** This array represents the grid of boxes shown on the screen. Each inner array represents a single row. The entries in the inner arrays represent the columns. If an entry is `1` then a square will be drawn at that location on the grid. If an entry is `0` then the corresponding location on the grid will be empty. Thus, by mixing `1`s and `0`s it is possible to create many different grid-based arrangements. */\n    grid: {\n      type: ParameterType.BOOL, // TO DO: BOOL doesn't seem like the right type here. INT? Also, is this always a nested array?\n      array: true,\n      default: [[1, 1, 1, 1]],\n    },\n    /** The location of the target. The array should be the [row, column] of the target. */\n    target: {\n      type: ParameterType.INT,\n      array: true,\n      default: undefined,\n    },\n    /** The width and height in pixels of each square in the grid. */\n    grid_square_size: {\n      type: ParameterType.INT,\n      default: 100,\n    },\n    /** The color of the target square. */\n    target_color: {\n      type: ParameterType.STRING,\n      default: \"#999\",\n    },\n    /** If true, the trial ends after a key press. Feedback is displayed if `show_response_feedback` is true. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** The number of milliseconds to display the grid *before* the target changes color. */\n    pre_target_duration: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /** How long to show the trial */\n    /** The maximum length of time of the trial, not including feedback. */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If a positive number, the target will progressively change color at the start of the trial, with the transition lasting this many milliseconds. */\n    fade_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then user can make nontarget response. */\n    allow_nontarget_responses: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which keys to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n      no_function: false,\n    },\n  },\n  data: {\n    /** The representation of the grid. This will be encoded as a JSON string when data is saved using\n     * the `.json()` or `.csv()` functions.  */\n    grid: {\n      type: ParameterType.COMPLEX,\n      array: true,\n    },\n    /** The representation of the target location on the grid. This will be encoded\n     * as a JSON string when data is saved using the `.json()` or `.csv()` functions */\n    target: {\n      type: ParameterType.COMPLEX,\n      array: true,\n    },\n    /** The `[row, column]` response location on the grid. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    response: {\n      type: ParameterType.INT,\n      array: true,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the second stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** `true` if the participant's response matched the target.  */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The serial reaction time mouse plugin implements a generalized version of the SRT\n * task [(Nissen & Bullmer, 1987)](https://doi.org/10.1016%2F0010-0285%2887%2990002-8).\n * Squares are displayed in a grid-based system on the screen, and one square changes color.\n * The participant must click on the square that changes color.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/serial-reaction-time-mouse/ serial-reaction-time-mouse plugin documentation on jspsych.org}\n */\nclass SerialReactionTimeMousePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var startTime = -1;\n    var response = {\n      rt: null,\n      row: null,\n      column: null,\n    };\n\n    const showTarget = () => {\n      var resp_targets;\n      if (!trial.allow_nontarget_responses) {\n        resp_targets = [\n          display_element.querySelector(\n            \"#jspsych-serial-reaction-time-stimulus-cell-\" + trial.target[0] + \"-\" + trial.target[1]\n          ),\n        ];\n      } else {\n        resp_targets = display_element.querySelectorAll(\n          \".jspsych-serial-reaction-time-stimulus-cell\"\n        );\n      }\n      for (var i = 0; i < resp_targets.length; i++) {\n        resp_targets[i].addEventListener(\"mousedown\", (e) => {\n          if (startTime == -1) {\n            return;\n          } else {\n            var info = <any>{};\n            info.row = e.currentTarget.getAttribute(\"data-row\");\n            info.column = e.currentTarget.getAttribute(\"data-column\");\n            info.rt = Math.round(performance.now() - startTime);\n            after_response(info);\n          }\n        });\n      }\n\n      startTime = performance.now();\n\n      if (trial.fade_duration == null) {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-serial-reaction-time-stimulus-cell-\" + trial.target[0] + \"-\" + trial.target[1]\n        ).style.backgroundColor = trial.target_color;\n      } else {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-serial-reaction-time-stimulus-cell-\" + trial.target[0] + \"-\" + trial.target[1]\n        ).style.transition = \"background-color \" + trial.fade_duration;\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-serial-reaction-time-stimulus-cell-\" + trial.target[0] + \"-\" + trial.target[1]\n        ).style.backgroundColor = trial.target_color;\n      }\n\n      if (trial.trial_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(endTrial, trial.trial_duration);\n      }\n    };\n\n    // display stimulus\n    var stimulus = this.stimulus(trial.grid, trial.grid_square_size);\n    display_element.innerHTML = stimulus;\n\n    if (trial.pre_target_duration <= 0) {\n      showTarget();\n    } else {\n      this.jsPsych.pluginAPI.setTimeout(showTarget, trial.pre_target_duration);\n    }\n\n    //show prompt if there is one\n    if (trial.prompt !== null) {\n      display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n    }\n\n    const endTrial = () => {\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        grid: trial.grid,\n        target: trial.target,\n        response: [parseInt(response.row, 10), parseInt(response.column, 10)],\n        correct: response.row == trial.target[0] && response.column == trial.target[1],\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(info: { rt: string; row: number; column: number }) {\n      // only record first response\n      response = response.rt == null ? info : response;\n\n      if (trial.response_ends_trial) {\n        endTrial();\n      }\n    }\n  }\n\n  stimulus(grid, square_size: number, target?: number[], target_color?: string, labels?) {\n    var stimulus =\n      \"<div id='jspsych-serial-reaction-time-stimulus' style='margin:auto; display: table; table-layout: fixed; border-spacing:\" +\n      square_size / 4 +\n      \"px'>\";\n    for (var i = 0; i < grid.length; i++) {\n      stimulus +=\n        \"<div class='jspsych-serial-reaction-time-stimulus-row' style='display:table-row;'>\";\n      for (var j = 0; j < grid[i].length; j++) {\n        var classname = \"jspsych-serial-reaction-time-stimulus-cell\";\n\n        stimulus +=\n          \"<div class='\" +\n          classname +\n          \"' id='jspsych-serial-reaction-time-stimulus-cell-\" +\n          i +\n          \"-\" +\n          j +\n          \"' \" +\n          \"data-row=\" +\n          i +\n          \" data-column=\" +\n          j +\n          \" \" +\n          \"style='width:\" +\n          square_size +\n          \"px; height:\" +\n          square_size +\n          \"px; display:table-cell; vertical-align:middle; text-align: center; cursor: pointer; font-size:\" +\n          square_size / 2 +\n          \"px;\";\n        if (grid[i][j] == 1) {\n          stimulus += \"border: 2px solid black;\";\n        }\n        if (typeof target !== \"undefined\" && target[0] == i && target[1] == j) {\n          stimulus += \"background-color: \" + target_color + \";\";\n        }\n        stimulus += \"'>\";\n        if (typeof labels !== \"undefined\" && labels[i][j] !== false) {\n          stimulus += labels[i][j];\n        }\n        stimulus += \"</div>\";\n      }\n      stimulus += \"</div>\";\n    }\n    stimulus += \"</div>\";\n\n    return stimulus;\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    let response = this.jsPsych.utils.deepCopy(trial.target);\n    if (trial.allow_nontarget_responses && this.jsPsych.randomization.sampleBernoulli(0.8) !== 1) {\n      while (response[0] == trial.target[0] && response[1] == trial.target[1]) {\n        response[0] == this.jsPsych.randomization.randomInt(0, trial.grid.length);\n        //@ts-ignore array typing is not quite right\n        response[1] == this.jsPsych.randomization.randomInt(0, trial.grid[response[0]].length);\n      }\n    }\n\n    const default_data = {\n      grid: trial.grid,\n      target: trial.target,\n      response: response,\n      rt:\n        trial.pre_target_duration +\n        this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      correct: response[0] == trial.target[0] && response[1] == trial.target[1],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      const target = display_element.querySelector(\n        `.jspsych-serial-reaction-time-stimulus-cell[data-row=\"${data.response[0]}\"][data-column=\"${data.response[1]}\"]`\n      );\n      this.jsPsych.pluginAPI.clickTarget(target, data.rt);\n    }\n  }\n}\n\nexport default SerialReactionTimeMousePlugin;\n"],"names":["version","ParameterType","info"],"mappings":"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"}