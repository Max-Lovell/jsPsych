{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"serial-reaction-time-mouse\",\n  version: version,\n  parameters: {\n    /** This array represents the grid of boxes shown on the screen. Each inner array represents a single row. The entries in the inner arrays represent the columns. If an entry is `1` then a square will be drawn at that location on the grid. If an entry is `0` then the corresponding location on the grid will be empty. Thus, by mixing `1`s and `0`s it is possible to create many different grid-based arrangements. */\n    grid: {\n      type: ParameterType.BOOL, // TO DO: BOOL doesn't seem like the right type here. INT? Also, is this always a nested array?\n      array: true,\n      default: [[1, 1, 1, 1]],\n    },\n    /** The location of the target. The array should be the [row, column] of the target. */\n    target: {\n      type: ParameterType.INT,\n      array: true,\n      default: undefined,\n    },\n    /** The width and height in pixels of each square in the grid. */\n    grid_square_size: {\n      type: ParameterType.INT,\n      default: 100,\n    },\n    /** The color of the target square. */\n    target_color: {\n      type: ParameterType.STRING,\n      default: \"#999\",\n    },\n    /** If true, the trial ends after a key press. Feedback is displayed if `show_response_feedback` is true. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** The number of milliseconds to display the grid *before* the target changes color. */\n    pre_target_duration: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /** How long to show the trial */\n    /** The maximum length of time of the trial, not including feedback. */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If a positive number, the target will progressively change color at the start of the trial, with the transition lasting this many milliseconds. */\n    fade_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then user can make nontarget response. */\n    allow_nontarget_responses: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which keys to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n      no_function: false,\n    },\n  },\n  data: {\n    /** The representation of the grid. This will be encoded as a JSON string when data is saved using\n     * the `.json()` or `.csv()` functions.  */\n    grid: {\n      type: ParameterType.COMPLEX,\n      array: true,\n    },\n    /** The representation of the target location on the grid. This will be encoded\n     * as a JSON string when data is saved using the `.json()` or `.csv()` functions */\n    target: {\n      type: ParameterType.COMPLEX,\n      array: true,\n    },\n    /** The `[row, column]` response location on the grid. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    response: {\n      type: ParameterType.INT,\n      array: true,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the second stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** `true` if the participant's response matched the target.  */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The serial reaction time mouse plugin implements a generalized version of the SRT\n * task [(Nissen & Bullmer, 1987)](https://doi.org/10.1016%2F0010-0285%2887%2990002-8).\n * Squares are displayed in a grid-based system on the screen, and one square changes color.\n * The participant must click on the square that changes color.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/serial-reaction-time-mouse/ serial-reaction-time-mouse plugin documentation on jspsych.org}\n */\nclass SerialReactionTimeMousePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var startTime = -1;\n    var response = {\n      rt: null,\n      row: null,\n      column: null,\n    };\n\n    const showTarget = () => {\n      var resp_targets;\n      if (!trial.allow_nontarget_responses) {\n        resp_targets = [\n          display_element.querySelector(\n            \"#jspsych-serial-reaction-time-stimulus-cell-\" + trial.target[0] + \"-\" + trial.target[1]\n          ),\n        ];\n      } else {\n        resp_targets = display_element.querySelectorAll(\n          \".jspsych-serial-reaction-time-stimulus-cell\"\n        );\n      }\n      for (var i = 0; i < resp_targets.length; i++) {\n        resp_targets[i].addEventListener(\"mousedown\", (e) => {\n          if (startTime == -1) {\n            return;\n          } else {\n            var info = <any>{};\n            info.row = e.currentTarget.getAttribute(\"data-row\");\n            info.column = e.currentTarget.getAttribute(\"data-column\");\n            info.rt = Math.round(performance.now() - startTime);\n            after_response(info);\n          }\n        });\n      }\n\n      startTime = performance.now();\n\n      if (trial.fade_duration == null) {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-serial-reaction-time-stimulus-cell-\" + trial.target[0] + \"-\" + trial.target[1]\n        ).style.backgroundColor = trial.target_color;\n      } else {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-serial-reaction-time-stimulus-cell-\" + trial.target[0] + \"-\" + trial.target[1]\n        ).style.transition = \"background-color \" + trial.fade_duration;\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-serial-reaction-time-stimulus-cell-\" + trial.target[0] + \"-\" + trial.target[1]\n        ).style.backgroundColor = trial.target_color;\n      }\n\n      if (trial.trial_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(endTrial, trial.trial_duration);\n      }\n    };\n\n    // display stimulus\n    var stimulus = this.stimulus(trial.grid, trial.grid_square_size);\n    display_element.innerHTML = stimulus;\n\n    if (trial.pre_target_duration <= 0) {\n      showTarget();\n    } else {\n      this.jsPsych.pluginAPI.setTimeout(showTarget, trial.pre_target_duration);\n    }\n\n    //show prompt if there is one\n    if (trial.prompt !== null) {\n      display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n    }\n\n    const endTrial = () => {\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        grid: trial.grid,\n        target: trial.target,\n        response: [parseInt(response.row, 10), parseInt(response.column, 10)],\n        correct: response.row == trial.target[0] && response.column == trial.target[1],\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(info: { rt: string; row: number; column: number }) {\n      // only record first response\n      response = response.rt == null ? info : response;\n\n      if (trial.response_ends_trial) {\n        endTrial();\n      }\n    }\n  }\n\n  stimulus(grid, square_size: number, target?: number[], target_color?: string, labels?) {\n    var stimulus =\n      \"<div id='jspsych-serial-reaction-time-stimulus' style='margin:auto; display: table; table-layout: fixed; border-spacing:\" +\n      square_size / 4 +\n      \"px'>\";\n    for (var i = 0; i < grid.length; i++) {\n      stimulus +=\n        \"<div class='jspsych-serial-reaction-time-stimulus-row' style='display:table-row;'>\";\n      for (var j = 0; j < grid[i].length; j++) {\n        var classname = \"jspsych-serial-reaction-time-stimulus-cell\";\n\n        stimulus +=\n          \"<div class='\" +\n          classname +\n          \"' id='jspsych-serial-reaction-time-stimulus-cell-\" +\n          i +\n          \"-\" +\n          j +\n          \"' \" +\n          \"data-row=\" +\n          i +\n          \" data-column=\" +\n          j +\n          \" \" +\n          \"style='width:\" +\n          square_size +\n          \"px; height:\" +\n          square_size +\n          \"px; display:table-cell; vertical-align:middle; text-align: center; cursor: pointer; font-size:\" +\n          square_size / 2 +\n          \"px;\";\n        if (grid[i][j] == 1) {\n          stimulus += \"border: 2px solid black;\";\n        }\n        if (typeof target !== \"undefined\" && target[0] == i && target[1] == j) {\n          stimulus += \"background-color: \" + target_color + \";\";\n        }\n        stimulus += \"'>\";\n        if (typeof labels !== \"undefined\" && labels[i][j] !== false) {\n          stimulus += labels[i][j];\n        }\n        stimulus += \"</div>\";\n      }\n      stimulus += \"</div>\";\n    }\n    stimulus += \"</div>\";\n\n    return stimulus;\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    let response = this.jsPsych.utils.deepCopy(trial.target);\n    if (trial.allow_nontarget_responses && this.jsPsych.randomization.sampleBernoulli(0.8) !== 1) {\n      while (response[0] == trial.target[0] && response[1] == trial.target[1]) {\n        response[0] == this.jsPsych.randomization.randomInt(0, trial.grid.length);\n        //@ts-ignore array typing is not quite right\n        response[1] == this.jsPsych.randomization.randomInt(0, trial.grid[response[0]].length);\n      }\n    }\n\n    const default_data = {\n      grid: trial.grid,\n      target: trial.target,\n      response: response,\n      rt:\n        trial.pre_target_duration +\n        this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      correct: response[0] == trial.target[0] && response[1] == trial.target[1],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      const target = display_element.querySelector(\n        `.jspsych-serial-reaction-time-stimulus-cell[data-row=\"${data.response[0]}\"][data-column=\"${data.response[1]}\"]`\n      );\n      this.jsPsych.pluginAPI.clickTarget(target, data.rt);\n    }\n  }\n}\n\nexport default SerialReactionTimeMousePlugin;\n"],"names":["info","version","ParameterType","SerialReactionTimeMousePlugin","jsPsych","display_element","trial","startTime","response","showTarget","resp_targets","i","e","after_response","endTrial","stimulus","trial_data","grid","square_size","target","target_color","labels","j","classname","simulation_mode","simulation_options","load_callback","default_data","data"],"mappings":"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"}