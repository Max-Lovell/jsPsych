var jsPsychHtmlKeyboardResponse = (function (a) {
  "use strict";
  var o = {
    name: "@jspsych/plugin-html-keyboard-response",
    version: "2.0.0",
    description: "jsPsych plugin for displaying a stimulus and getting a keyboard response",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-html-keyboard-response",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/html-keyboard-response",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const p = {
    name: "html-keyboard-response",
    version: o.version,
    parameters: {
      stimulus: { type: a.ParameterType.HTML_STRING, default: void 0 },
      choices: { type: a.ParameterType.KEYS, default: "ALL_KEYS" },
      prompt: { type: a.ParameterType.HTML_STRING, default: null },
      stimulus_duration: { type: a.ParameterType.INT, default: null },
      trial_duration: { type: a.ParameterType.INT, default: null },
      response_ends_trial: { type: a.ParameterType.BOOL, default: !0 },
    },
    data: {
      response: { type: a.ParameterType.STRING },
      rt: { type: a.ParameterType.INT },
      stimulus: { type: a.ParameterType.STRING },
    },
  };
  class n {
    constructor(e) {
      this.jsPsych = e;
    }
    trial(e, s) {
      var i = '<div id="jspsych-html-keyboard-response-stimulus">' + s.stimulus + "</div>";
      s.prompt !== null && (i += s.prompt), (e.innerHTML = i);
      var t = { rt: null, key: null };
      const r = () => {
        typeof u != "undefined" && this.jsPsych.pluginAPI.cancelKeyboardResponse(u);
        var l = { rt: t.rt, stimulus: s.stimulus, response: t.key };
        this.jsPsych.finishTrial(l);
      };
      var c = (l) => {
        (e.querySelector("#jspsych-html-keyboard-response-stimulus").className += " responded"),
          t.key == null && (t = l),
          s.response_ends_trial && r();
      };
      if (s.choices != "NO_KEYS")
        var u = this.jsPsych.pluginAPI.getKeyboardResponse({
          callback_function: c,
          valid_responses: s.choices,
          rt_method: "performance",
          persist: !1,
          allow_held_key: !1,
        });
      s.stimulus_duration !== null &&
        this.jsPsych.pluginAPI.setTimeout(() => {
          e.querySelector("#jspsych-html-keyboard-response-stimulus").style.visibility = "hidden";
        }, s.stimulus_duration),
        s.trial_duration !== null && this.jsPsych.pluginAPI.setTimeout(r, s.trial_duration);
    }
    simulate(e, s, i, t) {
      s == "data-only" && (t(), this.simulate_data_only(e, i)),
        s == "visual" && this.simulate_visual(e, i, t);
    }
    create_simulation_data(e, s) {
      const i = {
          stimulus: e.stimulus,
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0),
          response: this.jsPsych.pluginAPI.getValidKey(e.choices),
        },
        t = this.jsPsych.pluginAPI.mergeSimulationData(i, s);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(e, t), t;
    }
    simulate_data_only(e, s) {
      const i = this.create_simulation_data(e, s);
      this.jsPsych.finishTrial(i);
    }
    simulate_visual(e, s, i) {
      const t = this.create_simulation_data(e, s),
        r = this.jsPsych.getDisplayElement();
      this.trial(r, e), i(), t.rt !== null && this.jsPsych.pluginAPI.pressKey(t.response, t.rt);
    }
  }
  return (n.info = p), n;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
