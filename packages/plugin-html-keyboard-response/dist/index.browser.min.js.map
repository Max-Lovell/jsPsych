{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"html-keyboard-response\",\n  version: version,\n  parameters: {\n    /**\n     * The string to be displayed.\n     */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /**\n     * This array contains the key(s) that the participant is allowed to press in order to respond\n     * to the stimulus. Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) - see\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values this page}\n     * and\n     * {@link https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/ this page (event.key column)}\n     * for more examples. Any key presses that are not listed in the\n     * array will be ignored. The default value of `\"ALL_KEYS\"` means that all keys will be accepted as valid responses.\n     * Specifying `\"NO_KEYS\"` will mean that no responses are allowed.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /**\n     * This string can contain HTML markup. Any content here will be displayed below the stimulus.\n     * The intention is that it can be used to provide a reminder about the action the participant\n     * is supposed to take (e.g., which key to press).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /**\n     * How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus\n     * will be set to `hidden` after this time has elapsed. If this is null, then the stimulus will\n     * remain visible until the trial ends.\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /**\n     * How long to wait for the participant to make a response before ending the trial in milliseconds.\n     * If the participant fails to make a response before this timer is reached, the participant's response\n     * will be recorded as null for the trial and the trial will end. If the value of this parameter is null,\n     * then the trial will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /**\n     * If true, then the trial will end whenever the participant makes a response (assuming they make their\n     * response before the cutoff specified by the trial_duration parameter). If false, then the trial will\n     * continue until the value for trial_duration is reached. You can set this parameter to false to force\n     * the participant to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The HTML content that was displayed on the screen. */\n    stimulus: {\n      type: ParameterType.STRING,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays HTML content and records responses generated with the keyboard.\n * The stimulus can be displayed until a response is given, or for a pre-determined amount of time.\n * The trial can be ended automatically if the participant has failed to respond within a fixed length of time.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/html-keyboard-response/ html-keyboard-response plugin documentation on jspsych.org}\n */\nclass HtmlKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // draw\n    display_element.innerHTML = new_html;\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n}\n\nexport default HtmlKeyboardResponsePlugin;\n"],"names":["info","version","ParameterType","HtmlKeyboardResponsePlugin","jsPsych","display_element","trial","new_html","response","end_trial","keyboardListener","trial_data","after_response","simulation_mode","simulation_options","load_callback","default_data","data"],"mappings":"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"}