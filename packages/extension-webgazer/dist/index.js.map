{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychExtension, JsPsychExtensionInfo, ParameterType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\n// we have to add webgazer to the global window object because webgazer attaches itself to\n// the window when it loads\ndeclare global {\n  interface Window {\n    webgazer: any;\n  }\n}\n\ninterface InitializeParameters {\n  /**\n   * Whether to round WebGazer's predicted x, y coordinates to the nearest integer. Recommended\n   * to leave this as `true` because it saves significant space in the data object and the\n   * predictions aren't precise to the level of partial pixels.\n   * @default true\n   */\n  round_predictions: boolean;\n  /**\n   * Whether to initialize WebGazer automatically when the plugin loads. Leave this as `false`\n   * if you plan to initialize WebGazer later in the experiment using a plugin.\n   * @default false\n   */\n  auto_initialize: boolean;\n  /**\n   * The number of milliseconds between each sample. Note that this is only a request, and the\n   * actual interval will vary depending on processing time.\n   * @default 34\n   */\n  sampling_interval: number;\n  /**\n   * An instance of WebGazer. If left undefined then the global window.webgazer object will be used\n   * if it exists.\n   */\n  webgazer: any;\n}\n\ninterface OnStartParameters {\n  targets: Array<string>;\n}\n\n/**\n * https://www.jspsych.org/latest/extensions/webgazer/\n */\nclass WebGazerExtension implements JsPsychExtension {\n  static info: JsPsychExtensionInfo = {\n    name: \"webgazer\",\n    version: version,\n    data: {\n      /** An array of objects containing gaze data for the trial. Each object has an `x`, a `y`, and a `t` property. The `x` and\n       * `y` properties specify the gaze location in pixels and `t` specifies the time in milliseconds since the start of the trial.\n       */\n      webgazer_data: {\n        type: ParameterType.INT,\n        array: true,\n      },\n      /** An object contain the pixel coordinates of elements on the screen specified by the `.targets` parameter. Each key in this\n       * object will be a `selector` property, containing the CSS selector string used to find the element. The object corresponding\n       * to each key will contain `x` and `y` properties specifying the top-left corner of the object, `width` and `height` values,\n       * plus `top`, `bottom`, `left`, and `right` parameters which specify the [bounding rectangle](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) of the element.\n       */\n      webgazer_targets: {\n        type: ParameterType.COMPLEX,\n        nested: {\n          x: {\n            type: ParameterType.INT,\n          },\n          y: {\n            type: ParameterType.INT,\n          },\n          width: {\n            type: ParameterType.INT,\n          },\n          height: {\n            type: ParameterType.INT,\n          },\n          top: {\n            type: ParameterType.INT,\n          },\n          bottom: {\n            type: ParameterType.INT,\n          },\n          left: {\n            type: ParameterType.INT,\n          },\n          right: {\n            type: ParameterType.INT,\n          },\n        },\n      },\n    },\n  };\n\n  constructor(private jsPsych: JsPsych) {}\n\n  // private state for the extension\n  // extension authors can define public functions to interact\n  // with the state. recommend not exposing state directly\n  // so that state manipulations are checked.\n  private currentTrialData = [];\n  private currentTrialTargets = {};\n  private currentTrialSelectors: Array<string>;\n  private domObserver: MutationObserver;\n  private webgazer;\n  private initialized = false;\n  private currentTrialStart: number;\n  private activeTrial = false;\n  private sampling_interval: number;\n  private round_predictions: boolean;\n  private gazeInterval: ReturnType<typeof setInterval>;\n  private gazeUpdateCallbacks: Array<any>;\n  private currentGaze: Object;\n\n  initialize = ({\n    round_predictions = true,\n    auto_initialize = false,\n    sampling_interval = 34,\n    webgazer,\n  }: InitializeParameters): Promise<void> => {\n    // set initial state of the extension\n    this.round_predictions = round_predictions;\n    this.sampling_interval = sampling_interval;\n    this.gazeUpdateCallbacks = [];\n    this.domObserver = new MutationObserver(this.mutationObserverCallback);\n\n    return new Promise((resolve, reject) => {\n      if (typeof webgazer === \"undefined\") {\n        if (window.webgazer) {\n          this.webgazer = window.webgazer;\n        } else {\n          reject(\n            new Error(\n              \"Webgazer extension failed to initialize. webgazer.js not loaded. Load webgazer.js before calling initJsPsych()\"\n            )\n          );\n        }\n      } else {\n        this.webgazer = webgazer;\n      }\n\n      // sets up event handler for webgazer data\n      // this.webgazer.setGazeListener(this.handleGazeDataUpdate);\n\n      // default to threadedRidge regression\n      // NEVER MIND... kalman filter is too useful.\n      //state.webgazer.workerScriptURL = 'js/webgazer/ridgeWorker.mjs';\n      //state.webgazer.setRegression('threadedRidge');\n      //state.webgazer.applyKalmanFilter(false); // kalman filter doesn't seem to work yet with threadedridge.\n\n      // hide video by default\n      this.hideVideo();\n\n      // hide predictions by default\n      this.hidePredictions();\n\n      if (auto_initialize) {\n        // starts webgazer, and once it initializes we stop mouseCalibration and\n        // pause webgazer data.\n        this.webgazer\n          .begin()\n          .then(() => {\n            this.initialized = true;\n            this.stopMouseCalibration();\n            this.pause();\n            resolve();\n          })\n          .catch((error) => {\n            console.error(error);\n            reject(error);\n          });\n      } else {\n        resolve();\n      }\n    });\n  };\n\n  on_start = (params: OnStartParameters): void => {\n    this.currentTrialData = [];\n    this.currentTrialTargets = {};\n    this.currentTrialSelectors = params.targets;\n\n    this.domObserver.observe(this.jsPsych.getDisplayElement(), { childList: true });\n  };\n\n  on_load = () => {\n    // set current trial start time\n    this.currentTrialStart = performance.now();\n\n    // resume data collection\n    // state.webgazer.resume();\n\n    this.startSampleInterval();\n\n    // set internal flag\n    this.activeTrial = true;\n  };\n\n  on_finish = () => {\n    // pause the eye tracker\n    this.stopSampleInterval();\n\n    // stop watching the DOM\n    this.domObserver.disconnect();\n\n    // state.webgazer.pause();\n\n    // set internal flag\n    this.activeTrial = false;\n\n    // send back the gazeData\n    return {\n      webgazer_data: this.currentTrialData,\n      webgazer_targets: this.currentTrialTargets,\n    };\n  };\n\n  start = () => {\n    return new Promise<void>((resolve, reject) => {\n      if (typeof this.webgazer == \"undefined\") {\n        const error =\n          \"Failed to start webgazer. Things to check: Is webgazer.js loaded? Is the webgazer extension included in initJsPsych?\";\n        console.error(error);\n        reject(error);\n      }\n      this.webgazer\n        .begin()\n        .then(() => {\n          this.initialized = true;\n          this.stopMouseCalibration();\n          this.pause();\n          resolve();\n        })\n        .catch((error) => {\n          console.error(error);\n          reject(error);\n        });\n    });\n  };\n\n  startSampleInterval = (interval: number = this.sampling_interval) => {\n    this.gazeInterval = setInterval(() => {\n      this.webgazer.getCurrentPrediction().then(this.handleGazeDataUpdate);\n    }, interval);\n    // repeat the call here so that we get one immediate execution. above will not\n    // start until state.sampling_interval is reached the first time.\n    this.webgazer.getCurrentPrediction().then(this.handleGazeDataUpdate);\n  };\n\n  stopSampleInterval = () => {\n    clearInterval(this.gazeInterval);\n  };\n\n  isInitialized = () => {\n    return this.initialized;\n  };\n\n  faceDetected = () => {\n    return this.webgazer.getTracker().predictionReady;\n  };\n\n  showPredictions = () => {\n    this.webgazer.showPredictionPoints(true);\n  };\n\n  hidePredictions = () => {\n    this.webgazer.showPredictionPoints(false);\n  };\n\n  showVideo = () => {\n    this.webgazer.showVideo(true);\n    this.webgazer.showFaceOverlay(true);\n    this.webgazer.showFaceFeedbackBox(true);\n  };\n\n  hideVideo = () => {\n    this.webgazer.showVideo(false);\n    this.webgazer.showFaceOverlay(false);\n    this.webgazer.showFaceFeedbackBox(false);\n  };\n\n  resume = () => {\n    this.webgazer.resume();\n  };\n\n  pause = () => {\n    this.webgazer.pause();\n    // sometimes gaze dot will show and freeze after pause?\n    if (document.querySelector(\"#webgazerGazeDot\")) {\n      document.querySelector<HTMLElement>(\"#webgazerGazeDot\").style.display = \"none\";\n    }\n  };\n\n  resetCalibration = () => {\n    this.webgazer.clearData();\n  };\n\n  stopMouseCalibration = () => {\n    this.webgazer.removeMouseEventListeners();\n  };\n\n  startMouseCalibration = () => {\n    this.webgazer.addMouseEventListeners();\n  };\n\n  calibratePoint = (x: number, y: number) => {\n    this.webgazer.recordScreenPosition(x, y, \"click\");\n  };\n\n  setRegressionType = (regression_type) => {\n    var valid_regression_models = [\"ridge\", \"weightedRidge\", \"threadedRidge\"];\n    if (valid_regression_models.includes(regression_type)) {\n      this.webgazer.setRegression(regression_type);\n    } else {\n      console.warn(\n        \"Invalid regression_type parameter for webgazer.setRegressionType. Valid options are ridge, weightedRidge, and threadedRidge.\"\n      );\n    }\n  };\n\n  getCurrentPrediction = () => {\n    return this.webgazer.getCurrentPrediction();\n  };\n\n  onGazeUpdate = (callback) => {\n    this.gazeUpdateCallbacks.push(callback);\n    return () => {\n      this.gazeUpdateCallbacks = this.gazeUpdateCallbacks.filter((item) => {\n        return item !== callback;\n      });\n    };\n  };\n\n  private handleGazeDataUpdate = (gazeData, elapsedTime) => {\n    if (gazeData !== null) {\n      var d = {\n        x: this.round_predictions ? Math.round(gazeData.x) : gazeData.x,\n        y: this.round_predictions ? Math.round(gazeData.y) : gazeData.y,\n        t: gazeData.t,\n      };\n      if (this.activeTrial) {\n        //console.log(`handleUpdate: t = ${Math.round(gazeData.t)}, now = ${Math.round(performance.now())}`);\n        d.t = Math.round(gazeData.t - this.currentTrialStart);\n        this.currentTrialData.push(d); // add data to current trial's data\n      }\n      this.currentGaze = d;\n      for (var i = 0; i < this.gazeUpdateCallbacks.length; i++) {\n        this.gazeUpdateCallbacks[i](d);\n      }\n    } else {\n      this.currentGaze = null;\n    }\n  };\n\n  private mutationObserverCallback = (mutationsList, observer) => {\n    for (const selector of this.currentTrialSelectors) {\n      if (!this.currentTrialTargets[selector]) {\n        if (this.jsPsych.getDisplayElement().querySelector(selector)) {\n          var coords = this.jsPsych\n            .getDisplayElement()\n            .querySelector(selector)\n            .getBoundingClientRect();\n          this.currentTrialTargets[selector] = coords;\n        }\n      }\n    }\n  };\n}\n\nexport default WebGazerExtension;\n"],"names":["version"],"mappings":"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"}