{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychExtension, JsPsychExtensionInfo, ParameterType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\n// we have to add webgazer to the global window object because webgazer attaches itself to\n// the window when it loads\ndeclare global {\n  interface Window {\n    webgazer: any;\n  }\n}\n\ninterface InitializeParameters {\n  /**\n   * Whether to round WebGazer's predicted x, y coordinates to the nearest integer. Recommended\n   * to leave this as `true` because it saves significant space in the data object and the\n   * predictions aren't precise to the level of partial pixels.\n   * @default true\n   */\n  round_predictions: boolean;\n  /**\n   * Whether to initialize WebGazer automatically when the plugin loads. Leave this as `false`\n   * if you plan to initialize WebGazer later in the experiment using a plugin.\n   * @default false\n   */\n  auto_initialize: boolean;\n  /**\n   * The number of milliseconds between each sample. Note that this is only a request, and the\n   * actual interval will vary depending on processing time.\n   * @default 34\n   */\n  sampling_interval: number;\n  /**\n   * An instance of WebGazer. If left undefined then the global window.webgazer object will be used\n   * if it exists.\n   */\n  webgazer: any;\n}\n\ninterface OnStartParameters {\n  targets: Array<string>;\n}\n\n/**\n * https://www.jspsych.org/latest/extensions/webgazer/\n */\nclass WebGazerExtension implements JsPsychExtension {\n  static info: JsPsychExtensionInfo = {\n    name: \"webgazer\",\n    version: version,\n    data: {\n      /** An array of objects containing gaze data for the trial. Each object has an `x`, a `y`, and a `t` property. The `x` and\n       * `y` properties specify the gaze location in pixels and `t` specifies the time in milliseconds since the start of the trial.\n       */\n      webgazer_data: {\n        type: ParameterType.INT,\n        array: true,\n      },\n      /** An object contain the pixel coordinates of elements on the screen specified by the `.targets` parameter. Each key in this\n       * object will be a `selector` property, containing the CSS selector string used to find the element. The object corresponding\n       * to each key will contain `x` and `y` properties specifying the top-left corner of the object, `width` and `height` values,\n       * plus `top`, `bottom`, `left`, and `right` parameters which specify the [bounding rectangle](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) of the element.\n       */\n      webgazer_targets: {\n        type: ParameterType.COMPLEX,\n        nested: {\n          x: {\n            type: ParameterType.INT,\n          },\n          y: {\n            type: ParameterType.INT,\n          },\n          width: {\n            type: ParameterType.INT,\n          },\n          height: {\n            type: ParameterType.INT,\n          },\n          top: {\n            type: ParameterType.INT,\n          },\n          bottom: {\n            type: ParameterType.INT,\n          },\n          left: {\n            type: ParameterType.INT,\n          },\n          right: {\n            type: ParameterType.INT,\n          },\n        },\n      },\n    },\n  };\n\n  constructor(private jsPsych: JsPsych) {}\n\n  // private state for the extension\n  // extension authors can define public functions to interact\n  // with the state. recommend not exposing state directly\n  // so that state manipulations are checked.\n  private currentTrialData = [];\n  private currentTrialTargets = {};\n  private currentTrialSelectors: Array<string>;\n  private domObserver: MutationObserver;\n  private webgazer;\n  private initialized = false;\n  private currentTrialStart: number;\n  private activeTrial = false;\n  private sampling_interval: number;\n  private round_predictions: boolean;\n  private gazeInterval: ReturnType<typeof setInterval>;\n  private gazeUpdateCallbacks: Array<any>;\n  private currentGaze: Object;\n\n  initialize = ({\n    round_predictions = true,\n    auto_initialize = false,\n    sampling_interval = 34,\n    webgazer,\n  }: InitializeParameters): Promise<void> => {\n    // set initial state of the extension\n    this.round_predictions = round_predictions;\n    this.sampling_interval = sampling_interval;\n    this.gazeUpdateCallbacks = [];\n    this.domObserver = new MutationObserver(this.mutationObserverCallback);\n\n    return new Promise((resolve, reject) => {\n      if (typeof webgazer === \"undefined\") {\n        if (window.webgazer) {\n          this.webgazer = window.webgazer;\n        } else {\n          reject(\n            new Error(\n              \"Webgazer extension failed to initialize. webgazer.js not loaded. Load webgazer.js before calling initJsPsych()\"\n            )\n          );\n        }\n      } else {\n        this.webgazer = webgazer;\n      }\n\n      // sets up event handler for webgazer data\n      // this.webgazer.setGazeListener(this.handleGazeDataUpdate);\n\n      // default to threadedRidge regression\n      // NEVER MIND... kalman filter is too useful.\n      //state.webgazer.workerScriptURL = 'js/webgazer/ridgeWorker.mjs';\n      //state.webgazer.setRegression('threadedRidge');\n      //state.webgazer.applyKalmanFilter(false); // kalman filter doesn't seem to work yet with threadedridge.\n\n      // hide video by default\n      this.hideVideo();\n\n      // hide predictions by default\n      this.hidePredictions();\n\n      if (auto_initialize) {\n        // starts webgazer, and once it initializes we stop mouseCalibration and\n        // pause webgazer data.\n        this.webgazer\n          .begin()\n          .then(() => {\n            this.initialized = true;\n            this.stopMouseCalibration();\n            this.pause();\n            resolve();\n          })\n          .catch((error) => {\n            console.error(error);\n            reject(error);\n          });\n      } else {\n        resolve();\n      }\n    });\n  };\n\n  on_start = (params: OnStartParameters): void => {\n    this.currentTrialData = [];\n    this.currentTrialTargets = {};\n    this.currentTrialSelectors = params.targets;\n\n    this.domObserver.observe(this.jsPsych.getDisplayElement(), { childList: true });\n  };\n\n  on_load = () => {\n    // set current trial start time\n    this.currentTrialStart = performance.now();\n\n    // resume data collection\n    // state.webgazer.resume();\n\n    this.startSampleInterval();\n\n    // set internal flag\n    this.activeTrial = true;\n  };\n\n  on_finish = () => {\n    // pause the eye tracker\n    this.stopSampleInterval();\n\n    // stop watching the DOM\n    this.domObserver.disconnect();\n\n    // state.webgazer.pause();\n\n    // set internal flag\n    this.activeTrial = false;\n\n    // send back the gazeData\n    return {\n      webgazer_data: this.currentTrialData,\n      webgazer_targets: this.currentTrialTargets,\n    };\n  };\n\n  start = () => {\n    return new Promise<void>((resolve, reject) => {\n      if (typeof this.webgazer == \"undefined\") {\n        const error =\n          \"Failed to start webgazer. Things to check: Is webgazer.js loaded? Is the webgazer extension included in initJsPsych?\";\n        console.error(error);\n        reject(error);\n      }\n      this.webgazer\n        .begin()\n        .then(() => {\n          this.initialized = true;\n          this.stopMouseCalibration();\n          this.pause();\n          resolve();\n        })\n        .catch((error) => {\n          console.error(error);\n          reject(error);\n        });\n    });\n  };\n\n  startSampleInterval = (interval: number = this.sampling_interval) => {\n    this.gazeInterval = setInterval(() => {\n      this.webgazer.getCurrentPrediction().then(this.handleGazeDataUpdate);\n    }, interval);\n    // repeat the call here so that we get one immediate execution. above will not\n    // start until state.sampling_interval is reached the first time.\n    this.webgazer.getCurrentPrediction().then(this.handleGazeDataUpdate);\n  };\n\n  stopSampleInterval = () => {\n    clearInterval(this.gazeInterval);\n  };\n\n  isInitialized = () => {\n    return this.initialized;\n  };\n\n  faceDetected = () => {\n    return this.webgazer.getTracker().predictionReady;\n  };\n\n  showPredictions = () => {\n    this.webgazer.showPredictionPoints(true);\n  };\n\n  hidePredictions = () => {\n    this.webgazer.showPredictionPoints(false);\n  };\n\n  showVideo = () => {\n    this.webgazer.showVideo(true);\n    this.webgazer.showFaceOverlay(true);\n    this.webgazer.showFaceFeedbackBox(true);\n  };\n\n  hideVideo = () => {\n    this.webgazer.showVideo(false);\n    this.webgazer.showFaceOverlay(false);\n    this.webgazer.showFaceFeedbackBox(false);\n  };\n\n  resume = () => {\n    this.webgazer.resume();\n  };\n\n  pause = () => {\n    this.webgazer.pause();\n    // sometimes gaze dot will show and freeze after pause?\n    if (document.querySelector(\"#webgazerGazeDot\")) {\n      document.querySelector<HTMLElement>(\"#webgazerGazeDot\").style.display = \"none\";\n    }\n  };\n\n  resetCalibration = () => {\n    this.webgazer.clearData();\n  };\n\n  stopMouseCalibration = () => {\n    this.webgazer.removeMouseEventListeners();\n  };\n\n  startMouseCalibration = () => {\n    this.webgazer.addMouseEventListeners();\n  };\n\n  calibratePoint = (x: number, y: number) => {\n    this.webgazer.recordScreenPosition(x, y, \"click\");\n  };\n\n  setRegressionType = (regression_type) => {\n    var valid_regression_models = [\"ridge\", \"weightedRidge\", \"threadedRidge\"];\n    if (valid_regression_models.includes(regression_type)) {\n      this.webgazer.setRegression(regression_type);\n    } else {\n      console.warn(\n        \"Invalid regression_type parameter for webgazer.setRegressionType. Valid options are ridge, weightedRidge, and threadedRidge.\"\n      );\n    }\n  };\n\n  getCurrentPrediction = () => {\n    return this.webgazer.getCurrentPrediction();\n  };\n\n  onGazeUpdate = (callback) => {\n    this.gazeUpdateCallbacks.push(callback);\n    return () => {\n      this.gazeUpdateCallbacks = this.gazeUpdateCallbacks.filter((item) => {\n        return item !== callback;\n      });\n    };\n  };\n\n  private handleGazeDataUpdate = (gazeData, elapsedTime) => {\n    if (gazeData !== null) {\n      var d = {\n        x: this.round_predictions ? Math.round(gazeData.x) : gazeData.x,\n        y: this.round_predictions ? Math.round(gazeData.y) : gazeData.y,\n        t: gazeData.t,\n      };\n      if (this.activeTrial) {\n        //console.log(`handleUpdate: t = ${Math.round(gazeData.t)}, now = ${Math.round(performance.now())}`);\n        d.t = Math.round(gazeData.t - this.currentTrialStart);\n        this.currentTrialData.push(d); // add data to current trial's data\n      }\n      this.currentGaze = d;\n      for (var i = 0; i < this.gazeUpdateCallbacks.length; i++) {\n        this.gazeUpdateCallbacks[i](d);\n      }\n    } else {\n      this.currentGaze = null;\n    }\n  };\n\n  private mutationObserverCallback = (mutationsList, observer) => {\n    for (const selector of this.currentTrialSelectors) {\n      if (!this.currentTrialTargets[selector]) {\n        if (this.jsPsych.getDisplayElement().querySelector(selector)) {\n          var coords = this.jsPsych\n            .getDisplayElement()\n            .querySelector(selector)\n            .getBoundingClientRect();\n          this.currentTrialTargets[selector] = coords;\n        }\n      }\n    }\n  };\n}\n\nexport default WebGazerExtension;\n"],"names":["WebGazerExtension","jsPsych","round_predictions","auto_initialize","sampling_interval","webgazer","resolve","reject","error","params","interval","x","y","regression_type","valid_regression_models","callback","item","gazeData","elapsedTime","d","i","mutationsList","observer","selector","coords","version","ParameterType"],"mappings":"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"}