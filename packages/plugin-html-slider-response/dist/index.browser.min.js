var jsPsychHtmlSliderResponse = (function (r) {
  "use strict";
  var m = {
    name: "@jspsych/plugin-html-slider-response",
    version: "2.0.0",
    description: "a jspsych plugin for free response survey questions",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-html-slider-response",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/html-slider-response",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const c = {
    name: "html-slider-response",
    version: m.version,
    parameters: {
      stimulus: { type: r.ParameterType.HTML_STRING, default: void 0 },
      min: { type: r.ParameterType.INT, default: 0 },
      max: { type: r.ParameterType.INT, default: 100 },
      slider_start: { type: r.ParameterType.INT, default: 50 },
      step: { type: r.ParameterType.INT, default: 1 },
      labels: { type: r.ParameterType.HTML_STRING, default: [], array: !0 },
      slider_width: { type: r.ParameterType.INT, default: null },
      button_label: { type: r.ParameterType.STRING, default: "Continue", array: !1 },
      require_movement: { type: r.ParameterType.BOOL, default: !1 },
      prompt: { type: r.ParameterType.HTML_STRING, default: null },
      stimulus_duration: { type: r.ParameterType.INT, default: null },
      trial_duration: { type: r.ParameterType.INT, default: null },
      response_ends_trial: { type: r.ParameterType.BOOL, default: !0 },
    },
    data: {
      rt: { type: r.ParameterType.INT },
      response: { type: r.ParameterType.INT },
      stimulus: { type: r.ParameterType.HTML_STRING },
      slider_start: { type: r.ParameterType.INT },
    },
  };
  class p {
    constructor(t) {
      this.jsPsych = t;
    }
    trial(t, e) {
      var i = 7.5,
        s = '<div id="jspsych-html-slider-response-wrapper" style="margin: 100px 0px;">';
      (s += '<div id="jspsych-html-slider-response-stimulus">' + e.stimulus + "</div>"),
        (s +=
          '<div class="jspsych-html-slider-response-container" style="position:relative; margin: 0 auto 3em auto; '),
        e.slider_width !== null ? (s += "width:" + e.slider_width + "px;") : (s += "width:auto;"),
        (s += '">'),
        (s +=
          '<input type="range" class="jspsych-slider" value="' +
          e.slider_start +
          '" min="' +
          e.min +
          '" max="' +
          e.max +
          '" step="' +
          e.step +
          '" id="jspsych-html-slider-response-response"></input>'),
        (s += "<div>");
      for (var l = 0; l < e.labels.length; l++) {
        var n = 100 / (e.labels.length - 1),
          o = l * (100 / (e.labels.length - 1)),
          y = ((o - 50) / 50) * 100,
          h = (y * i) / 100;
        (s +=
          '<div style="border: 1px solid transparent; display: inline-block; position: absolute; left:calc(' +
          o +
          "% - (" +
          n +
          "% / 2) - " +
          h +
          "px); text-align: center; width: " +
          n +
          '%;">'),
          (s += '<span style="text-align: center; font-size: 80%;">' + e.labels[l] + "</span>"),
          (s += "</div>");
      }
      (s += "</div>"),
        (s += "</div>"),
        (s += "</div>"),
        e.prompt !== null && (s += e.prompt),
        (s +=
          '<button id="jspsych-html-slider-response-next" class="jspsych-btn" ' +
          (e.require_movement ? "disabled" : "") +
          ">" +
          e.button_label +
          "</button>"),
        (t.innerHTML = s);
      var u = { rt: null, response: null };
      if (e.require_movement) {
        const a = () => {
          t.querySelector("#jspsych-html-slider-response-next").disabled = !1;
        };
        t.querySelector("#jspsych-html-slider-response-response").addEventListener("mousedown", a),
          t
            .querySelector("#jspsych-html-slider-response-response")
            .addEventListener("touchstart", a),
          t.querySelector("#jspsych-html-slider-response-response").addEventListener("change", a);
      }
      const d = () => {
        var a = {
          rt: u.rt,
          stimulus: e.stimulus,
          slider_start: e.slider_start,
          response: u.response,
        };
        this.jsPsych.finishTrial(a);
      };
      t.querySelector("#jspsych-html-slider-response-next").addEventListener("click", () => {
        var a = performance.now();
        (u.rt = Math.round(a - T)),
          (u.response = t.querySelector("#jspsych-html-slider-response-response").valueAsNumber),
          e.response_ends_trial
            ? d()
            : (t.querySelector("#jspsych-html-slider-response-next").disabled = !0);
      }),
        e.stimulus_duration !== null &&
          this.jsPsych.pluginAPI.setTimeout(() => {
            t.querySelector("#jspsych-html-slider-response-stimulus").style.visibility = "hidden";
          }, e.stimulus_duration),
        e.trial_duration !== null && this.jsPsych.pluginAPI.setTimeout(d, e.trial_duration);
      var T = performance.now();
    }
    simulate(t, e, i, s) {
      e == "data-only" && (s(), this.simulate_data_only(t, i)),
        e == "visual" && this.simulate_visual(t, i, s);
    }
    create_simulation_data(t, e) {
      const i = {
          stimulus: t.stimulus,
          slider_start: t.slider_start,
          response: this.jsPsych.randomization.randomInt(t.min, t.max),
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0),
        },
        s = this.jsPsych.pluginAPI.mergeSimulationData(i, e);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(t, s), s;
    }
    simulate_data_only(t, e) {
      const i = this.create_simulation_data(t, e);
      this.jsPsych.finishTrial(i);
    }
    simulate_visual(t, e, i) {
      const s = this.create_simulation_data(t, e),
        l = this.jsPsych.getDisplayElement();
      if ((this.trial(l, t), i(), s.rt !== null)) {
        const n = l.querySelector("input[type='range']");
        setTimeout(() => {
          this.jsPsych.pluginAPI.clickTarget(n), (n.valueAsNumber = s.response);
        }, s.rt / 2),
          this.jsPsych.pluginAPI.clickTarget(l.querySelector("button"), s.rt);
      }
    }
  }
  return (p.info = c), p;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
