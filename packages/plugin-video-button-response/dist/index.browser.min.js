var jsPsychVideoButtonResponse = (function (n) {
  "use strict";
  var b = {
    name: "@jspsych/plugin-video-button-response",
    version: "2.0.0",
    description: "jsPsych plugin for playing a video file and getting a button response",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest --passWithNoTests",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-video-button-response",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/video-button-response",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const T = {
    name: "video-button-response",
    version: b.version,
    parameters: {
      stimulus: { type: n.ParameterType.VIDEO, default: void 0, array: !0 },
      choices: { type: n.ParameterType.STRING, default: void 0, array: !0 },
      button_html: {
        type: n.ParameterType.FUNCTION,
        default: function (_, a) {
          return `<button class="jspsych-btn">${_}</button>`;
        },
      },
      prompt: { type: n.ParameterType.HTML_STRING, default: null },
      width: { type: n.ParameterType.INT, default: "" },
      height: { type: n.ParameterType.INT, default: "" },
      autoplay: { type: n.ParameterType.BOOL, pretty_name: "Autoplay", default: !0 },
      controls: { type: n.ParameterType.BOOL, default: !1 },
      start: { type: n.ParameterType.FLOAT, default: null },
      stop: { type: n.ParameterType.FLOAT, default: null },
      rate: { type: n.ParameterType.FLOAT, default: 1 },
      trial_ends_after_video: { type: n.ParameterType.BOOL, default: !1 },
      trial_duration: { type: n.ParameterType.INT, default: null },
      button_layout: { type: n.ParameterType.STRING, default: "grid" },
      grid_rows: { type: n.ParameterType.INT, default: 1 },
      grid_columns: { type: n.ParameterType.INT, default: null },
      response_ends_trial: { type: n.ParameterType.BOOL, default: !0 },
      response_allowed_while_playing: { type: n.ParameterType.BOOL, default: !0 },
      enable_button_after: { type: n.ParameterType.INT, default: 0 },
    },
    data: {
      response: { type: n.ParameterType.INT },
      rt: { type: n.ParameterType.INT },
      stimulus: { type: n.ParameterType.STRING, array: !0 },
    },
  };
  class h {
    constructor(a) {
      this.jsPsych = a;
    }
    trial(a, t) {
      const r = document.createElement("div");
      a.appendChild(r);
      const e = document.createElement("video");
      r.appendChild(e),
        (e.id = "jspsych-video-button-response-stimulus"),
        t.width && (e.width = t.width),
        t.height && (e.height = t.height),
        (e.controls = t.controls),
        (e.autoplay = t.autoplay && t.start == null),
        t.start !== null && (e.style.visibility = "hidden");
      const u = this.jsPsych.pluginAPI.getVideoBuffer(t.stimulus[0]);
      if (!u)
        for (let s of t.stimulus) {
          s.indexOf("?") > -1 && (s = s.substring(0, s.indexOf("?")));
          const o = s.substring(s.lastIndexOf(".") + 1).toLowerCase();
          o === "mov" &&
            console.warn(
              "Warning: video-button-response plugin does not reliably support .mov files."
            );
          const l = document.createElement("source");
          (l.src = s), (l.type = "video/" + o), e.appendChild(l);
        }
      const i = document.createElement("div");
      if (((i.id = "jspsych-video-button-response-btngroup"), t.button_layout === "grid")) {
        if (
          (i.classList.add("jspsych-btn-group-grid"),
          t.grid_rows === null && t.grid_columns === null)
        )
          throw new Error(
            "You cannot set `grid_rows` to `null` without providing a value for `grid_columns`."
          );
        const s =
            t.grid_columns === null ? Math.ceil(t.choices.length / t.grid_rows) : t.grid_columns,
          o = t.grid_rows === null ? Math.ceil(t.choices.length / t.grid_columns) : t.grid_rows;
        (i.style.gridTemplateColumns = `repeat(${s}, 1fr)`),
          (i.style.gridTemplateRows = `repeat(${o}, 1fr)`);
      } else t.button_layout === "flex" && i.classList.add("jspsych-btn-group-flex");
      for (const [s, o] of t.choices.entries()) {
        i.insertAdjacentHTML("beforeend", t.button_html(o, s));
        const l = i.lastChild;
        (l.dataset.choice = s.toString()),
          l.addEventListener("click", () => {
            P(s);
          });
      }
      a.appendChild(i), t.prompt !== null && a.insertAdjacentHTML("beforeend", t.prompt);
      var d = performance.now();
      u && (e.src = u),
        (e.onended = () => {
          t.trial_ends_after_video ? c() : t.response_allowed_while_playing || y();
        }),
        (e.playbackRate = t.rate),
        t.start !== null &&
          (e.pause(),
          (e.onseeked = () => {
            (e.style.visibility = "visible"),
              (e.muted = !1),
              t.autoplay ? e.play() : e.pause(),
              (e.onseeked = () => {});
          }),
          (e.onplaying = () => {
            (e.currentTime = t.start), (e.onplaying = () => {});
          }),
          (e.muted = !0),
          e.play());
      let g = !1;
      t.stop !== null &&
        e.addEventListener("timeupdate", (s) => {
          e.currentTime >= t.stop &&
            (t.response_allowed_while_playing ||
              (t.enable_button_after > 0 ? f(t.enable_button_after) : y()),
            e.pause(),
            t.trial_ends_after_video && !g && ((g = !0), c()));
        });
      const f = (s) => {
        this.jsPsych.pluginAPI.setTimeout(y, s);
      };
      t.response_allowed_while_playing
        ? (m(), t.enable_button_after > 0 ? f(t.enable_button_after) : y())
        : m();
      var p = { rt: null, button: null };
      const c = () => {
        e.pause(), (e.onended = () => {});
        const s = { rt: p.rt, stimulus: t.stimulus, response: p.button };
        this.jsPsych.finishTrial(s);
      };
      function P(s) {
        var o = performance.now(),
          l = Math.round(o - d);
        (p.button = s), (p.rt = l), e.classList.add("responded"), m(), t.response_ends_trial && c();
      }
      function m() {
        for (const s of i.children) s.setAttribute("disabled", "disabled");
      }
      function y() {
        for (const s of i.children) s.removeAttribute("disabled");
      }
      t.trial_duration !== null && this.jsPsych.pluginAPI.setTimeout(c, t.trial_duration);
    }
    simulate(a, t, r, e) {
      t == "data-only" && (e(), this.simulate_data_only(a, r)),
        t == "visual" && this.simulate_visual(a, r, e);
    }
    create_simulation_data(a, t) {
      const r = {
          stimulus: a.stimulus,
          rt:
            this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0) +
            a.enable_button_after,
          response: this.jsPsych.randomization.randomInt(0, a.choices.length - 1),
        },
        e = this.jsPsych.pluginAPI.mergeSimulationData(r, t);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(a, e), e;
    }
    simulate_data_only(a, t) {
      const r = this.create_simulation_data(a, t);
      this.jsPsych.finishTrial(r);
    }
    simulate_visual(a, t, r) {
      const e = this.create_simulation_data(a, t),
        u = this.jsPsych.getDisplayElement();
      this.trial(u, a), r();
      const i = u.querySelector("#jspsych-video-button-response-stimulus"),
        d = () => {
          e.rt !== null &&
            this.jsPsych.pluginAPI.clickTarget(
              u.querySelector(
                `#jspsych-video-button-response-btngroup [data-choice="${e.response}"]`
              ),
              e.rt
            );
        };
      a.response_allowed_while_playing ? d() : i.addEventListener("ended", d);
    }
  }
  return (h.info = T), h;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
