{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"video-button-response\",\n  version: version,\n  parameters: {\n    /**\n     * An array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm)\n     * to maximize the [cross-browser compatibility](https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats).\n     * Usually .mp4 is a safe cross-browser option. The plugin does not reliably support .mov files. The player will use the\n     * first source file in the array that is compatible with the browser, so specify the files in order of preference.\n     */\n    stimulus: {\n      type: ParameterType.VIDEO,\n      default: undefined,\n      array: true,\n    },\n    /**\n     * Labels for the buttons. Each different string in the array will generate a different button.\n     */\n    choices: {\n      type: ParameterType.STRING,\n      default: undefined,\n      array: true,\n    },\n    /**\n     *  A function that generates the HTML for each button in the `choices` array. The function gets the string and index\n     * of the item in the `choices` array and should return valid HTML. If you want to use different markup for each\n     * button, you can do that by using a conditional on either parameter. The default parameter returns a button element\n     * with the text label of the choice.\n     */\n    button_html: {\n      type: ParameterType.FUNCTION,\n      default: function (choice: string, choice_index: number) {\n        return `<button class=\"jspsych-btn\">${choice}</button>`;\n      },\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is\n     * that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which\n     * key to press).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** The width of the video display in pixels. */\n    width: {\n      type: ParameterType.INT,\n      default: \"\",\n    },\n    /** The height of the video display in pixels. */\n    height: {\n      type: ParameterType.INT,\n      default: \"\",\n    },\n    /** If true, the video will begin playing as soon as it has loaded. */\n    autoplay: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Autoplay\",\n      default: true,\n    },\n    /** If true, controls for the video player will be available to the participant. They will be able to pause\n     * the video or move the playback to any point in the video.\n     */\n    controls: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Time to start the clip. If null (default), video will start at the beginning of the file. */\n    start: {\n      type: ParameterType.FLOAT,\n      default: null,\n    },\n    /** Time to stop the clip. If null (default), video will stop at the end of the file. */\n    stop: {\n      type: ParameterType.FLOAT,\n      default: null,\n    },\n    /** The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. */\n    rate: {\n      type: ParameterType.FLOAT,\n      default: 1,\n    },\n    /** If true, the trial will end immediately after the video finishes playing. */\n    trial_ends_after_video: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the\n     * participant fails to make a response before this timer is reached, the participant's response will be\n     * recorded as null for the trial and the trial will end. If the value of this parameter is null, then the\n     * trial will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Setting to `'grid'` will make the container element have the CSS property `display: grid` and enable the\n     * use of `grid_rows` and `grid_columns`. Setting to `'flex'` will make the container element have the CSS\n     * property `display: flex`. You can customize how the buttons are laid out by adding inline CSS in the\n     * `button_html` parameter.\n     */\n    button_layout: {\n      type: ParameterType.STRING,\n      default: \"grid\",\n    },\n    /**\n     * The number of rows in the button grid. Only applicable when `button_layout` is set to `'grid'`. If null,\n     * the number of rows will be determined automatically based on the number of buttons and the number of columns.\n     */\n    grid_rows: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /** The number of grid columns when `button_layout` is \"grid\".\n     * Setting to `null` (default value) will infer the number of columns\n     * based on the number of rows and buttons. */\n    grid_columns: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their response\n     * before the cutoff specified by the `trial_duration` parameter). If false, then the trial will continue until\n     * the value for `trial_duration` is reached. You can set this parameter to `false` to force the participant\n     * to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** If true, then responses are allowed while the video is playing. If false, then the video must finish\n     * playing before the button choices are enabled and a response is accepted. Once the video has played\n     * all the way through, the buttons are enabled and a response is allowed (including while the video is\n     * being re-played via on-screen playback controls).\n     */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** How long the button will delay enabling in milliseconds. If `response_allowed_while_playing` is `true`,\n     * the timer will start immediately. If it is `false`, the timer will start at the end of the video.\n     */\n    enable_button_after: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n  },\n  data: {\n    /** Indicates which button the participant pressed. The first button in the `choices` array is 0, the second is 1, and so on.  */\n    response: {\n      type: ParameterType.INT,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The `stimulus` array. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    stimulus: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin plays a video and records responses generated by button click. The stimulus can be displayed until a response is given,\n * or for a pre-determined amount of time. The trial can be ended automatically when the participant responds, when the video file has\n * finished playing, or if the participant has failed to respond within a fixed length of time. You can also prevent a button response\n * from being made before the video has finished playing. The button itself can be customized using HTML formatting.\n *\n * Video files can be automatically preloaded by jsPsych using the [`preload` plugin](preload.md). However, if you are using\n * timeline variables or another dynamic method to specify the video stimulus, you will need to\n * [manually preload](../overview/media-preloading.md#manual-preloading) the videos.\n * Also note that video preloading is disabled when the experiment is running as a file (i.e. opened directly in the browser,\n * rather than through a server), in order to prevent CORS errors - see the section on [Running Experiments](../overview/running-experiments.md) for more information.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/video-button-response/ video-button-response plugin documentation on jspsych.org}\n */\nclass VideoButtonResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // Setup stimulus\n    const stimulusWrapper = document.createElement(\"div\");\n    display_element.appendChild(stimulusWrapper);\n\n    const videoElement = document.createElement(\"video\");\n    stimulusWrapper.appendChild(videoElement);\n    videoElement.id = \"jspsych-video-button-response-stimulus\";\n\n    if (trial.width) {\n      videoElement.width = trial.width;\n    }\n    if (trial.height) {\n      videoElement.height = trial.height;\n    }\n\n    videoElement.controls = trial.controls;\n\n    // if autoplay is true and the start time is specified, then the video will start automatically\n    // via the play() method, rather than the autoplay attribute, to prevent showing the first frame\n    videoElement.autoplay = trial.autoplay && trial.start == null;\n\n    if (trial.start !== null) {\n      // hide video element when page loads if the start time is specified,\n      // to prevent the video element from showing the first frame\n      videoElement.style.visibility = \"hidden\";\n    }\n\n    const videoPreloadBlob = this.jsPsych.pluginAPI.getVideoBuffer(trial.stimulus[0]);\n    if (!videoPreloadBlob) {\n      for (let filename of trial.stimulus) {\n        if (filename.indexOf(\"?\") > -1) {\n          filename = filename.substring(0, filename.indexOf(\"?\"));\n        }\n        const type = filename.substring(filename.lastIndexOf(\".\") + 1).toLowerCase();\n        if (type === \"mov\") {\n          console.warn(\n            \"Warning: video-button-response plugin does not reliably support .mov files.\"\n          );\n        }\n\n        const sourceElement = document.createElement(\"source\");\n        sourceElement.src = filename;\n        sourceElement.type = \"video/\" + type;\n        videoElement.appendChild(sourceElement);\n      }\n    }\n\n    // Display buttons\n    const buttonGroupElement = document.createElement(\"div\");\n    buttonGroupElement.id = \"jspsych-video-button-response-btngroup\";\n    if (trial.button_layout === \"grid\") {\n      buttonGroupElement.classList.add(\"jspsych-btn-group-grid\");\n      if (trial.grid_rows === null && trial.grid_columns === null) {\n        throw new Error(\n          \"You cannot set `grid_rows` to `null` without providing a value for `grid_columns`.\"\n        );\n      }\n      const n_cols =\n        trial.grid_columns === null\n          ? Math.ceil(trial.choices.length / trial.grid_rows)\n          : trial.grid_columns;\n      const n_rows =\n        trial.grid_rows === null\n          ? Math.ceil(trial.choices.length / trial.grid_columns)\n          : trial.grid_rows;\n      buttonGroupElement.style.gridTemplateColumns = `repeat(${n_cols}, 1fr)`;\n      buttonGroupElement.style.gridTemplateRows = `repeat(${n_rows}, 1fr)`;\n    } else if (trial.button_layout === \"flex\") {\n      buttonGroupElement.classList.add(\"jspsych-btn-group-flex\");\n    }\n\n    for (const [choiceIndex, choice] of trial.choices.entries()) {\n      buttonGroupElement.insertAdjacentHTML(\"beforeend\", trial.button_html(choice, choiceIndex));\n      const buttonElement = buttonGroupElement.lastChild as HTMLElement;\n      buttonElement.dataset.choice = choiceIndex.toString();\n      buttonElement.addEventListener(\"click\", () => {\n        after_response(choiceIndex);\n      });\n    }\n\n    display_element.appendChild(buttonGroupElement);\n\n    // Show prompt if there is one\n    if (trial.prompt !== null) {\n      display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n    }\n\n    var start_time = performance.now();\n\n    if (videoPreloadBlob) {\n      videoElement.src = videoPreloadBlob;\n    }\n\n    videoElement.onended = () => {\n      if (trial.trial_ends_after_video) {\n        end_trial();\n      } else if (!trial.response_allowed_while_playing) {\n        enable_buttons();\n      }\n    };\n\n    videoElement.playbackRate = trial.rate;\n\n    // if video start time is specified, hide the video and set the starting time\n    // before showing and playing, so that the video doesn't automatically show the first frame\n    if (trial.start !== null) {\n      videoElement.pause();\n      videoElement.onseeked = () => {\n        videoElement.style.visibility = \"visible\";\n        videoElement.muted = false;\n        if (trial.autoplay) {\n          videoElement.play();\n        } else {\n          videoElement.pause();\n        }\n        videoElement.onseeked = () => {};\n      };\n      videoElement.onplaying = () => {\n        videoElement.currentTime = trial.start;\n        videoElement.onplaying = () => {};\n      };\n      // fix for iOS/MacOS browsers: videos aren't seekable until they start playing, so need to hide/mute, play,\n      // change current time, then show/unmute\n      videoElement.muted = true;\n      videoElement.play();\n    }\n\n    let stopped = false;\n    if (trial.stop !== null) {\n      videoElement.addEventListener(\"timeupdate\", (e) => {\n        if (videoElement.currentTime >= trial.stop) {\n          if (!trial.response_allowed_while_playing) {\n            if (trial.enable_button_after > 0) {\n              enable_buttons_delayed(trial.enable_button_after);\n            } else {\n              enable_buttons();\n            }\n          }\n          videoElement.pause();\n          if (trial.trial_ends_after_video && !stopped) {\n            // this is to prevent end_trial from being called twice, because the timeupdate event\n            // can fire in quick succession\n            stopped = true;\n            end_trial();\n          }\n        }\n      });\n    }\n\n    const enable_buttons_delayed = (delay: number) => {\n      this.jsPsych.pluginAPI.setTimeout(enable_buttons, delay);\n    };\n\n    if (trial.response_allowed_while_playing) {\n      disable_buttons();\n      if (trial.enable_button_after > 0) {\n        enable_buttons_delayed(trial.enable_button_after);\n      } else {\n        enable_buttons();\n      }\n    } else {\n      disable_buttons();\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // stop the video file if it is playing\n      // remove any remaining end event handlers\n      videoElement.pause();\n      videoElement.onended = () => {};\n\n      // gather the data to store for the trial\n      const trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.button,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice: number) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = choice;\n      response.rt = rt;\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      videoElement.classList.add(\"responded\");\n\n      // disable all the buttons after a response\n      disable_buttons();\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    function disable_buttons() {\n      for (const button of buttonGroupElement.children) {\n        button.setAttribute(\"disabled\", \"disabled\");\n      }\n    }\n\n    function enable_buttons() {\n      for (const button of buttonGroupElement.children) {\n        button.removeAttribute(\"disabled\");\n      }\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt:\n        this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true) +\n        trial.enable_button_after,\n      response: this.jsPsych.randomization.randomInt(0, trial.choices.length - 1),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-button-response-stimulus\"\n    );\n\n    const respond = () => {\n      if (data.rt !== null) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\n            `#jspsych-video-button-response-btngroup [data-choice=\"${data.response}\"]`\n          ),\n          data.rt\n        );\n      }\n    };\n\n    if (!trial.response_allowed_while_playing) {\n      video_element.addEventListener(\"ended\", respond);\n    } else {\n      respond();\n    }\n  }\n}\n\nexport default VideoButtonResponsePlugin;\n"],"names":["version","ParameterType"],"mappings":"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"}