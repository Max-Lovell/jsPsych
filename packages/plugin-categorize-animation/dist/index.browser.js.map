{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"categorize-animation\",\n  version: version,\n  parameters: {\n    /** Each element of the array is a path to an image file. */\n    stimuli: {\n      type: ParameterType.IMAGE,\n      default: undefined,\n      array: true,\n    },\n    /** The key character indicating the correct response. */\n    key_answer: {\n      type: ParameterType.KEY,\n      default: undefined,\n    },\n    /** This array contains the key(s) that the participant is allowed to press in order to respond to the stimulus. Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) - see [this page](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values) and [this page (event.key column)](https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/) for more examples. Any key presses that are not listed in the array will be ignored. The default value of `\"ALL_KEYS\"` means that all keys will be accepted as valid responses. Specifying `\"NO_KEYS\"` will mean that no responses are allowed. */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /** A text label that describes the correct answer. Used in conjunction with the `correct_text` and `incorrect_text` parameters. */\n    text_answer: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** String to show when the correct answer is given. Can contain HTML formatting. The special string `%ANS%` can be used within the string. If present, the plugin will put the `text_answer` for the trial in place of the %ANS% string (see example below). */\n    correct_text: {\n      type: ParameterType.HTML_STRING,\n      default: \"Correct.\",\n    },\n    /** String to show when the wrong answer is given. Can contain HTML formatting. The special string `%ANS%` can be used within the string. If present, the plugin will put the `text_answer` for the trial in place of the %ANS% string (see example below). */\n    incorrect_text: {\n      type: ParameterType.HTML_STRING,\n      default: \"Wrong.\",\n    },\n    /** How long to display each image (in milliseconds). */\n    frame_time: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /** How many times to show the entire sequence. */\n    sequence_reps: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /** If true, the participant can respond before the animation sequence finishes. */\n    allow_response_before_complete: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** How long to show the feedback (milliseconds). */\n    feedback_duration: {\n      type: ParameterType.INT,\n      default: 2000,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus or the end of the animation depending on the allow_response_before_complete parameter. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /**\n     * If true, the images will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive images in some browsers, like Firefox and Edge.\n     * If false, the image will be shown via an img element, as in previous versions of jsPsych.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** Array of stimuli displayed in the trial. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    stimulus: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n    /** Indicates which key the participant pressed.  */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** `true` if the participant got the correct answer, `false` otherwise. */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The categorize animation plugin shows a sequence of images at a specified frame rate. The participant responds by pressing a key. Feedback indicating the correctness of the response is given.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/categorize-animation/ categorize-animation plugin documentation on jspsych.org}\n */\nclass CategorizeAnimationPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var animate_frame = 0;\n    var reps = 0;\n\n    var showAnimation = true;\n\n    var responded = false;\n    var timeoutSet = false;\n    var correct;\n\n    if (trial.render_on_canvas) {\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      var canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-categorize-animation-stimulus\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      display_element.insertBefore(canvas, null);\n      var ctx = canvas.getContext(\"2d\");\n      if (trial.prompt !== null) {\n        var prompt_div = document.createElement(\"div\");\n        prompt_div.id = \"jspsych-categorize-animation-prompt\";\n        prompt_div.style.visibility = \"hidden\";\n        prompt_div.innerHTML = trial.prompt;\n        display_element.insertBefore(prompt_div, canvas.nextElementSibling);\n      }\n      var feedback_div = document.createElement(\"div\");\n      display_element.insertBefore(feedback_div, display_element.nextElementSibling);\n    }\n\n    const update_display = () => {\n      if (showAnimation) {\n        if (trial.render_on_canvas) {\n          display_element.querySelector<HTMLElement>(\n            \"#jspsych-categorize-animation-stimulus\"\n          ).style.visibility = \"visible\";\n          var img = new Image();\n          img.src = trial.stimuli[animate_frame];\n          canvas.height = img.naturalHeight;\n          canvas.width = img.naturalWidth;\n          ctx.drawImage(img, 0, 0);\n        } else {\n          display_element.innerHTML +=\n            '<img src=\"' +\n            trial.stimuli[animate_frame] +\n            '\" class=\"jspsych-categorize-animation-stimulus\"></img>';\n        }\n      }\n\n      if (!responded && trial.allow_response_before_complete) {\n        // in here if the user can respond before the animation is done\n        if (trial.prompt !== null) {\n          if (trial.render_on_canvas) {\n            prompt_div.style.visibility = \"visible\";\n          } else {\n            display_element.innerHTML += trial.prompt;\n          }\n        }\n        if (trial.render_on_canvas) {\n          if (!showAnimation) {\n            canvas.remove();\n          }\n        }\n      } else if (!responded) {\n        // in here if the user has to wait to respond until animation is done.\n        // if this is the case, don't show the prompt until the animation is over.\n        if (!showAnimation) {\n          if (trial.prompt !== null) {\n            if (trial.render_on_canvas) {\n              prompt_div.style.visibility = \"visible\";\n            } else {\n              display_element.innerHTML += trial.prompt;\n            }\n          }\n          if (trial.render_on_canvas) {\n            canvas.remove();\n          }\n        }\n      } else {\n        // user has responded if we get here.\n\n        // show feedback\n        var feedback_text = \"\";\n        if (correct) {\n          feedback_text = trial.correct_text.replace(\"%ANS%\", trial.text_answer);\n        } else {\n          feedback_text = trial.incorrect_text.replace(\"%ANS%\", trial.text_answer);\n        }\n        if (trial.render_on_canvas) {\n          if (trial.prompt !== null) {\n            prompt_div.remove();\n          }\n          feedback_div.innerHTML = feedback_text;\n        } else {\n          display_element.innerHTML += feedback_text;\n        }\n\n        // set timeout to clear feedback\n        if (!timeoutSet) {\n          timeoutSet = true;\n          this.jsPsych.pluginAPI.setTimeout(() => {\n            endTrial();\n          }, trial.feedback_duration);\n        }\n      }\n    };\n\n    // show animation\n    var animate_interval = setInterval(() => {\n      if (!trial.render_on_canvas) {\n        display_element.innerHTML = \"\"; // clear everything\n      }\n      animate_frame++;\n      if (animate_frame == trial.stimuli.length) {\n        animate_frame = 0;\n        reps++;\n        // check if reps complete //\n        if (trial.sequence_reps != -1 && reps >= trial.sequence_reps) {\n          // done with animation\n          showAnimation = false;\n        }\n      }\n\n      update_display();\n    }, trial.frame_time);\n\n    update_display();\n\n    const endTrial = () => {\n      clearInterval(animate_interval); // stop animation!\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    var keyboard_listener;\n    var trial_data = {};\n\n    // @ts-expect-error Error is: Unreachable code detected: Not all code paths return a value\n    const after_response = (info: { key: string; rt: number }) => {\n      // ignore the response if animation is playing and subject\n      // not allowed to respond before it is complete\n      if (!trial.allow_response_before_complete && showAnimation) {\n        return false;\n      }\n\n      correct = false;\n      if (this.jsPsych.pluginAPI.compareKeys(trial.key_answer, info.key)) {\n        correct = true;\n      }\n\n      responded = true;\n\n      trial_data = {\n        stimulus: trial.stimuli,\n        rt: info.rt,\n        correct: correct,\n        response: info.key,\n      };\n\n      this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboard_listener);\n    };\n\n    keyboard_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: after_response,\n      valid_responses: trial.choices,\n      rt_method: \"performance\",\n      persist: true,\n      allow_held_key: false,\n    });\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const animation_length = trial.sequence_reps * trial.frame_time * trial.stimuli.length;\n    const key = this.jsPsych.pluginAPI.getValidKey(trial.choices);\n\n    const default_data = {\n      stimulus: trial.stimuli,\n      rt: animation_length + this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: key,\n      correct: key == trial.key_answer,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    if (data.rt == null || data.response == null) {\n      throw new Error(`\n        Simulated response for categorize-animation plugin was invalid. \n        This could be because the response RT was too fast and generated\n        before the animation finished when the allow_response_before_complete\n        parameter is false. In a real experiment this would cause the experiment\n        to pause indefinitely.`);\n    } else {\n      this.jsPsych.finishTrial(data);\n    }\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    } else {\n      throw new Error(`\n        Simulated response for categorize-animation plugin was invalid. \n        This could be because the response RT was too fast and generated\n        before the animation finished when the allow_response_before_complete\n        parameter is false. In a real experiment this would cause the experiment\n        to pause indefinitely.`);\n    }\n  }\n}\n\nexport default CategorizeAnimationPlugin;\n"],"names":["version","ParameterType","info"],"mappings":"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"}