var jsPsychCategorizeAnimation = (function (i) {
  "use strict";
  var f = {
    name: "@jspsych/plugin-categorize-animation",
    version: "2.0.0",
    description: "jspsych plugin for categorization trials with feedback and animated stimuli",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-categorize-animation",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/categorize-animation",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const v = {
    name: "categorize-animation",
    version: f.version,
    parameters: {
      stimuli: { type: i.ParameterType.IMAGE, default: void 0, array: !0 },
      key_answer: { type: i.ParameterType.KEY, default: void 0 },
      choices: { type: i.ParameterType.KEYS, default: "ALL_KEYS" },
      text_answer: { type: i.ParameterType.HTML_STRING, default: null },
      correct_text: { type: i.ParameterType.HTML_STRING, default: "Correct." },
      incorrect_text: { type: i.ParameterType.HTML_STRING, default: "Wrong." },
      frame_time: { type: i.ParameterType.INT, default: 500 },
      sequence_reps: { type: i.ParameterType.INT, default: 1 },
      allow_response_before_complete: { type: i.ParameterType.BOOL, default: !1 },
      feedback_duration: { type: i.ParameterType.INT, default: 2e3 },
      prompt: { type: i.ParameterType.HTML_STRING, default: null },
      render_on_canvas: { type: i.ParameterType.BOOL, default: !0 },
    },
    data: {
      stimulus: { type: i.ParameterType.STRING, array: !0 },
      response: { type: i.ParameterType.STRING },
      rt: { type: i.ParameterType.INT },
      correct: { type: i.ParameterType.BOOL },
    },
  };
  class m {
    constructor(t) {
      this.jsPsych = t;
    }
    trial(t, e) {
      var a = 0,
        r = 0,
        n = !0,
        c = !1,
        d = !1,
        p;
      if (e.render_on_canvas) {
        if (t.hasChildNodes()) for (; t.firstChild; ) t.removeChild(t.firstChild);
        var s = document.createElement("canvas");
        (s.id = "jspsych-categorize-animation-stimulus"),
          (s.style.margin = "0"),
          (s.style.padding = "0"),
          t.insertBefore(s, null);
        var T = s.getContext("2d");
        if (e.prompt !== null) {
          var l = document.createElement("div");
          (l.id = "jspsych-categorize-animation-prompt"),
            (l.style.visibility = "hidden"),
            (l.innerHTML = e.prompt),
            t.insertBefore(l, s.nextElementSibling);
        }
        var y = document.createElement("div");
        t.insertBefore(y, t.nextElementSibling);
      }
      const h = () => {
        if (n)
          if (e.render_on_canvas) {
            t.querySelector("#jspsych-categorize-animation-stimulus").style.visibility = "visible";
            var o = new Image();
            (o.src = e.stimuli[a]),
              (s.height = o.naturalHeight),
              (s.width = o.naturalWidth),
              T.drawImage(o, 0, 0);
          } else
            t.innerHTML +=
              '<img src="' +
              e.stimuli[a] +
              '" class="jspsych-categorize-animation-stimulus"></img>';
        if (!c && e.allow_response_before_complete)
          e.prompt !== null &&
            (e.render_on_canvas ? (l.style.visibility = "visible") : (t.innerHTML += e.prompt)),
            e.render_on_canvas && (n || s.remove());
        else if (!c)
          n ||
            (e.prompt !== null &&
              (e.render_on_canvas ? (l.style.visibility = "visible") : (t.innerHTML += e.prompt)),
            e.render_on_canvas && s.remove());
        else {
          var u = "";
          p
            ? (u = e.correct_text.replace("%ANS%", e.text_answer))
            : (u = e.incorrect_text.replace("%ANS%", e.text_answer)),
            e.render_on_canvas
              ? (e.prompt !== null && l.remove(), (y.innerHTML = u))
              : (t.innerHTML += u),
            d ||
              ((d = !0),
              this.jsPsych.pluginAPI.setTimeout(() => {
                w();
              }, e.feedback_duration));
        }
      };
      var P = setInterval(() => {
        e.render_on_canvas || (t.innerHTML = ""),
          a++,
          a == e.stimuli.length &&
            ((a = 0), r++, e.sequence_reps != -1 && r >= e.sequence_reps && (n = !1)),
          h();
      }, e.frame_time);
      h();
      const w = () => {
        clearInterval(P), this.jsPsych.finishTrial(g);
      };
      var _,
        g = {};
      const b = (o) => {
        if (!e.allow_response_before_complete && n) return !1;
        (p = !1),
          this.jsPsych.pluginAPI.compareKeys(e.key_answer, o.key) && (p = !0),
          (c = !0),
          (g = { stimulus: e.stimuli, rt: o.rt, correct: p, response: o.key }),
          this.jsPsych.pluginAPI.cancelKeyboardResponse(_);
      };
      _ = this.jsPsych.pluginAPI.getKeyboardResponse({
        callback_function: b,
        valid_responses: e.choices,
        rt_method: "performance",
        persist: !0,
        allow_held_key: !1,
      });
    }
    simulate(t, e, a, r) {
      e == "data-only" && (r(), this.simulate_data_only(t, a)),
        e == "visual" && this.simulate_visual(t, a, r);
    }
    create_simulation_data(t, e) {
      const a = t.sequence_reps * t.frame_time * t.stimuli.length,
        r = this.jsPsych.pluginAPI.getValidKey(t.choices),
        n = {
          stimulus: t.stimuli,
          rt: a + this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, !0),
          response: r,
          correct: r == t.key_answer,
        },
        c = this.jsPsych.pluginAPI.mergeSimulationData(n, e);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(t, c), c;
    }
    simulate_data_only(t, e) {
      const a = this.create_simulation_data(t, e);
      if (a.rt == null || a.response == null)
        throw new Error(`
        Simulated response for categorize-animation plugin was invalid. 
        This could be because the response RT was too fast and generated
        before the animation finished when the allow_response_before_complete
        parameter is false. In a real experiment this would cause the experiment
        to pause indefinitely.`);
      this.jsPsych.finishTrial(a);
    }
    simulate_visual(t, e, a) {
      const r = this.create_simulation_data(t, e),
        n = this.jsPsych.getDisplayElement();
      if ((this.trial(n, t), a(), r.rt !== null)) this.jsPsych.pluginAPI.pressKey(r.response, r.rt);
      else
        throw new Error(`
        Simulated response for categorize-animation plugin was invalid. 
        This could be because the response RT was too fast and generated
        before the animation finished when the allow_response_before_complete
        parameter is false. In a real experiment this would cause the experiment
        to pause indefinitely.`);
    }
  }
  return (m.info = v), m;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
