{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"categorize-animation\",\n  version: version,\n  parameters: {\n    /** Each element of the array is a path to an image file. */\n    stimuli: {\n      type: ParameterType.IMAGE,\n      default: undefined,\n      array: true,\n    },\n    /** The key character indicating the correct response. */\n    key_answer: {\n      type: ParameterType.KEY,\n      default: undefined,\n    },\n    /** This array contains the key(s) that the participant is allowed to press in order to respond to the stimulus. Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) - see [this page](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values) and [this page (event.key column)](https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/) for more examples. Any key presses that are not listed in the array will be ignored. The default value of `\"ALL_KEYS\"` means that all keys will be accepted as valid responses. Specifying `\"NO_KEYS\"` will mean that no responses are allowed. */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /** A text label that describes the correct answer. Used in conjunction with the `correct_text` and `incorrect_text` parameters. */\n    text_answer: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** String to show when the correct answer is given. Can contain HTML formatting. The special string `%ANS%` can be used within the string. If present, the plugin will put the `text_answer` for the trial in place of the %ANS% string (see example below). */\n    correct_text: {\n      type: ParameterType.HTML_STRING,\n      default: \"Correct.\",\n    },\n    /** String to show when the wrong answer is given. Can contain HTML formatting. The special string `%ANS%` can be used within the string. If present, the plugin will put the `text_answer` for the trial in place of the %ANS% string (see example below). */\n    incorrect_text: {\n      type: ParameterType.HTML_STRING,\n      default: \"Wrong.\",\n    },\n    /** How long to display each image (in milliseconds). */\n    frame_time: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /** How many times to show the entire sequence. */\n    sequence_reps: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /** If true, the participant can respond before the animation sequence finishes. */\n    allow_response_before_complete: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** How long to show the feedback (milliseconds). */\n    feedback_duration: {\n      type: ParameterType.INT,\n      default: 2000,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus or the end of the animation depending on the allow_response_before_complete parameter. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /**\n     * If true, the images will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive images in some browsers, like Firefox and Edge.\n     * If false, the image will be shown via an img element, as in previous versions of jsPsych.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** Array of stimuli displayed in the trial. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    stimulus: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n    /** Indicates which key the participant pressed.  */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** `true` if the participant got the correct answer, `false` otherwise. */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The categorize animation plugin shows a sequence of images at a specified frame rate. The participant responds by pressing a key. Feedback indicating the correctness of the response is given.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/categorize-animation/ categorize-animation plugin documentation on jspsych.org}\n */\nclass CategorizeAnimationPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var animate_frame = 0;\n    var reps = 0;\n\n    var showAnimation = true;\n\n    var responded = false;\n    var timeoutSet = false;\n    var correct;\n\n    if (trial.render_on_canvas) {\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      var canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-categorize-animation-stimulus\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      display_element.insertBefore(canvas, null);\n      var ctx = canvas.getContext(\"2d\");\n      if (trial.prompt !== null) {\n        var prompt_div = document.createElement(\"div\");\n        prompt_div.id = \"jspsych-categorize-animation-prompt\";\n        prompt_div.style.visibility = \"hidden\";\n        prompt_div.innerHTML = trial.prompt;\n        display_element.insertBefore(prompt_div, canvas.nextElementSibling);\n      }\n      var feedback_div = document.createElement(\"div\");\n      display_element.insertBefore(feedback_div, display_element.nextElementSibling);\n    }\n\n    const update_display = () => {\n      if (showAnimation) {\n        if (trial.render_on_canvas) {\n          display_element.querySelector<HTMLElement>(\n            \"#jspsych-categorize-animation-stimulus\"\n          ).style.visibility = \"visible\";\n          var img = new Image();\n          img.src = trial.stimuli[animate_frame];\n          canvas.height = img.naturalHeight;\n          canvas.width = img.naturalWidth;\n          ctx.drawImage(img, 0, 0);\n        } else {\n          display_element.innerHTML +=\n            '<img src=\"' +\n            trial.stimuli[animate_frame] +\n            '\" class=\"jspsych-categorize-animation-stimulus\"></img>';\n        }\n      }\n\n      if (!responded && trial.allow_response_before_complete) {\n        // in here if the user can respond before the animation is done\n        if (trial.prompt !== null) {\n          if (trial.render_on_canvas) {\n            prompt_div.style.visibility = \"visible\";\n          } else {\n            display_element.innerHTML += trial.prompt;\n          }\n        }\n        if (trial.render_on_canvas) {\n          if (!showAnimation) {\n            canvas.remove();\n          }\n        }\n      } else if (!responded) {\n        // in here if the user has to wait to respond until animation is done.\n        // if this is the case, don't show the prompt until the animation is over.\n        if (!showAnimation) {\n          if (trial.prompt !== null) {\n            if (trial.render_on_canvas) {\n              prompt_div.style.visibility = \"visible\";\n            } else {\n              display_element.innerHTML += trial.prompt;\n            }\n          }\n          if (trial.render_on_canvas) {\n            canvas.remove();\n          }\n        }\n      } else {\n        // user has responded if we get here.\n\n        // show feedback\n        var feedback_text = \"\";\n        if (correct) {\n          feedback_text = trial.correct_text.replace(\"%ANS%\", trial.text_answer);\n        } else {\n          feedback_text = trial.incorrect_text.replace(\"%ANS%\", trial.text_answer);\n        }\n        if (trial.render_on_canvas) {\n          if (trial.prompt !== null) {\n            prompt_div.remove();\n          }\n          feedback_div.innerHTML = feedback_text;\n        } else {\n          display_element.innerHTML += feedback_text;\n        }\n\n        // set timeout to clear feedback\n        if (!timeoutSet) {\n          timeoutSet = true;\n          this.jsPsych.pluginAPI.setTimeout(() => {\n            endTrial();\n          }, trial.feedback_duration);\n        }\n      }\n    };\n\n    // show animation\n    var animate_interval = setInterval(() => {\n      if (!trial.render_on_canvas) {\n        display_element.innerHTML = \"\"; // clear everything\n      }\n      animate_frame++;\n      if (animate_frame == trial.stimuli.length) {\n        animate_frame = 0;\n        reps++;\n        // check if reps complete //\n        if (trial.sequence_reps != -1 && reps >= trial.sequence_reps) {\n          // done with animation\n          showAnimation = false;\n        }\n      }\n\n      update_display();\n    }, trial.frame_time);\n\n    update_display();\n\n    const endTrial = () => {\n      clearInterval(animate_interval); // stop animation!\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    var keyboard_listener;\n    var trial_data = {};\n\n    // @ts-expect-error Error is: Unreachable code detected: Not all code paths return a value\n    const after_response = (info: { key: string; rt: number }) => {\n      // ignore the response if animation is playing and subject\n      // not allowed to respond before it is complete\n      if (!trial.allow_response_before_complete && showAnimation) {\n        return false;\n      }\n\n      correct = false;\n      if (this.jsPsych.pluginAPI.compareKeys(trial.key_answer, info.key)) {\n        correct = true;\n      }\n\n      responded = true;\n\n      trial_data = {\n        stimulus: trial.stimuli,\n        rt: info.rt,\n        correct: correct,\n        response: info.key,\n      };\n\n      this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboard_listener);\n    };\n\n    keyboard_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: after_response,\n      valid_responses: trial.choices,\n      rt_method: \"performance\",\n      persist: true,\n      allow_held_key: false,\n    });\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const animation_length = trial.sequence_reps * trial.frame_time * trial.stimuli.length;\n    const key = this.jsPsych.pluginAPI.getValidKey(trial.choices);\n\n    const default_data = {\n      stimulus: trial.stimuli,\n      rt: animation_length + this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: key,\n      correct: key == trial.key_answer,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    if (data.rt == null || data.response == null) {\n      throw new Error(`\n        Simulated response for categorize-animation plugin was invalid. \n        This could be because the response RT was too fast and generated\n        before the animation finished when the allow_response_before_complete\n        parameter is false. In a real experiment this would cause the experiment\n        to pause indefinitely.`);\n    } else {\n      this.jsPsych.finishTrial(data);\n    }\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    } else {\n      throw new Error(`\n        Simulated response for categorize-animation plugin was invalid. \n        This could be because the response RT was too fast and generated\n        before the animation finished when the allow_response_before_complete\n        parameter is false. In a real experiment this would cause the experiment\n        to pause indefinitely.`);\n    }\n  }\n}\n\nexport default CategorizeAnimationPlugin;\n"],"names":["info","version","ParameterType","CategorizeAnimationPlugin","jsPsych","display_element","trial","animate_frame","reps","showAnimation","responded","timeoutSet","correct","canvas","ctx","prompt_div","feedback_div","update_display","img","feedback_text","endTrial","animate_interval","trial_data","keyboard_listener","after_response","simulation_mode","simulation_options","load_callback","animation_length","key","default_data","data"],"mappings":"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"}