{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychExtension, JsPsychExtensionInfo, ParameterType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\ninterface InitializeParameters {\n  /**\n   * The minimum time between samples for `mousemove` events in milliseconds.\n   * If `mousemove` events occur more rapidly than this limit, they will not be recorded.\n   * Use this if you want to keep the data files smaller and don't need high resolution\n   * tracking data. The default value of 0 means that all events will be recorded.\n   * @default 0\n   */\n  minimum_sample_time: number;\n}\n\ninterface OnStartParameters {\n  /**\n   * An array of string selectors. The selectors should identify one unique element on the page.\n   * The DOMRect of the element will be stored in the data.\n   */\n  targets?: Array<string>;\n  /**\n   * An array of mouse events to track. Can include `\"mousemove\"`, `\"mousedown\"`, and `\"mouseup\"`.\n   * @default ['mousemove']\n   */\n  events?: Array<string>;\n}\n\n/**\n * https://www.jspsych.org/latest/extensions/mouse-tracking/\n */\nclass MouseTrackingExtension implements JsPsychExtension {\n  static info: JsPsychExtensionInfo = {\n    name: \"mouse-tracking\",\n    version: version,\n    data: {\n      /**\n       * An array of objects containing mouse movement data for the trial. Each object has an `x`, a `y`,  a `t`, and an\n       * `event` property. The `x` and `y` properties specify the mouse coordinates in pixels relative to the top left\n       * corner of the viewport and `t` specifies the time in milliseconds since the start of the trial. The `event`\n       * will be either 'mousemove', 'mousedown', or 'mouseup' depending on which event was generated.\n       */\n      mouse_tracking_data: {\n        type: ParameterType.COMPLEX,\n        array: true,\n        nested: {\n          x: {\n            type: ParameterType.INT,\n          },\n          y: {\n            type: ParameterType.INT,\n          },\n          t: {\n            type: ParameterType.INT,\n          },\n          event: {\n            type: ParameterType.STRING,\n          },\n        },\n      },\n      /**\n       * An object contain the pixel coordinates of elements on the screen specified by the `.targets` parameter. Each key\n       * in this object will be a `selector` property, containing the CSS selector string used to find the element. The object\n       * corresponding to each key will contain `x` and `y` properties specifying the top-left corner of the object, `width`\n       * and `height` values, plus `top`, `bottom`, `left`, and `right` parameters which specify the\n       * [bounding rectangle](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) of the element.\n       */\n      mouse_tracking_targets: {\n        type: ParameterType.COMPLEX,\n        nested: {\n          x: {\n            type: ParameterType.INT,\n          },\n          y: {\n            type: ParameterType.INT,\n          },\n          width: {\n            type: ParameterType.INT,\n          },\n          height: {\n            type: ParameterType.INT,\n          },\n          top: {\n            type: ParameterType.INT,\n          },\n          bottom: {\n            type: ParameterType.INT,\n          },\n          left: {\n            type: ParameterType.INT,\n          },\n          right: {\n            type: ParameterType.INT,\n          },\n        },\n      },\n    },\n  };\n\n  constructor(private jsPsych: JsPsych) {}\n\n  private domObserver: MutationObserver;\n  private currentTrialData: Array<object>;\n  private currentTrialTargets: Map<string, DOMRect>;\n  private currentTrialSelectors: Array<string>;\n  private currentTrialStartTime: number;\n  private minimumSampleTime: number;\n  private lastSampleTime: number;\n  private eventsToTrack: Array<string>;\n\n  initialize = async ({ minimum_sample_time = 0 }: InitializeParameters) => {\n    this.domObserver = new MutationObserver(this.mutationObserverCallback);\n    this.minimumSampleTime = minimum_sample_time;\n  };\n\n  on_start = (params: OnStartParameters): void => {\n    params = params || {};\n\n    this.currentTrialData = [];\n    this.currentTrialTargets = new Map();\n    this.currentTrialSelectors = params.targets || [];\n    this.lastSampleTime = null;\n    this.eventsToTrack = params.events || [\"mousemove\"];\n\n    this.domObserver.observe(this.jsPsych.getDisplayElement(), { childList: true });\n  };\n\n  on_load = () => {\n    // set current trial start time\n    this.currentTrialStartTime = performance.now();\n\n    // start data collection\n    if (this.eventsToTrack.includes(\"mousemove\")) {\n      window.addEventListener(\"mousemove\", this.mouseMoveEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mousedown\")) {\n      window.addEventListener(\"mousedown\", this.mouseDownEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mouseup\")) {\n      window.addEventListener(\"mouseup\", this.mouseUpEventHandler);\n    }\n  };\n\n  on_finish = () => {\n    this.domObserver.disconnect();\n\n    if (this.eventsToTrack.includes(\"mousemove\")) {\n      window.removeEventListener(\"mousemove\", this.mouseMoveEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mousedown\")) {\n      window.removeEventListener(\"mousedown\", this.mouseDownEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mouseup\")) {\n      window.removeEventListener(\"mouseup\", this.mouseUpEventHandler);\n    }\n\n    return {\n      mouse_tracking_data: this.currentTrialData,\n      mouse_tracking_targets: Object.fromEntries(this.currentTrialTargets.entries()),\n    };\n  };\n\n  private mouseMoveEventHandler = ({ clientX: x, clientY: y }: MouseEvent) => {\n    const event_time = performance.now();\n    const t = Math.round(event_time - this.currentTrialStartTime);\n\n    if (\n      this.lastSampleTime === null ||\n      event_time - this.lastSampleTime >= this.minimumSampleTime\n    ) {\n      this.lastSampleTime = event_time;\n      this.currentTrialData.push({ x, y, t, event: \"mousemove\" });\n    }\n  };\n\n  private mouseUpEventHandler = ({ clientX: x, clientY: y }: MouseEvent) => {\n    const event_time = performance.now();\n    const t = Math.round(event_time - this.currentTrialStartTime);\n\n    this.currentTrialData.push({ x, y, t, event: \"mouseup\" });\n  };\n\n  private mouseDownEventHandler = ({ clientX: x, clientY: y }: MouseEvent) => {\n    const event_time = performance.now();\n    const t = Math.round(event_time - this.currentTrialStartTime);\n\n    this.currentTrialData.push({ x, y, t, event: \"mousedown\" });\n  };\n\n  private mutationObserverCallback = (mutationsList, observer) => {\n    for (const selector of this.currentTrialSelectors) {\n      if (!this.currentTrialTargets.has(selector)) {\n        const target = this.jsPsych.getDisplayElement().querySelector(selector);\n        if (target) {\n          this.currentTrialTargets.set(selector, target.getBoundingClientRect());\n        }\n      }\n    }\n  };\n}\n\nexport default MouseTrackingExtension;\n"],"names":["version","ParameterType"],"mappings":"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"}