{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychExtension, JsPsychExtensionInfo, ParameterType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\ninterface InitializeParameters {\n  /**\n   * The minimum time between samples for `mousemove` events in milliseconds.\n   * If `mousemove` events occur more rapidly than this limit, they will not be recorded.\n   * Use this if you want to keep the data files smaller and don't need high resolution\n   * tracking data. The default value of 0 means that all events will be recorded.\n   * @default 0\n   */\n  minimum_sample_time: number;\n}\n\ninterface OnStartParameters {\n  /**\n   * An array of string selectors. The selectors should identify one unique element on the page.\n   * The DOMRect of the element will be stored in the data.\n   */\n  targets?: Array<string>;\n  /**\n   * An array of mouse events to track. Can include `\"mousemove\"`, `\"mousedown\"`, and `\"mouseup\"`.\n   * @default ['mousemove']\n   */\n  events?: Array<string>;\n}\n\n/**\n * https://www.jspsych.org/latest/extensions/mouse-tracking/\n */\nclass MouseTrackingExtension implements JsPsychExtension {\n  static info: JsPsychExtensionInfo = {\n    name: \"mouse-tracking\",\n    version: version,\n    data: {\n      /**\n       * An array of objects containing mouse movement data for the trial. Each object has an `x`, a `y`,  a `t`, and an\n       * `event` property. The `x` and `y` properties specify the mouse coordinates in pixels relative to the top left\n       * corner of the viewport and `t` specifies the time in milliseconds since the start of the trial. The `event`\n       * will be either 'mousemove', 'mousedown', or 'mouseup' depending on which event was generated.\n       */\n      mouse_tracking_data: {\n        type: ParameterType.COMPLEX,\n        array: true,\n        nested: {\n          x: {\n            type: ParameterType.INT,\n          },\n          y: {\n            type: ParameterType.INT,\n          },\n          t: {\n            type: ParameterType.INT,\n          },\n          event: {\n            type: ParameterType.STRING,\n          },\n        },\n      },\n      /**\n       * An object contain the pixel coordinates of elements on the screen specified by the `.targets` parameter. Each key\n       * in this object will be a `selector` property, containing the CSS selector string used to find the element. The object\n       * corresponding to each key will contain `x` and `y` properties specifying the top-left corner of the object, `width`\n       * and `height` values, plus `top`, `bottom`, `left`, and `right` parameters which specify the\n       * [bounding rectangle](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) of the element.\n       */\n      mouse_tracking_targets: {\n        type: ParameterType.COMPLEX,\n        nested: {\n          x: {\n            type: ParameterType.INT,\n          },\n          y: {\n            type: ParameterType.INT,\n          },\n          width: {\n            type: ParameterType.INT,\n          },\n          height: {\n            type: ParameterType.INT,\n          },\n          top: {\n            type: ParameterType.INT,\n          },\n          bottom: {\n            type: ParameterType.INT,\n          },\n          left: {\n            type: ParameterType.INT,\n          },\n          right: {\n            type: ParameterType.INT,\n          },\n        },\n      },\n    },\n  };\n\n  constructor(private jsPsych: JsPsych) {}\n\n  private domObserver: MutationObserver;\n  private currentTrialData: Array<object>;\n  private currentTrialTargets: Map<string, DOMRect>;\n  private currentTrialSelectors: Array<string>;\n  private currentTrialStartTime: number;\n  private minimumSampleTime: number;\n  private lastSampleTime: number;\n  private eventsToTrack: Array<string>;\n\n  initialize = async ({ minimum_sample_time = 0 }: InitializeParameters) => {\n    this.domObserver = new MutationObserver(this.mutationObserverCallback);\n    this.minimumSampleTime = minimum_sample_time;\n  };\n\n  on_start = (params: OnStartParameters): void => {\n    params = params || {};\n\n    this.currentTrialData = [];\n    this.currentTrialTargets = new Map();\n    this.currentTrialSelectors = params.targets || [];\n    this.lastSampleTime = null;\n    this.eventsToTrack = params.events || [\"mousemove\"];\n\n    this.domObserver.observe(this.jsPsych.getDisplayElement(), { childList: true });\n  };\n\n  on_load = () => {\n    // set current trial start time\n    this.currentTrialStartTime = performance.now();\n\n    // start data collection\n    if (this.eventsToTrack.includes(\"mousemove\")) {\n      window.addEventListener(\"mousemove\", this.mouseMoveEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mousedown\")) {\n      window.addEventListener(\"mousedown\", this.mouseDownEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mouseup\")) {\n      window.addEventListener(\"mouseup\", this.mouseUpEventHandler);\n    }\n  };\n\n  on_finish = () => {\n    this.domObserver.disconnect();\n\n    if (this.eventsToTrack.includes(\"mousemove\")) {\n      window.removeEventListener(\"mousemove\", this.mouseMoveEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mousedown\")) {\n      window.removeEventListener(\"mousedown\", this.mouseDownEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mouseup\")) {\n      window.removeEventListener(\"mouseup\", this.mouseUpEventHandler);\n    }\n\n    return {\n      mouse_tracking_data: this.currentTrialData,\n      mouse_tracking_targets: Object.fromEntries(this.currentTrialTargets.entries()),\n    };\n  };\n\n  private mouseMoveEventHandler = ({ clientX: x, clientY: y }: MouseEvent) => {\n    const event_time = performance.now();\n    const t = Math.round(event_time - this.currentTrialStartTime);\n\n    if (\n      this.lastSampleTime === null ||\n      event_time - this.lastSampleTime >= this.minimumSampleTime\n    ) {\n      this.lastSampleTime = event_time;\n      this.currentTrialData.push({ x, y, t, event: \"mousemove\" });\n    }\n  };\n\n  private mouseUpEventHandler = ({ clientX: x, clientY: y }: MouseEvent) => {\n    const event_time = performance.now();\n    const t = Math.round(event_time - this.currentTrialStartTime);\n\n    this.currentTrialData.push({ x, y, t, event: \"mouseup\" });\n  };\n\n  private mouseDownEventHandler = ({ clientX: x, clientY: y }: MouseEvent) => {\n    const event_time = performance.now();\n    const t = Math.round(event_time - this.currentTrialStartTime);\n\n    this.currentTrialData.push({ x, y, t, event: \"mousedown\" });\n  };\n\n  private mutationObserverCallback = (mutationsList, observer) => {\n    for (const selector of this.currentTrialSelectors) {\n      if (!this.currentTrialTargets.has(selector)) {\n        const target = this.jsPsych.getDisplayElement().querySelector(selector);\n        if (target) {\n          this.currentTrialTargets.set(selector, target.getBoundingClientRect());\n        }\n      }\n    }\n  };\n}\n\nexport default MouseTrackingExtension;\n"],"names":["MouseTrackingExtension","jsPsych","_0","__async","minimum_sample_time","params","x","y","event_time","t","mutationsList","observer","selector","target","version","ParameterType"],"mappings":"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"}