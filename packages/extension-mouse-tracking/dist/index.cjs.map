{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychExtension, JsPsychExtensionInfo, ParameterType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\ninterface InitializeParameters {\n  /**\n   * The minimum time between samples for `mousemove` events in milliseconds.\n   * If `mousemove` events occur more rapidly than this limit, they will not be recorded.\n   * Use this if you want to keep the data files smaller and don't need high resolution\n   * tracking data. The default value of 0 means that all events will be recorded.\n   * @default 0\n   */\n  minimum_sample_time: number;\n}\n\ninterface OnStartParameters {\n  /**\n   * An array of string selectors. The selectors should identify one unique element on the page.\n   * The DOMRect of the element will be stored in the data.\n   */\n  targets?: Array<string>;\n  /**\n   * An array of mouse events to track. Can include `\"mousemove\"`, `\"mousedown\"`, and `\"mouseup\"`.\n   * @default ['mousemove']\n   */\n  events?: Array<string>;\n}\n\n/**\n * https://www.jspsych.org/latest/extensions/mouse-tracking/\n */\nclass MouseTrackingExtension implements JsPsychExtension {\n  static info: JsPsychExtensionInfo = {\n    name: \"mouse-tracking\",\n    version: version,\n    data: {\n      /**\n       * An array of objects containing mouse movement data for the trial. Each object has an `x`, a `y`,  a `t`, and an\n       * `event` property. The `x` and `y` properties specify the mouse coordinates in pixels relative to the top left\n       * corner of the viewport and `t` specifies the time in milliseconds since the start of the trial. The `event`\n       * will be either 'mousemove', 'mousedown', or 'mouseup' depending on which event was generated.\n       */\n      mouse_tracking_data: {\n        type: ParameterType.COMPLEX,\n        array: true,\n        nested: {\n          x: {\n            type: ParameterType.INT,\n          },\n          y: {\n            type: ParameterType.INT,\n          },\n          t: {\n            type: ParameterType.INT,\n          },\n          event: {\n            type: ParameterType.STRING,\n          },\n        },\n      },\n      /**\n       * An object contain the pixel coordinates of elements on the screen specified by the `.targets` parameter. Each key\n       * in this object will be a `selector` property, containing the CSS selector string used to find the element. The object\n       * corresponding to each key will contain `x` and `y` properties specifying the top-left corner of the object, `width`\n       * and `height` values, plus `top`, `bottom`, `left`, and `right` parameters which specify the\n       * [bounding rectangle](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) of the element.\n       */\n      mouse_tracking_targets: {\n        type: ParameterType.COMPLEX,\n        nested: {\n          x: {\n            type: ParameterType.INT,\n          },\n          y: {\n            type: ParameterType.INT,\n          },\n          width: {\n            type: ParameterType.INT,\n          },\n          height: {\n            type: ParameterType.INT,\n          },\n          top: {\n            type: ParameterType.INT,\n          },\n          bottom: {\n            type: ParameterType.INT,\n          },\n          left: {\n            type: ParameterType.INT,\n          },\n          right: {\n            type: ParameterType.INT,\n          },\n        },\n      },\n    },\n  };\n\n  constructor(private jsPsych: JsPsych) {}\n\n  private domObserver: MutationObserver;\n  private currentTrialData: Array<object>;\n  private currentTrialTargets: Map<string, DOMRect>;\n  private currentTrialSelectors: Array<string>;\n  private currentTrialStartTime: number;\n  private minimumSampleTime: number;\n  private lastSampleTime: number;\n  private eventsToTrack: Array<string>;\n\n  initialize = async ({ minimum_sample_time = 0 }: InitializeParameters) => {\n    this.domObserver = new MutationObserver(this.mutationObserverCallback);\n    this.minimumSampleTime = minimum_sample_time;\n  };\n\n  on_start = (params: OnStartParameters): void => {\n    params = params || {};\n\n    this.currentTrialData = [];\n    this.currentTrialTargets = new Map();\n    this.currentTrialSelectors = params.targets || [];\n    this.lastSampleTime = null;\n    this.eventsToTrack = params.events || [\"mousemove\"];\n\n    this.domObserver.observe(this.jsPsych.getDisplayElement(), { childList: true });\n  };\n\n  on_load = () => {\n    // set current trial start time\n    this.currentTrialStartTime = performance.now();\n\n    // start data collection\n    if (this.eventsToTrack.includes(\"mousemove\")) {\n      window.addEventListener(\"mousemove\", this.mouseMoveEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mousedown\")) {\n      window.addEventListener(\"mousedown\", this.mouseDownEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mouseup\")) {\n      window.addEventListener(\"mouseup\", this.mouseUpEventHandler);\n    }\n  };\n\n  on_finish = () => {\n    this.domObserver.disconnect();\n\n    if (this.eventsToTrack.includes(\"mousemove\")) {\n      window.removeEventListener(\"mousemove\", this.mouseMoveEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mousedown\")) {\n      window.removeEventListener(\"mousedown\", this.mouseDownEventHandler);\n    }\n    if (this.eventsToTrack.includes(\"mouseup\")) {\n      window.removeEventListener(\"mouseup\", this.mouseUpEventHandler);\n    }\n\n    return {\n      mouse_tracking_data: this.currentTrialData,\n      mouse_tracking_targets: Object.fromEntries(this.currentTrialTargets.entries()),\n    };\n  };\n\n  private mouseMoveEventHandler = ({ clientX: x, clientY: y }: MouseEvent) => {\n    const event_time = performance.now();\n    const t = Math.round(event_time - this.currentTrialStartTime);\n\n    if (\n      this.lastSampleTime === null ||\n      event_time - this.lastSampleTime >= this.minimumSampleTime\n    ) {\n      this.lastSampleTime = event_time;\n      this.currentTrialData.push({ x, y, t, event: \"mousemove\" });\n    }\n  };\n\n  private mouseUpEventHandler = ({ clientX: x, clientY: y }: MouseEvent) => {\n    const event_time = performance.now();\n    const t = Math.round(event_time - this.currentTrialStartTime);\n\n    this.currentTrialData.push({ x, y, t, event: \"mouseup\" });\n  };\n\n  private mouseDownEventHandler = ({ clientX: x, clientY: y }: MouseEvent) => {\n    const event_time = performance.now();\n    const t = Math.round(event_time - this.currentTrialStartTime);\n\n    this.currentTrialData.push({ x, y, t, event: \"mousedown\" });\n  };\n\n  private mutationObserverCallback = (mutationsList, observer) => {\n    for (const selector of this.currentTrialSelectors) {\n      if (!this.currentTrialTargets.has(selector)) {\n        const target = this.jsPsych.getDisplayElement().querySelector(selector);\n        if (target) {\n          this.currentTrialTargets.set(selector, target.getBoundingClientRect());\n        }\n      }\n    }\n  };\n}\n\nexport default MouseTrackingExtension;\n"],"names":["version","ParameterType"],"mappings":"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"}