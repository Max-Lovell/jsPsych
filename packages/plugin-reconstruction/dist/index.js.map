{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\nimport { parameterPathArrayToString } from \"jspsych/src/timeline/util\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"reconstruction\",\n  version: version,\n  parameters: {\n    /** A function with a single parameter that returns an HTML-formatted string representing the stimulus. */\n    stim_function: {\n      type: ParameterType.FUNCTION,\n      default: undefined,\n    },\n    /** The starting value of the stimulus parameter. */\n    starting_value: {\n      type: ParameterType.FLOAT,\n      default: 0.5,\n    },\n    /** The change in the stimulus parameter caused by pressing one of the modification keys. */\n    step_size: {\n      type: ParameterType.FLOAT,\n      default: 0.05,\n    },\n    /** The key to press for increasing the parameter value. */\n    key_increase: {\n      type: ParameterType.KEY,\n      default: \"h\",\n    },\n    /** The key to press for decreasing the parameter value. */\n    key_decrease: {\n      type: ParameterType.KEY,\n      default: \"g\",\n    },\n    /** The text that appears on the button to finish the trial. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n  },\n  data: {\n    /** The starting value of the stimulus parameter. */\n    start_value: {\n      type: ParameterType.INT,\n    },\n    /** The final value of the stimulus parameter. */\n    final_value: {\n      type: ParameterType.INT,\n    },\n    /** The length of time, in milliseconds, that the trial lasted. */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin allows a participant to interact with a stimulus by modifying a parameter of the stimulus and observing\n * the change in the stimulus in real-time.\n *\n * The stimulus must be defined through a function that returns an HTML-formatted string. The function should take a\n * single value, which is the parameter that can be modified by the participant. The value can only range from 0 to 1.\n * See the example at the bottom of the page for a sample function.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/reconstruction/ reconstruction plugin documentation on jspsych.org}\n */\nclass ReconstructionPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // current param level\n    var param = trial.starting_value;\n\n    const endTrial = () => {\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // clear keyboard response\n      this.jsPsych.pluginAPI.cancelKeyboardResponse(key_listener);\n\n      // save data\n      var trial_data = {\n        rt: response_time,\n        final_value: param,\n        start_value: trial.starting_value,\n      };\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    const draw = (param: number) => {\n      //console.log(param);\n\n      display_element.innerHTML =\n        '<div id=\"jspsych-reconstruction-stim-container\">' + trial.stim_function(param) + \"</div>\";\n\n      // add submit button\n      display_element.innerHTML +=\n        '<button id=\"jspsych-reconstruction-next\" class=\"jspsych-btn jspsych-reconstruction\">' +\n        trial.button_label +\n        \"</button>\";\n\n      display_element\n        .querySelector(\"#jspsych-reconstruction-next\")\n        .addEventListener(\"click\", endTrial);\n    };\n\n    // set-up key listeners\n    const after_response = (info: { key: string; rt: number }) => {\n      //console.log('fire');\n\n      var key_i = trial.key_increase;\n      var key_d = trial.key_decrease;\n\n      // get new param value\n      if (this.jsPsych.pluginAPI.compareKeys(info.key, key_i)) {\n        param = param + trial.step_size;\n      } else if (this.jsPsych.pluginAPI.compareKeys(info.key, key_d)) {\n        param = param - trial.step_size;\n      }\n      param = Math.max(Math.min(1, param), 0);\n\n      // refresh the display\n      draw(param);\n    };\n\n    // listen for responses\n    var key_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: after_response,\n      valid_responses: [trial.key_increase, trial.key_decrease],\n      rt_method: \"performance\",\n      persist: true,\n      allow_held_key: true,\n    });\n\n    // draw first iteration\n    draw(param);\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      rt: this.jsPsych.randomization.sampleExGaussian(2000, 200, 1 / 200, true),\n      start_value: trial.starting_value,\n      final_value:\n        this.jsPsych.randomization.randomInt(0, Math.round(1 / trial.step_size)) * trial.step_size,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    let steps = Math.round((data.final_value - trial.starting_value) / trial.step_size);\n    const rt_per_step = (data.rt - 300) / steps;\n\n    let t = 0;\n    while (steps != 0) {\n      if (steps > 0) {\n        this.jsPsych.pluginAPI.pressKey(trial.key_increase, t + rt_per_step);\n        steps--;\n      } else {\n        this.jsPsych.pluginAPI.pressKey(trial.key_decrease, t + rt_per_step);\n        steps++;\n      }\n      t += rt_per_step;\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-reconstruction-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default ReconstructionPlugin;\n"],"names":["version","param","info"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAM,IAAc,GAAA;AAAA,EAClB,IAAM,EAAA,gBAAA;AAAA,WACNA,gBAAA;AAAA,EACA,UAAY,EAAA;AAAA,IAEV,aAAe,EAAA;AAAA,MACb,MAAM,aAAc,CAAA,QAAA;AAAA,MACpB,OAAS,EAAA,KAAA,CAAA;AAAA,KACX;AAAA,IAEA,cAAgB,EAAA;AAAA,MACd,MAAM,aAAc,CAAA,KAAA;AAAA,MACpB,OAAS,EAAA,GAAA;AAAA,KACX;AAAA,IAEA,SAAW,EAAA;AAAA,MACT,MAAM,aAAc,CAAA,KAAA;AAAA,MACpB,OAAS,EAAA,IAAA;AAAA,KACX;AAAA,IAEA,YAAc,EAAA;AAAA,MACZ,MAAM,aAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA,GAAA;AAAA,KACX;AAAA,IAEA,YAAc,EAAA;AAAA,MACZ,MAAM,aAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA,GAAA;AAAA,KACX;AAAA,IAEA,YAAc,EAAA;AAAA,MACZ,MAAM,aAAc,CAAA,MAAA;AAAA,MACpB,OAAS,EAAA,UAAA;AAAA,KACX;AAAA,GACF;AAAA,EACA,IAAM,EAAA;AAAA,IAEJ,WAAa,EAAA;AAAA,MACX,MAAM,aAAc,CAAA,GAAA;AAAA,KACtB;AAAA,IAEA,WAAa,EAAA;AAAA,MACX,MAAM,aAAc,CAAA,GAAA;AAAA,KACtB;AAAA,IAEA,EAAI,EAAA;AAAA,MACF,MAAM,aAAc,CAAA,GAAA;AAAA,KACtB;AAAA,GACF;AACF,CAAA,CAAA;AAeA,MAAM,oBAAoD,CAAA;AAAA,EAGxD,YAAoB,OAAkB,EAAA;AAAlB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAAmB;AAAA,EAEvC,KAAA,CAAM,iBAA8B,KAAwB,EAAA;AAE1D,IAAA,IAAI,QAAQ,KAAM,CAAA,cAAA,CAAA;AAElB,IAAA,MAAM,WAAW,MAAM;AAErB,MAAI,IAAA,OAAA,GAAU,YAAY,GAAI,EAAA,CAAA;AAC9B,MAAA,IAAI,aAAgB,GAAA,IAAA,CAAK,KAAM,CAAA,OAAA,GAAU,SAAS,CAAA,CAAA;AAGlD,MAAK,IAAA,CAAA,OAAA,CAAQ,SAAU,CAAA,sBAAA,CAAuB,YAAY,CAAA,CAAA;AAG1D,MAAA,IAAI,UAAa,GAAA;AAAA,QACf,EAAI,EAAA,aAAA;AAAA,QACJ,WAAa,EAAA,KAAA;AAAA,QACb,aAAa,KAAM,CAAA,cAAA;AAAA,OACrB,CAAA;AAGA,MAAK,IAAA,CAAA,OAAA,CAAQ,YAAY,UAAU,CAAA,CAAA;AAAA,KACrC,CAAA;AAEA,IAAM,MAAA,IAAA,GAAO,CAACC,MAAkB,KAAA;AAG9B,MAAA,eAAA,CAAgB,SACd,GAAA,kDAAA,GAAqD,KAAM,CAAA,aAAA,CAAcA,MAAK,CAAI,GAAA,QAAA,CAAA;AAGpF,MAAgB,eAAA,CAAA,SAAA,IACd,sFACA,GAAA,KAAA,CAAM,YACN,GAAA,WAAA,CAAA;AAEF,MAAA,eAAA,CACG,aAAc,CAAA,8BAA8B,CAC5C,CAAA,gBAAA,CAAiB,SAAS,QAAQ,CAAA,CAAA;AAAA,KACvC,CAAA;AAGA,IAAM,MAAA,cAAA,GAAiB,CAACC,KAAsC,KAAA;AAG5D,MAAA,IAAI,QAAQ,KAAM,CAAA,YAAA,CAAA;AAClB,MAAA,IAAI,QAAQ,KAAM,CAAA,YAAA,CAAA;AAGlB,MAAA,IAAI,KAAK,OAAQ,CAAA,SAAA,CAAU,YAAYA,KAAK,CAAA,GAAA,EAAK,KAAK,CAAG,EAAA;AACvD,QAAA,KAAA,GAAQ,QAAQ,KAAM,CAAA,SAAA,CAAA;AAAA,OACxB,MAAA,IAAW,KAAK,OAAQ,CAAA,SAAA,CAAU,YAAYA,KAAK,CAAA,GAAA,EAAK,KAAK,CAAG,EAAA;AAC9D,QAAA,KAAA,GAAQ,QAAQ,KAAM,CAAA,SAAA,CAAA;AAAA,OACxB;AACA,MAAA,KAAA,GAAQ,KAAK,GAAI,CAAA,IAAA,CAAK,IAAI,CAAG,EAAA,KAAK,GAAG,CAAC,CAAA,CAAA;AAGtC,MAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,KACZ,CAAA;AAGA,IAAA,IAAI,YAAe,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,mBAAoB,CAAA;AAAA,MAC5D,iBAAmB,EAAA,cAAA;AAAA,MACnB,eAAiB,EAAA,CAAC,KAAM,CAAA,YAAA,EAAc,MAAM,YAAY,CAAA;AAAA,MACxD,SAAW,EAAA,aAAA;AAAA,MACX,OAAS,EAAA,IAAA;AAAA,MACT,cAAgB,EAAA,IAAA;AAAA,KACjB,CAAA,CAAA;AAGD,IAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAEV,IAAI,IAAA,SAAA,GAAY,YAAY,GAAI,EAAA,CAAA;AAAA,GAClC;AAAA,EAEA,QACE,CAAA,KAAA,EACA,eACA,EAAA,kBAAA,EACA,aACA,EAAA;AACA,IAAA,IAAI,mBAAmB,WAAa,EAAA;AAClC,MAAc,aAAA,EAAA,CAAA;AACd,MAAK,IAAA,CAAA,kBAAA,CAAmB,OAAO,kBAAkB,CAAA,CAAA;AAAA,KACnD;AACA,IAAA,IAAI,mBAAmB,QAAU,EAAA;AAC/B,MAAK,IAAA,CAAA,eAAA,CAAgB,KAAO,EAAA,kBAAA,EAAoB,aAAa,CAAA,CAAA;AAAA,KAC/D;AAAA,GACF;AAAA,EAEQ,sBAAA,CAAuB,OAAwB,kBAAoB,EAAA;AACzE,IAAA,MAAM,YAAe,GAAA;AAAA,MACnB,EAAA,EAAI,KAAK,OAAQ,CAAA,aAAA,CAAc,iBAAiB,GAAM,EAAA,GAAA,EAAK,CAAI,GAAA,GAAA,EAAK,IAAI,CAAA;AAAA,MACxE,aAAa,KAAM,CAAA,cAAA;AAAA,MACnB,WACE,EAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,CAAc,SAAU,CAAA,CAAA,EAAG,IAAK,CAAA,KAAA,CAAM,CAAI,GAAA,KAAA,CAAM,SAAS,CAAC,IAAI,KAAM,CAAA,SAAA;AAAA,KACrF,CAAA;AAEA,IAAA,MAAM,OAAO,IAAK,CAAA,OAAA,CAAQ,SAAU,CAAA,mBAAA,CAAoB,cAAc,kBAAkB,CAAA,CAAA;AAExF,IAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,+BAAgC,CAAA,KAAA,EAAO,IAAI,CAAA,CAAA;AAElE,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEQ,kBAAA,CAAmB,OAAwB,kBAAoB,EAAA;AACrE,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;AAElE,IAAK,IAAA,CAAA,OAAA,CAAQ,YAAY,IAAI,CAAA,CAAA;AAAA,GAC/B;AAAA,EAEQ,eAAA,CAAgB,KAAwB,EAAA,kBAAA,EAAoB,aAA2B,EAAA;AAC7F,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;AAElE,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,OAAA,CAAQ,iBAAkB,EAAA,CAAA;AAEvD,IAAK,IAAA,CAAA,KAAA,CAAM,iBAAiB,KAAK,CAAA,CAAA;AACjC,IAAc,aAAA,EAAA,CAAA;AAEd,IAAI,IAAA,KAAA,GAAQ,KAAK,KAAO,CAAA,CAAA,IAAA,CAAK,cAAc,KAAM,CAAA,cAAA,IAAkB,MAAM,SAAS,CAAA,CAAA;AAClF,IAAM,MAAA,WAAA,GAAA,CAAe,IAAK,CAAA,EAAA,GAAK,GAAO,IAAA,KAAA,CAAA;AAEtC,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,OAAO,SAAS,CAAG,EAAA;AACjB,MAAA,IAAI,QAAQ,CAAG,EAAA;AACb,QAAA,IAAA,CAAK,QAAQ,SAAU,CAAA,QAAA,CAAS,KAAM,CAAA,YAAA,EAAc,IAAI,WAAW,CAAA,CAAA;AACnE,QAAA,KAAA,EAAA,CAAA;AAAA,OACK,MAAA;AACL,QAAA,IAAA,CAAK,QAAQ,SAAU,CAAA,QAAA,CAAS,KAAM,CAAA,YAAA,EAAc,IAAI,WAAW,CAAA,CAAA;AACnE,QAAA,KAAA,EAAA,CAAA;AAAA,OACF;AACA,MAAK,CAAA,IAAA,WAAA,CAAA;AAAA,KACP;AAEA,IAAA,IAAA,CAAK,QAAQ,SAAU,CAAA,WAAA;AAAA,MACrB,eAAA,CAAgB,cAAc,8BAA8B,CAAA;AAAA,MAC5D,IAAK,CAAA,EAAA;AAAA,KACP,CAAA;AAAA,GACF;AACF,CAAA;AA/IM,oBAAA,CACG,IAAO,GAAA,IAAA;;;;"}