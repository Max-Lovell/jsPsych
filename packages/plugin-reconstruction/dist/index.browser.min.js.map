{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\nimport { parameterPathArrayToString } from \"jspsych/src/timeline/util\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"reconstruction\",\n  version: version,\n  parameters: {\n    /** A function with a single parameter that returns an HTML-formatted string representing the stimulus. */\n    stim_function: {\n      type: ParameterType.FUNCTION,\n      default: undefined,\n    },\n    /** The starting value of the stimulus parameter. */\n    starting_value: {\n      type: ParameterType.FLOAT,\n      default: 0.5,\n    },\n    /** The change in the stimulus parameter caused by pressing one of the modification keys. */\n    step_size: {\n      type: ParameterType.FLOAT,\n      default: 0.05,\n    },\n    /** The key to press for increasing the parameter value. */\n    key_increase: {\n      type: ParameterType.KEY,\n      default: \"h\",\n    },\n    /** The key to press for decreasing the parameter value. */\n    key_decrease: {\n      type: ParameterType.KEY,\n      default: \"g\",\n    },\n    /** The text that appears on the button to finish the trial. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n  },\n  data: {\n    /** The starting value of the stimulus parameter. */\n    start_value: {\n      type: ParameterType.INT,\n    },\n    /** The final value of the stimulus parameter. */\n    final_value: {\n      type: ParameterType.INT,\n    },\n    /** The length of time, in milliseconds, that the trial lasted. */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin allows a participant to interact with a stimulus by modifying a parameter of the stimulus and observing\n * the change in the stimulus in real-time.\n *\n * The stimulus must be defined through a function that returns an HTML-formatted string. The function should take a\n * single value, which is the parameter that can be modified by the participant. The value can only range from 0 to 1.\n * See the example at the bottom of the page for a sample function.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/reconstruction/ reconstruction plugin documentation on jspsych.org}\n */\nclass ReconstructionPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // current param level\n    var param = trial.starting_value;\n\n    const endTrial = () => {\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // clear keyboard response\n      this.jsPsych.pluginAPI.cancelKeyboardResponse(key_listener);\n\n      // save data\n      var trial_data = {\n        rt: response_time,\n        final_value: param,\n        start_value: trial.starting_value,\n      };\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    const draw = (param: number) => {\n      //console.log(param);\n\n      display_element.innerHTML =\n        '<div id=\"jspsych-reconstruction-stim-container\">' + trial.stim_function(param) + \"</div>\";\n\n      // add submit button\n      display_element.innerHTML +=\n        '<button id=\"jspsych-reconstruction-next\" class=\"jspsych-btn jspsych-reconstruction\">' +\n        trial.button_label +\n        \"</button>\";\n\n      display_element\n        .querySelector(\"#jspsych-reconstruction-next\")\n        .addEventListener(\"click\", endTrial);\n    };\n\n    // set-up key listeners\n    const after_response = (info: { key: string; rt: number }) => {\n      //console.log('fire');\n\n      var key_i = trial.key_increase;\n      var key_d = trial.key_decrease;\n\n      // get new param value\n      if (this.jsPsych.pluginAPI.compareKeys(info.key, key_i)) {\n        param = param + trial.step_size;\n      } else if (this.jsPsych.pluginAPI.compareKeys(info.key, key_d)) {\n        param = param - trial.step_size;\n      }\n      param = Math.max(Math.min(1, param), 0);\n\n      // refresh the display\n      draw(param);\n    };\n\n    // listen for responses\n    var key_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: after_response,\n      valid_responses: [trial.key_increase, trial.key_decrease],\n      rt_method: \"performance\",\n      persist: true,\n      allow_held_key: true,\n    });\n\n    // draw first iteration\n    draw(param);\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      rt: this.jsPsych.randomization.sampleExGaussian(2000, 200, 1 / 200, true),\n      start_value: trial.starting_value,\n      final_value:\n        this.jsPsych.randomization.randomInt(0, Math.round(1 / trial.step_size)) * trial.step_size,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    let steps = Math.round((data.final_value - trial.starting_value) / trial.step_size);\n    const rt_per_step = (data.rt - 300) / steps;\n\n    let t = 0;\n    while (steps != 0) {\n      if (steps > 0) {\n        this.jsPsych.pluginAPI.pressKey(trial.key_increase, t + rt_per_step);\n        steps--;\n      } else {\n        this.jsPsych.pluginAPI.pressKey(trial.key_decrease, t + rt_per_step);\n        steps++;\n      }\n      t += rt_per_step;\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-reconstruction-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default ReconstructionPlugin;\n"],"names":["info","version","ParameterType","ReconstructionPlugin","jsPsych","display_element","trial","param","endTrial","endTime","response_time","startTime","key_listener","trial_data","draw","after_response","key_i","key_d","simulation_mode","simulation_options","load_callback","default_data","data","steps","rt_per_step","t"],"mappings":"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"}