{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import type WebGazerExtension from \"@jspsych/extension-webgazer\";\nimport { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"webgazer-calibrate\",\n  version: version,\n  parameters: {\n    /** Array of points in `[x,y]` coordinates. Specified as a percentage of the screen width and height, from the left and top edge. The default grid is 9 points. */\n    calibration_points: {\n      type: ParameterType.INT, // TO DO: nested array, so different type?\n      default: [\n        [10, 10],\n        [10, 50],\n        [10, 90],\n        [50, 10],\n        [50, 50],\n        [50, 90],\n        [90, 10],\n        [90, 50],\n        [90, 90],\n      ],\n      array: true,\n    },\n    /** Can specify `click` to have participants click on calibration points or `view` to have participants passively watch calibration points.  */\n    calibration_mode: {\n      type: ParameterType.SELECT,\n      options: [\"click\", \"view\"],\n      default: \"click\",\n    },\n    /** Diameter of the calibration points in pixels. */\n    point_size: {\n      type: ParameterType.INT,\n      default: 20,\n    },\n    /** The number of times to repeat the sequence of calibration points. */\n    repetitions_per_point: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /** Whether to randomize the order of the calibration points. */\n    randomize_calibration_order: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** If `calibration_mode` is set to `view`, then this is the delay before calibrating after showing a point.\n     * Gives the participant time to fixate on the new target before assuming that the participant is looking at the target. */\n    time_to_saccade: {\n      type: ParameterType.INT,\n      default: 1000,\n    },\n    /**\n     * If `calibration_mode` is set to `view`, then this is the length of time to show a point while calibrating. Note\n     * that if `click` calibration is used then the point will remain on the screen until clicked.\n     */\n    time_per_point: {\n      type: ParameterType.INT,\n      default: 1000,\n    },\n  },\n  data: {\n    // no data collected\n  },\n};\n\ntype Info = typeof info;\n\n/**\n *\n * This plugin can be used to calibrate the [WebGazer extension](../extensions/webgazer.md). For a narrative\n * description of eye tracking with jsPsych, see the [eye tracking overview](../overview/eye-tracking.md).\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/webgazer-calibrate/ webgazer-calibrate plugin} and\n * {@link https://www.jspsych.org/latest/overview/eye-tracking/ eye-tracking overview} documentation on jspsych.org\n */\nclass WebgazerCalibratePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    const extension = this.jsPsych.extensions.webgazer as WebGazerExtension;\n\n    var html = `\n          <div id='webgazer-calibrate-container' style='position: relative; width:100vw; height:100vh'>\n          </div>`;\n\n    display_element.innerHTML = html;\n\n    var wg_container = display_element.querySelector(\"#webgazer-calibrate-container\");\n\n    var reps_completed = 0;\n    var points_completed = -1;\n    var cal_points = null;\n\n    const next_calibration_round = () => {\n      if (trial.randomize_calibration_order) {\n        cal_points = this.jsPsych.randomization.shuffle(trial.calibration_points);\n      } else {\n        cal_points = trial.calibration_points;\n      }\n      points_completed = -1;\n      next_calibration_point();\n    };\n\n    const calibrate = () => {\n      extension.resume();\n      if (trial.calibration_mode == \"click\") {\n        extension.startMouseCalibration();\n      }\n      next_calibration_round();\n    };\n\n    const next_calibration_point = () => {\n      points_completed++;\n      if (points_completed == cal_points.length) {\n        reps_completed++;\n        if (reps_completed == trial.repetitions_per_point) {\n          calibration_done();\n        } else {\n          next_calibration_round();\n        }\n      } else {\n        var pt = cal_points[points_completed];\n        calibration_display_gaze_only(pt);\n      }\n    };\n\n    const calibration_display_gaze_only = (pt) => {\n      var pt_html = `<div id=\"calibration-point\" style=\"width:${trial.point_size}px; height:${trial.point_size}px; border-radius:${trial.point_size}px; border: 1px solid #000; background-color: #333; position: absolute; left:${pt[0]}%; top:${pt[1]}%;\"></div>`;\n      wg_container.innerHTML = pt_html;\n\n      var pt_dom = wg_container.querySelector<HTMLElement>(\"#calibration-point\");\n\n      if (trial.calibration_mode == \"click\") {\n        pt_dom.style.cursor = \"pointer\";\n        pt_dom.addEventListener(\"click\", () => {\n          next_calibration_point();\n        });\n      }\n\n      if (trial.calibration_mode == \"view\") {\n        var br = pt_dom.getBoundingClientRect();\n        var x = br.left + br.width / 2;\n        var y = br.top + br.height / 2;\n\n        var pt_start_cal: number = performance.now() + trial.time_to_saccade;\n        var pt_finish: number = performance.now() + trial.time_to_saccade + trial.time_per_point;\n\n        const watch_dot = () => {\n          if (performance.now() > pt_start_cal) {\n            extension.calibratePoint(x, y);\n          }\n          if (performance.now() < pt_finish) {\n            requestAnimationFrame(watch_dot);\n          } else {\n            next_calibration_point();\n          }\n        };\n\n        requestAnimationFrame(watch_dot);\n      }\n    };\n\n    const calibration_done = () => {\n      if (trial.calibration_mode == \"click\") {\n        extension.stopMouseCalibration();\n      }\n      wg_container.innerHTML = \"\";\n      end_trial();\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      extension.pause();\n      extension.hidePredictions();\n      extension.hideVideo();\n\n      // gather the data to store for the trial\n      var trial_data = {};\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    calibrate();\n  }\n}\n\nexport default WebgazerCalibratePlugin;\n"],"names":["version"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAM,IAAc,GAAA;AAAA,EAClB,IAAM,EAAA,oBAAA;AAAA,WACNA,gBAAA;AAAA,EACA,UAAY,EAAA;AAAA,IAEV,kBAAoB,EAAA;AAAA,MAClB,MAAM,aAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA;AAAA,QACP,CAAC,IAAI,EAAE,CAAA;AAAA,QACP,CAAC,IAAI,EAAE,CAAA;AAAA,QACP,CAAC,IAAI,EAAE,CAAA;AAAA,QACP,CAAC,IAAI,EAAE,CAAA;AAAA,QACP,CAAC,IAAI,EAAE,CAAA;AAAA,QACP,CAAC,IAAI,EAAE,CAAA;AAAA,QACP,CAAC,IAAI,EAAE,CAAA;AAAA,QACP,CAAC,IAAI,EAAE,CAAA;AAAA,QACP,CAAC,IAAI,EAAE,CAAA;AAAA,OACT;AAAA,MACA,KAAO,EAAA,IAAA;AAAA,KACT;AAAA,IAEA,gBAAkB,EAAA;AAAA,MAChB,MAAM,aAAc,CAAA,MAAA;AAAA,MACpB,OAAA,EAAS,CAAC,OAAA,EAAS,MAAM,CAAA;AAAA,MACzB,OAAS,EAAA,OAAA;AAAA,KACX;AAAA,IAEA,UAAY,EAAA;AAAA,MACV,MAAM,aAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA,EAAA;AAAA,KACX;AAAA,IAEA,qBAAuB,EAAA;AAAA,MACrB,MAAM,aAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA,CAAA;AAAA,KACX;AAAA,IAEA,2BAA6B,EAAA;AAAA,MAC3B,MAAM,aAAc,CAAA,IAAA;AAAA,MACpB,OAAS,EAAA,KAAA;AAAA,KACX;AAAA,IAGA,eAAiB,EAAA;AAAA,MACf,MAAM,aAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA,GAAA;AAAA,KACX;AAAA,IAKA,cAAgB,EAAA;AAAA,MACd,MAAM,aAAc,CAAA,GAAA;AAAA,MACpB,OAAS,EAAA,GAAA;AAAA,KACX;AAAA,GACF;AAAA,EACA,MAAM,EAEN;AACF,CAAA,CAAA;AAaA,MAAM,uBAAuD,CAAA;AAAA,EAG3D,YAAoB,OAAkB,EAAA;AAAlB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAAmB;AAAA,EAEvC,KAAA,CAAM,iBAA8B,KAAwB,EAAA;AAC1D,IAAM,MAAA,SAAA,GAAY,IAAK,CAAA,OAAA,CAAQ,UAAW,CAAA,QAAA,CAAA;AAE1C,IAAA,IAAI,IAAO,GAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AAIX,IAAA,eAAA,CAAgB,SAAY,GAAA,IAAA,CAAA;AAE5B,IAAI,IAAA,YAAA,GAAe,eAAgB,CAAA,aAAA,CAAc,+BAA+B,CAAA,CAAA;AAEhF,IAAA,IAAI,cAAiB,GAAA,CAAA,CAAA;AACrB,IAAA,IAAI,gBAAmB,GAAA,CAAA,CAAA,CAAA;AACvB,IAAA,IAAI,UAAa,GAAA,IAAA,CAAA;AAEjB,IAAA,MAAM,yBAAyB,MAAM;AACnC,MAAA,IAAI,MAAM,2BAA6B,EAAA;AACrC,QAAA,UAAA,GAAa,IAAK,CAAA,OAAA,CAAQ,aAAc,CAAA,OAAA,CAAQ,MAAM,kBAAkB,CAAA,CAAA;AAAA,OACnE,MAAA;AACL,QAAA,UAAA,GAAa,KAAM,CAAA,kBAAA,CAAA;AAAA,OACrB;AACA,MAAmB,gBAAA,GAAA,CAAA,CAAA,CAAA;AACnB,MAAuB,sBAAA,EAAA,CAAA;AAAA,KACzB,CAAA;AAEA,IAAA,MAAM,YAAY,MAAM;AACtB,MAAA,SAAA,CAAU,MAAO,EAAA,CAAA;AACjB,MAAI,IAAA,KAAA,CAAM,oBAAoB,OAAS,EAAA;AACrC,QAAA,SAAA,CAAU,qBAAsB,EAAA,CAAA;AAAA,OAClC;AACA,MAAuB,sBAAA,EAAA,CAAA;AAAA,KACzB,CAAA;AAEA,IAAA,MAAM,yBAAyB,MAAM;AACnC,MAAA,gBAAA,EAAA,CAAA;AACA,MAAI,IAAA,gBAAA,IAAoB,WAAW,MAAQ,EAAA;AACzC,QAAA,cAAA,EAAA,CAAA;AACA,QAAI,IAAA,cAAA,IAAkB,MAAM,qBAAuB,EAAA;AACjD,UAAiB,gBAAA,EAAA,CAAA;AAAA,SACZ,MAAA;AACL,UAAuB,sBAAA,EAAA,CAAA;AAAA,SACzB;AAAA,OACK,MAAA;AACL,QAAA,IAAI,KAAK,UAAW,CAAA,gBAAA,CAAA,CAAA;AACpB,QAAA,6BAAA,CAA8B,EAAE,CAAA,CAAA;AAAA,OAClC;AAAA,KACF,CAAA;AAEA,IAAM,MAAA,6BAAA,GAAgC,CAAC,EAAO,KAAA;AAC5C,MAAI,IAAA,OAAA,GAAU,CAA4C,yCAAA,EAAA,KAAA,CAAM,UAAwB,CAAA,WAAA,EAAA,KAAA,CAAM,+BAA+B,KAAM,CAAA,UAAA,CAAA,6EAAA,EAA0F,EAAG,CAAA,CAAA,CAAA,CAAA,OAAA,EAAY,EAAG,CAAA,CAAA,CAAA,CAAA,UAAA,CAAA,CAAA;AAC/O,MAAA,YAAA,CAAa,SAAY,GAAA,OAAA,CAAA;AAEzB,MAAI,IAAA,MAAA,GAAS,YAAa,CAAA,aAAA,CAA2B,oBAAoB,CAAA,CAAA;AAEzE,MAAI,IAAA,KAAA,CAAM,oBAAoB,OAAS,EAAA;AACrC,QAAA,MAAA,CAAO,MAAM,MAAS,GAAA,SAAA,CAAA;AACtB,QAAO,MAAA,CAAA,gBAAA,CAAiB,SAAS,MAAM;AACrC,UAAuB,sBAAA,EAAA,CAAA;AAAA,SACxB,CAAA,CAAA;AAAA,OACH;AAEA,MAAI,IAAA,KAAA,CAAM,oBAAoB,MAAQ,EAAA;AACpC,QAAI,IAAA,EAAA,GAAK,OAAO,qBAAsB,EAAA,CAAA;AACtC,QAAA,IAAI,CAAI,GAAA,EAAA,CAAG,IAAO,GAAA,EAAA,CAAG,KAAQ,GAAA,CAAA,CAAA;AAC7B,QAAA,IAAI,CAAI,GAAA,EAAA,CAAG,GAAM,GAAA,EAAA,CAAG,MAAS,GAAA,CAAA,CAAA;AAE7B,QAAA,IAAI,YAAuB,GAAA,WAAA,CAAY,GAAI,EAAA,GAAI,KAAM,CAAA,eAAA,CAAA;AACrD,QAAA,IAAI,YAAoB,WAAY,CAAA,GAAA,EAAQ,GAAA,KAAA,CAAM,kBAAkB,KAAM,CAAA,cAAA,CAAA;AAE1E,QAAA,MAAM,YAAY,MAAM;AACtB,UAAI,IAAA,WAAA,CAAY,GAAI,EAAA,GAAI,YAAc,EAAA;AACpC,YAAU,SAAA,CAAA,cAAA,CAAe,GAAG,CAAC,CAAA,CAAA;AAAA,WAC/B;AACA,UAAI,IAAA,WAAA,CAAY,GAAI,EAAA,GAAI,SAAW,EAAA;AACjC,YAAA,qBAAA,CAAsB,SAAS,CAAA,CAAA;AAAA,WAC1B,MAAA;AACL,YAAuB,sBAAA,EAAA,CAAA;AAAA,WACzB;AAAA,SACF,CAAA;AAEA,QAAA,qBAAA,CAAsB,SAAS,CAAA,CAAA;AAAA,OACjC;AAAA,KACF,CAAA;AAEA,IAAA,MAAM,mBAAmB,MAAM;AAC7B,MAAI,IAAA,KAAA,CAAM,oBAAoB,OAAS,EAAA;AACrC,QAAA,SAAA,CAAU,oBAAqB,EAAA,CAAA;AAAA,OACjC;AACA,MAAA,YAAA,CAAa,SAAY,GAAA,EAAA,CAAA;AACzB,MAAU,SAAA,EAAA,CAAA;AAAA,KACZ,CAAA;AAGA,IAAA,MAAM,YAAY,MAAM;AACtB,MAAA,SAAA,CAAU,KAAM,EAAA,CAAA;AAChB,MAAA,SAAA,CAAU,eAAgB,EAAA,CAAA;AAC1B,MAAA,SAAA,CAAU,SAAU,EAAA,CAAA;AAGpB,MAAA,IAAI,aAAa,EAAC,CAAA;AAGlB,MAAK,IAAA,CAAA,OAAA,CAAQ,YAAY,UAAU,CAAA,CAAA;AAAA,KACrC,CAAA;AAEA,IAAU,SAAA,EAAA,CAAA;AAAA,GACZ;AACF,CAAA;AAhHM,uBAAA,CACG,IAAO,GAAA,IAAA;;;;"}