{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"animation\",\n  version: version,\n  parameters: {\n    /** Each element of the array is a path to an image file. */\n    stimuli: {\n      type: ParameterType.IMAGE,\n      default: undefined,\n      array: true,\n    },\n    /** How long to display each image in milliseconds. */\n    frame_time: {\n      type: ParameterType.INT,\n      default: 250,\n    },\n    /** If greater than 0, then a gap will be shown between each image in the sequence. This parameter\n     * specifies the length of the gap in milliseconds.\n     */\n    frame_isi: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /** How many times to show the entire sequence. There will be no gap (other than the gap specified by `frame_isi`)\n     * between repetitions. */\n    sequence_reps: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /** This array contains the key(s) that the participant is allowed to press in order to respond to the stimulus.\n     * Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) - see\n     * [this page](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values) and\n     * [this page (event.key column)](https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/)\n     * for more examples. Any key presses that are not listed in the array will be ignored. The default value of `\"ALL_KEYS\"`\n     * means that all keys will be accepted as valid responses. Specifying `\"NO_KEYS\"` will mean that no responses are allowed. */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that\n     * it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key(s) to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /**\n     * If true, the images will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive\n     * images in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous\n     * versions of jsPsych.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** An array, where each element is an object that represents a stimulus in the animation sequence. Each object has\n     * a `stimulus` property, which is the image that was displayed, and a `time` property, which is the time in ms,\n     * measured from when the sequence began, that the stimulus was displayed. The array will be encoded in JSON format\n     * when data is saved using either the `.json()` or `.csv()` functions.\n     */\n    animation_sequence: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      parameters: {\n        stimulus: {\n          type: ParameterType.STRING,\n        },\n        time: {\n          type: ParameterType.INT,\n        },\n      },\n    },\n    /** An array, where each element is an object representing a response given by the participant. Each object has a\n     * `stimulus` property, indicating which image was displayed when the key was pressed, an `rt` property, indicating\n     * the time of the key press relative to the start of the animation, and a `key_press` property, indicating which\n     * key was pressed. The array will be encoded in JSON format when data is saved using either the `.json()` or `.csv()`\n     * functions.\n     */\n    response: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      parameters: {\n        stimulus: {\n          type: ParameterType.STRING,\n        },\n        rt: {\n          type: ParameterType.INT,\n        },\n        key_press: {\n          type: ParameterType.STRING,\n        },\n      },\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays a sequence of images at a fixed frame rate. The sequence can be looped a specified number of times.\n * The participant is free to respond at any point during the animation, and the time of the response is recorded.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/animation/ animation plugin documentation on jspsych.org}\n */\nclass AnimationPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var interval_time = trial.frame_time + trial.frame_isi;\n    var animate_frame = 0;\n    var reps = 0;\n    var startTime = performance.now();\n    var animation_sequence = [];\n    var responses = [];\n    var current_stim = \"\";\n\n    if (trial.render_on_canvas) {\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      var canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-animation-image\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      display_element.insertBefore(canvas, null);\n      var ctx = canvas.getContext(\"2d\");\n    }\n\n    const endTrial = () => {\n      this.jsPsych.pluginAPI.cancelKeyboardResponse(response_listener);\n\n      var trial_data = {\n        animation_sequence: animation_sequence,\n        response: responses,\n      };\n\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    var animate_interval = setInterval(() => {\n      var showImage = true;\n      if (!trial.render_on_canvas) {\n        display_element.innerHTML = \"\"; // clear everything\n      }\n      animate_frame++;\n      if (animate_frame == trial.stimuli.length) {\n        animate_frame = 0;\n        reps++;\n        if (reps >= trial.sequence_reps) {\n          endTrial();\n          clearInterval(animate_interval);\n          showImage = false;\n        }\n      }\n      if (showImage) {\n        show_next_frame();\n      }\n    }, interval_time);\n\n    const show_next_frame = () => {\n      if (trial.render_on_canvas) {\n        display_element.querySelector<HTMLElement>(\"#jspsych-animation-image\").style.visibility =\n          \"visible\";\n        var img = new Image();\n        img.src = trial.stimuli[animate_frame];\n        canvas.height = img.naturalHeight;\n        canvas.width = img.naturalWidth;\n        ctx.drawImage(img, 0, 0);\n        if (trial.prompt !== null && animate_frame == 0 && reps == 0) {\n          display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n        }\n      } else {\n        // show image\n        display_element.innerHTML =\n          '<img src=\"' + trial.stimuli[animate_frame] + '\" id=\"jspsych-animation-image\"></img>';\n        if (trial.prompt !== null) {\n          display_element.innerHTML += trial.prompt;\n        }\n      }\n      current_stim = trial.stimuli[animate_frame];\n\n      // record when image was shown\n      animation_sequence.push({\n        stimulus: trial.stimuli[animate_frame],\n        time: Math.round(performance.now() - startTime),\n      });\n\n      if (trial.frame_isi > 0) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          display_element.querySelector<HTMLElement>(\"#jspsych-animation-image\").style.visibility =\n            \"hidden\";\n          current_stim = \"blank\";\n          // record when blank image was shown\n          animation_sequence.push({\n            stimulus: \"blank\",\n            time: Math.round(performance.now() - startTime),\n          });\n        }, trial.frame_time);\n      }\n    };\n\n    var after_response = (info) => {\n      responses.push({\n        key_press: info.key,\n        rt: info.rt,\n        stimulus: current_stim,\n      });\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-animation-image\").className += \" responded\";\n    };\n\n    // hold the jspsych response listener object in memory\n    // so that we can turn off the response collection when\n    // the trial ends\n    var response_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: after_response,\n      valid_responses: trial.choices,\n      rt_method: \"performance\",\n      persist: true,\n      allow_held_key: false,\n    });\n\n    // show the first frame immediately\n    show_next_frame();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const fake_animation_sequence = [];\n    const fake_responses = [];\n    let t = 0;\n    const check_if_fake_response_generated: () => boolean = () => {\n      return this.jsPsych.randomization.sampleWithReplacement([true, false], 1, [1, 10])[0];\n    };\n    for (let i = 0; i < trial.sequence_reps; i++) {\n      for (const frame of trial.stimuli) {\n        fake_animation_sequence.push({\n          stimulus: frame,\n          time: t,\n        });\n        if (check_if_fake_response_generated()) {\n          fake_responses.push({\n            key_press: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n            rt: t + this.jsPsych.randomization.randomInt(0, trial.frame_time - 1),\n            current_stim: frame,\n          });\n        }\n        t += trial.frame_time;\n        if (trial.frame_isi > 0) {\n          fake_animation_sequence.push({\n            stimulus: \"blank\",\n            time: t,\n          });\n          if (check_if_fake_response_generated()) {\n            fake_responses.push({\n              key_press: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n              rt: t + this.jsPsych.randomization.randomInt(0, trial.frame_isi - 1),\n              current_stim: \"blank\",\n            });\n          }\n          t += trial.frame_isi;\n        }\n      }\n    }\n\n    const default_data = {\n      animation_sequence: fake_animation_sequence,\n      response: fake_responses,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    for (const response of data.response) {\n      this.jsPsych.pluginAPI.pressKey(response.key_press, response.rt);\n    }\n  }\n}\n\nexport default AnimationPlugin;\n"],"names":["info","version","ParameterType","AnimationPlugin","jsPsych","display_element","trial","interval_time","animate_frame","reps","startTime","animation_sequence","responses","current_stim","canvas","ctx","endTrial","response_listener","trial_data","animate_interval","showImage","show_next_frame","img","after_response","simulation_mode","simulation_options","load_callback","fake_animation_sequence","fake_responses","t","check_if_fake_response_generated","i","frame","default_data","data","response"],"mappings":"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"}