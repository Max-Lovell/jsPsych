{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"animation\",\n  version: version,\n  parameters: {\n    /** Each element of the array is a path to an image file. */\n    stimuli: {\n      type: ParameterType.IMAGE,\n      default: undefined,\n      array: true,\n    },\n    /** How long to display each image in milliseconds. */\n    frame_time: {\n      type: ParameterType.INT,\n      default: 250,\n    },\n    /** If greater than 0, then a gap will be shown between each image in the sequence. This parameter\n     * specifies the length of the gap in milliseconds.\n     */\n    frame_isi: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /** How many times to show the entire sequence. There will be no gap (other than the gap specified by `frame_isi`)\n     * between repetitions. */\n    sequence_reps: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /** This array contains the key(s) that the participant is allowed to press in order to respond to the stimulus.\n     * Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) - see\n     * [this page](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values) and\n     * [this page (event.key column)](https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/)\n     * for more examples. Any key presses that are not listed in the array will be ignored. The default value of `\"ALL_KEYS\"`\n     * means that all keys will be accepted as valid responses. Specifying `\"NO_KEYS\"` will mean that no responses are allowed. */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that\n     * it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key(s) to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /**\n     * If true, the images will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive\n     * images in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous\n     * versions of jsPsych.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** An array, where each element is an object that represents a stimulus in the animation sequence. Each object has\n     * a `stimulus` property, which is the image that was displayed, and a `time` property, which is the time in ms,\n     * measured from when the sequence began, that the stimulus was displayed. The array will be encoded in JSON format\n     * when data is saved using either the `.json()` or `.csv()` functions.\n     */\n    animation_sequence: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      parameters: {\n        stimulus: {\n          type: ParameterType.STRING,\n        },\n        time: {\n          type: ParameterType.INT,\n        },\n      },\n    },\n    /** An array, where each element is an object representing a response given by the participant. Each object has a\n     * `stimulus` property, indicating which image was displayed when the key was pressed, an `rt` property, indicating\n     * the time of the key press relative to the start of the animation, and a `key_press` property, indicating which\n     * key was pressed. The array will be encoded in JSON format when data is saved using either the `.json()` or `.csv()`\n     * functions.\n     */\n    response: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      parameters: {\n        stimulus: {\n          type: ParameterType.STRING,\n        },\n        rt: {\n          type: ParameterType.INT,\n        },\n        key_press: {\n          type: ParameterType.STRING,\n        },\n      },\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays a sequence of images at a fixed frame rate. The sequence can be looped a specified number of times.\n * The participant is free to respond at any point during the animation, and the time of the response is recorded.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/animation/ animation plugin documentation on jspsych.org}\n */\nclass AnimationPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var interval_time = trial.frame_time + trial.frame_isi;\n    var animate_frame = 0;\n    var reps = 0;\n    var startTime = performance.now();\n    var animation_sequence = [];\n    var responses = [];\n    var current_stim = \"\";\n\n    if (trial.render_on_canvas) {\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      var canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-animation-image\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      display_element.insertBefore(canvas, null);\n      var ctx = canvas.getContext(\"2d\");\n    }\n\n    const endTrial = () => {\n      this.jsPsych.pluginAPI.cancelKeyboardResponse(response_listener);\n\n      var trial_data = {\n        animation_sequence: animation_sequence,\n        response: responses,\n      };\n\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    var animate_interval = setInterval(() => {\n      var showImage = true;\n      if (!trial.render_on_canvas) {\n        display_element.innerHTML = \"\"; // clear everything\n      }\n      animate_frame++;\n      if (animate_frame == trial.stimuli.length) {\n        animate_frame = 0;\n        reps++;\n        if (reps >= trial.sequence_reps) {\n          endTrial();\n          clearInterval(animate_interval);\n          showImage = false;\n        }\n      }\n      if (showImage) {\n        show_next_frame();\n      }\n    }, interval_time);\n\n    const show_next_frame = () => {\n      if (trial.render_on_canvas) {\n        display_element.querySelector<HTMLElement>(\"#jspsych-animation-image\").style.visibility =\n          \"visible\";\n        var img = new Image();\n        img.src = trial.stimuli[animate_frame];\n        canvas.height = img.naturalHeight;\n        canvas.width = img.naturalWidth;\n        ctx.drawImage(img, 0, 0);\n        if (trial.prompt !== null && animate_frame == 0 && reps == 0) {\n          display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n        }\n      } else {\n        // show image\n        display_element.innerHTML =\n          '<img src=\"' + trial.stimuli[animate_frame] + '\" id=\"jspsych-animation-image\"></img>';\n        if (trial.prompt !== null) {\n          display_element.innerHTML += trial.prompt;\n        }\n      }\n      current_stim = trial.stimuli[animate_frame];\n\n      // record when image was shown\n      animation_sequence.push({\n        stimulus: trial.stimuli[animate_frame],\n        time: Math.round(performance.now() - startTime),\n      });\n\n      if (trial.frame_isi > 0) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          display_element.querySelector<HTMLElement>(\"#jspsych-animation-image\").style.visibility =\n            \"hidden\";\n          current_stim = \"blank\";\n          // record when blank image was shown\n          animation_sequence.push({\n            stimulus: \"blank\",\n            time: Math.round(performance.now() - startTime),\n          });\n        }, trial.frame_time);\n      }\n    };\n\n    var after_response = (info) => {\n      responses.push({\n        key_press: info.key,\n        rt: info.rt,\n        stimulus: current_stim,\n      });\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-animation-image\").className += \" responded\";\n    };\n\n    // hold the jspsych response listener object in memory\n    // so that we can turn off the response collection when\n    // the trial ends\n    var response_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: after_response,\n      valid_responses: trial.choices,\n      rt_method: \"performance\",\n      persist: true,\n      allow_held_key: false,\n    });\n\n    // show the first frame immediately\n    show_next_frame();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const fake_animation_sequence = [];\n    const fake_responses = [];\n    let t = 0;\n    const check_if_fake_response_generated: () => boolean = () => {\n      return this.jsPsych.randomization.sampleWithReplacement([true, false], 1, [1, 10])[0];\n    };\n    for (let i = 0; i < trial.sequence_reps; i++) {\n      for (const frame of trial.stimuli) {\n        fake_animation_sequence.push({\n          stimulus: frame,\n          time: t,\n        });\n        if (check_if_fake_response_generated()) {\n          fake_responses.push({\n            key_press: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n            rt: t + this.jsPsych.randomization.randomInt(0, trial.frame_time - 1),\n            current_stim: frame,\n          });\n        }\n        t += trial.frame_time;\n        if (trial.frame_isi > 0) {\n          fake_animation_sequence.push({\n            stimulus: \"blank\",\n            time: t,\n          });\n          if (check_if_fake_response_generated()) {\n            fake_responses.push({\n              key_press: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n              rt: t + this.jsPsych.randomization.randomInt(0, trial.frame_isi - 1),\n              current_stim: \"blank\",\n            });\n          }\n          t += trial.frame_isi;\n        }\n      }\n    }\n\n    const default_data = {\n      animation_sequence: fake_animation_sequence,\n      response: fake_responses,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    for (const response of data.response) {\n      this.jsPsych.pluginAPI.pressKey(response.key_press, response.rt);\n    }\n  }\n}\n\nexport default AnimationPlugin;\n"],"names":["version","ParameterType","info"],"mappings":"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"}