var jsPsychCategorizeHtml = (function (s) {
  "use strict";
  var c = {
    name: "@jspsych/plugin-categorize-html",
    version: "2.0.0",
    description: "jspsych plugin for categorization trials with feedback",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-categorize-html",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/categorize-html",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const p = {
    name: "categorize-html",
    version: c.version,
    parameters: {
      stimulus: { type: s.ParameterType.HTML_STRING, default: void 0 },
      key_answer: { type: s.ParameterType.KEY, default: void 0 },
      choices: { type: s.ParameterType.KEYS, default: "ALL_KEYS" },
      text_answer: { type: s.ParameterType.HTML_STRING, default: null },
      correct_text: {
        type: s.ParameterType.HTML_STRING,
        default: "<p class='feedback'>Correct</p>",
      },
      incorrect_text: {
        type: s.ParameterType.HTML_STRING,
        default: "<p class='feedback'>Incorrect</p>",
      },
      prompt: { type: s.ParameterType.HTML_STRING, default: null },
      force_correct_button_press: { type: s.ParameterType.BOOL, default: !1 },
      show_stim_with_feedback: { type: s.ParameterType.BOOL, default: !1 },
      show_feedback_on_timeout: { type: s.ParameterType.BOOL, default: !1 },
      timeout_message: {
        type: s.ParameterType.HTML_STRING,
        default: "<p>Please respond faster.</p>",
      },
      stimulus_duration: { type: s.ParameterType.INT, default: null },
      trial_duration: { type: s.ParameterType.INT, default: null },
      feedback_duration: { type: s.ParameterType.INT, default: 2e3 },
    },
    data: {
      stimulus: { type: s.ParameterType.STRING },
      response: { type: s.ParameterType.STRING },
      rt: { type: s.ParameterType.INT },
      correct: { type: s.ParameterType.BOOL },
    },
  };
  class o {
    constructor(t) {
      this.jsPsych = t;
    }
    trial(t, e) {
      (t.innerHTML =
        '<div id="jspsych-categorize-html-stimulus" class="jspsych-categorize-html-stimulus">' +
        e.stimulus +
        "</div>"),
        e.stimulus_duration !== null &&
          this.jsPsych.pluginAPI.setTimeout(() => {
            t.querySelector("#jspsych-categorize-html-stimulus").style.visibility = "hidden";
          }, e.stimulus_duration),
        e.prompt !== null && (t.innerHTML += e.prompt);
      var r = {};
      const i = (l) => {
        this.jsPsych.pluginAPI.cancelAllKeyboardResponses();
        var n = !1;
        this.jsPsych.pluginAPI.compareKeys(e.key_answer, l.key) && (n = !0),
          (r = { rt: l.rt, correct: n, stimulus: e.stimulus, response: l.key });
        var u = l.rt == null;
        m(n, u);
      };
      this.jsPsych.pluginAPI.getKeyboardResponse({
        callback_function: i,
        valid_responses: e.choices,
        rt_method: "performance",
        persist: !1,
        allow_held_key: !1,
      }),
        e.trial_duration !== null &&
          this.jsPsych.pluginAPI.setTimeout(() => {
            i({ key: null, rt: null });
          }, e.trial_duration);
      const a = () => {
          this.jsPsych.finishTrial(r);
        },
        m = (l, n) => {
          if (n && !e.show_feedback_on_timeout) t.innerHTML += e.timeout_message;
          else {
            e.show_stim_with_feedback &&
              (t.innerHTML =
                '<div id="jspsych-categorize-html-stimulus" class="jspsych-categorize-html-stimulus">' +
                e.stimulus +
                "</div>");
            var u = "";
            l
              ? (u = e.correct_text.replace("%ANS%", e.text_answer))
              : (u = e.incorrect_text.replace("%ANS%", e.text_answer)),
              (t.innerHTML += u);
          }
          if (
            e.force_correct_button_press &&
            l === !1 &&
            ((n && e.show_feedback_on_timeout) || !n)
          ) {
            var d = (h) => {
              a();
            };
            this.jsPsych.pluginAPI.getKeyboardResponse({
              callback_function: d,
              valid_responses: [e.key_answer],
              rt_method: "performance",
              persist: !1,
              allow_held_key: !1,
            });
          } else this.jsPsych.pluginAPI.setTimeout(a, e.feedback_duration);
        };
    }
    simulate(t, e, r, i) {
      e == "data-only" && (i(), this.simulate_data_only(t, r)),
        e == "visual" && this.simulate_visual(t, r, i);
    }
    create_simulation_data(t, e) {
      const r = this.jsPsych.pluginAPI.getValidKey(t.choices),
        i = {
          stimulus: t.stimulus,
          response: r,
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, !0),
          correct: r == t.key_answer,
        },
        a = this.jsPsych.pluginAPI.mergeSimulationData(i, e);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(t, a), a;
    }
    simulate_data_only(t, e) {
      const r = this.create_simulation_data(t, e);
      this.jsPsych.finishTrial(r);
    }
    simulate_visual(t, e, r) {
      const i = this.create_simulation_data(t, e),
        a = this.jsPsych.getDisplayElement();
      this.trial(a, t),
        r(),
        i.rt !== null && this.jsPsych.pluginAPI.pressKey(i.response, i.rt),
        t.force_correct_button_press &&
          !i.correct &&
          this.jsPsych.pluginAPI.pressKey(t.key_answer, i.rt + t.feedback_duration / 2);
    }
  }
  return (o.info = p), o;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
