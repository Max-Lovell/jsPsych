{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"categorize-html\",\n  version: version,\n  parameters: {\n    /** The HTML stimulus to display. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /** The key character indicating the correct response. */\n    key_answer: {\n      type: ParameterType.KEY,\n      default: undefined,\n    },\n    /** This array contains the key(s) that the participant is allowed to press in order to respond to the stimulus. Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) - see [this page](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values) and [this page (event.key column)](https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/) for more examples. Any key presses that are not listed in the array will be ignored. The default value of `\"ALL_KEYS\"` means that all keys will be accepted as valid responses. Specifying `\"NO_KEYS\"` will mean that no responses are allowed. */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /** A label that is associated with the correct answer. Used in conjunction with the `correct_text` and `incorrect_text` parameters. */\n    text_answer: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** String to show when the correct answer is given. Can contain HTML formatting. The special string `%ANS%` can be used within the string. If present, the plugin will put the `text_answer` for the trial in place of the `%ANS%` string (see example below). */\n    correct_text: {\n      type: ParameterType.HTML_STRING,\n      default: \"<p class='feedback'>Correct</p>\",\n    },\n    /** String to show when the wrong answer is given. Can contain HTML formatting. The special string `%ANS%` can be used within the string. If present, the plugin will put the `text_answer` for the trial in place of the `%ANS%` string (see example below). */\n    incorrect_text: {\n      type: ParameterType.HTML_STRING,\n      default: \"<p class='feedback'>Incorrect</p>\",\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** If set to true, then the participant must press the correct response key after feedback is given in order to advance to the next trial. */\n    force_correct_button_press: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** If set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback. */\n    show_stim_with_feedback: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** If true, then category feedback will be displayed for an incorrect response after a timeout (trial_duration is exceeded). If false, then a timeout message will be shown. */\n    show_feedback_on_timeout: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** The message to show on a timeout non-response. */\n    timeout_message: {\n      type: ParameterType.HTML_STRING,\n      default: \"<p>Please respond faster.</p>\",\n    },\n    /** How long to show the stimulus for (milliseconds). If null, then the stimulus is shown until a response is given. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** The maximum time allowed for a response. If null, then the experiment will wait indefinitely for a response. */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** How long to show the feedback for (milliseconds). */\n    feedback_duration: {\n      type: ParameterType.INT,\n      default: 2000,\n    },\n  },\n  data: {\n    /** Either the path to the image file or the string containing the HTML formatted content that the participant saw on this trial. */\n    stimulus: {\n      type: ParameterType.STRING,\n    },\n    /** Indicates which key the participant pressed.  */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** `true` if the participant got the correct answer, `false` otherwise. */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The categorize html plugin shows an HTML object on the screen. The participant responds by pressing a key. Feedback indicating the correctness of the response is given.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/categorize-html/ categorize-html plugin documentation on jspsych.org}\n */\nclass CategorizeHtmlPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    display_element.innerHTML =\n      '<div id=\"jspsych-categorize-html-stimulus\" class=\"jspsych-categorize-html-stimulus\">' +\n      trial.stimulus +\n      \"</div>\";\n\n    // hide image after time if the timing parameter is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-categorize-html-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // if prompt is set, show prompt\n    if (trial.prompt !== null) {\n      display_element.innerHTML += trial.prompt;\n    }\n\n    var trial_data = {};\n\n    // create response function\n    const after_response = (info: { key: string; rt: number }) => {\n      // clear keyboard listener\n      this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n\n      var correct = false;\n      if (this.jsPsych.pluginAPI.compareKeys(trial.key_answer, info.key)) {\n        correct = true;\n      }\n\n      // save data\n      trial_data = {\n        rt: info.rt,\n        correct: correct,\n        stimulus: trial.stimulus,\n        response: info.key,\n      };\n\n      var timeout = info.rt == null;\n      doFeedback(correct, timeout);\n    };\n\n    this.jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: after_response,\n      valid_responses: trial.choices,\n      rt_method: \"performance\",\n      persist: false,\n      allow_held_key: false,\n    });\n\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        after_response({\n          key: null,\n          rt: null,\n        });\n      }, trial.trial_duration);\n    }\n\n    const endTrial = () => {\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    const doFeedback = (correct, timeout) => {\n      if (timeout && !trial.show_feedback_on_timeout) {\n        display_element.innerHTML += trial.timeout_message;\n      } else {\n        // show image during feedback if flag is set\n        if (trial.show_stim_with_feedback) {\n          display_element.innerHTML =\n            '<div id=\"jspsych-categorize-html-stimulus\" class=\"jspsych-categorize-html-stimulus\">' +\n            trial.stimulus +\n            \"</div>\";\n        }\n\n        // substitute answer in feedback string.\n        var atext = \"\";\n        if (correct) {\n          atext = trial.correct_text.replace(\"%ANS%\", trial.text_answer);\n        } else {\n          atext = trial.incorrect_text.replace(\"%ANS%\", trial.text_answer);\n        }\n\n        // show the feedback\n        display_element.innerHTML += atext;\n      }\n      // check if force correct button press is set\n      if (\n        trial.force_correct_button_press &&\n        correct === false &&\n        ((timeout && trial.show_feedback_on_timeout) || !timeout)\n      ) {\n        var after_forced_response = (info) => {\n          endTrial();\n        };\n\n        this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_forced_response,\n          valid_responses: [trial.key_answer],\n          rt_method: \"performance\",\n          persist: false,\n          allow_held_key: false,\n        });\n      } else {\n        this.jsPsych.pluginAPI.setTimeout(endTrial, trial.feedback_duration);\n      }\n    };\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const key = this.jsPsych.pluginAPI.getValidKey(trial.choices);\n\n    const default_data = {\n      stimulus: trial.stimulus,\n      response: key,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      correct: key == trial.key_answer,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n\n    if (trial.force_correct_button_press && !data.correct) {\n      this.jsPsych.pluginAPI.pressKey(trial.key_answer, data.rt + trial.feedback_duration / 2);\n    }\n  }\n}\n\nexport default CategorizeHtmlPlugin;\n"],"names":["version","ParameterType","info"],"mappings":"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"}