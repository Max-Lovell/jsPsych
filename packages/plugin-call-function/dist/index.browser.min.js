var jsPsychCallFunction = (function (s) {
  "use strict";
  var a = {
    name: "@jspsych/plugin-call-function",
    version: "2.0.0",
    description: "jsPsych plugin for calling an arbitrary function during a jspsych experiment",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-call-function",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/call-function",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const u = {
    name: "call-function",
    version: a.version,
    parameters: {
      func: { type: s.ParameterType.FUNCTION, default: void 0 },
      async: { type: s.ParameterType.BOOL, default: !1 },
    },
    data: { value: { type: s.ParameterType.COMPLEX, default: void 0 } },
  };
  class n {
    constructor(c) {
      this.jsPsych = c;
    }
    trial(c, t) {
      let e;
      const r = () => {
        const i = { value: e };
        this.jsPsych.finishTrial(i);
      };
      if (t.async) {
        const i = (l) => {
          (e = l), r();
        };
        t.func(i);
      } else (e = t.func()), r();
    }
  }
  return (n.info = u), n;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
