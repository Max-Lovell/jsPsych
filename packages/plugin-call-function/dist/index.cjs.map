{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"call-function\",\n  version: version,\n  parameters: {\n    /** The function to call. */\n    func: {\n      type: ParameterType.FUNCTION,\n      default: undefined,\n    },\n    /** Set to true if `func` is an asynchoronous function. If this is true, then the first argument passed to `func`\n     * will be a callback that you should call when the async operation is complete. You can pass data to the callback.\n     * See example below.\n     */\n    async: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /** The return value of the called function. */\n    value: {\n      type: ParameterType.COMPLEX,\n      default: undefined,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin executes a specified function. This allows the experimenter to run arbitrary code at any point during the experiment.\n *\n * The function cannot take any arguments. If arguments are needed, then an anonymous function should be used to wrap the function call (see examples below).\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/call-function/ call-function plugin documentation on jspsych.org}\n */\nclass CallFunctionPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    //trial.post_trial_gap = 0;  // TO DO: TS error: number not assignable to type any[]. I don't think this param should be an array..?\n    let return_val;\n\n    const end_trial = () => {\n      const trial_data = {\n        value: return_val,\n      };\n\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    if (trial.async) {\n      const done = (data) => {\n        return_val = data;\n        end_trial();\n      };\n      trial.func(done);\n    } else {\n      return_val = trial.func();\n      end_trial();\n    }\n  }\n\n  // no explicit simulate() mode for this plugin because it would just do\n  // the same thing as the regular plugin\n}\n\nexport default CallFunctionPlugin;\n"],"names":["version","ParameterType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAM,IAAc,GAAA;AAAA,EAClB,IAAM,EAAA,eAAA;AAAA,WACNA,gBAAA;AAAA,EACA,UAAY,EAAA;AAAA,IAEV,IAAM,EAAA;AAAA,MACJ,MAAMC,qBAAc,CAAA,QAAA;AAAA,MACpB,OAAS,EAAA,KAAA,CAAA;AAAA,KACX;AAAA,IAKA,KAAO,EAAA;AAAA,MACL,MAAMA,qBAAc,CAAA,IAAA;AAAA,MACpB,OAAS,EAAA,KAAA;AAAA,KACX;AAAA,GACF;AAAA,EACA,IAAM,EAAA;AAAA,IAEJ,KAAO,EAAA;AAAA,MACL,MAAMA,qBAAc,CAAA,OAAA;AAAA,MACpB,OAAS,EAAA,KAAA,CAAA;AAAA,KACX;AAAA,GACF;AACF,CAAA,CAAA;AAYA,MAAM,kBAAkD,CAAA;AAAA,EAGtD,YAAoB,OAAkB,EAAA;AAAlB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAAmB;AAAA,EAEvC,KAAA,CAAM,iBAA8B,KAAwB,EAAA;AAE1D,IAAI,IAAA,UAAA,CAAA;AAEJ,IAAA,MAAM,YAAY,MAAM;AACtB,MAAA,MAAM,UAAa,GAAA;AAAA,QACjB,KAAO,EAAA,UAAA;AAAA,OACT,CAAA;AAEA,MAAK,IAAA,CAAA,OAAA,CAAQ,YAAY,UAAU,CAAA,CAAA;AAAA,KACrC,CAAA;AAEA,IAAA,IAAI,MAAM,KAAO,EAAA;AACf,MAAM,MAAA,IAAA,GAAO,CAAC,IAAS,KAAA;AACrB,QAAa,UAAA,GAAA,IAAA,CAAA;AACb,QAAU,SAAA,EAAA,CAAA;AAAA,OACZ,CAAA;AACA,MAAA,KAAA,CAAM,KAAK,IAAI,CAAA,CAAA;AAAA,KACV,MAAA;AACL,MAAA,UAAA,GAAa,MAAM,IAAK,EAAA,CAAA;AACxB,MAAU,SAAA,EAAA,CAAA;AAAA,KACZ;AAAA,GACF;AAIF,CAAA;AA/BM,kBAAA,CACG,IAAO,GAAA,IAAA;;;;"}