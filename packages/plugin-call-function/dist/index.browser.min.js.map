{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"call-function\",\n  version: version,\n  parameters: {\n    /** The function to call. */\n    func: {\n      type: ParameterType.FUNCTION,\n      default: undefined,\n    },\n    /** Set to true if `func` is an asynchoronous function. If this is true, then the first argument passed to `func`\n     * will be a callback that you should call when the async operation is complete. You can pass data to the callback.\n     * See example below.\n     */\n    async: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /** The return value of the called function. */\n    value: {\n      type: ParameterType.COMPLEX,\n      default: undefined,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin executes a specified function. This allows the experimenter to run arbitrary code at any point during the experiment.\n *\n * The function cannot take any arguments. If arguments are needed, then an anonymous function should be used to wrap the function call (see examples below).\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/call-function/ call-function plugin documentation on jspsych.org}\n */\nclass CallFunctionPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    //trial.post_trial_gap = 0;  // TO DO: TS error: number not assignable to type any[]. I don't think this param should be an array..?\n    let return_val;\n\n    const end_trial = () => {\n      const trial_data = {\n        value: return_val,\n      };\n\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    if (trial.async) {\n      const done = (data) => {\n        return_val = data;\n        end_trial();\n      };\n      trial.func(done);\n    } else {\n      return_val = trial.func();\n      end_trial();\n    }\n  }\n\n  // no explicit simulate() mode for this plugin because it would just do\n  // the same thing as the regular plugin\n}\n\nexport default CallFunctionPlugin;\n"],"names":["info","version","ParameterType","CallFunctionPlugin","jsPsych","display_element","trial","return_val","end_trial","trial_data","done","data"],"mappings":"s5BAIA,MAAMA,EAAc,CAClB,KAAM,gBACN,QAASC,EAAAA,QACT,WAAY,CAEV,KAAM,CACJ,KAAMC,EAAAA,cAAc,SACpB,QAAS,MACX,EAKA,MAAO,CACL,KAAMA,EAAAA,cAAc,KACpB,QAAS,EACX,CACF,EACA,KAAM,CAEJ,MAAO,CACL,KAAMA,gBAAc,QACpB,QAAS,MACX,CACF,CACF,EAYA,MAAMC,CAAkD,CAGtD,YAAoBC,EAAkB,CAAlB,KAAA,QAAAA,CAAmB,CAEvC,MAAMC,EAA8BC,EAAwB,CAE1D,IAAIC,EAEJ,MAAMC,EAAY,IAAM,CACtB,MAAMC,EAAa,CACjB,MAAOF,CACT,EAEA,KAAK,QAAQ,YAAYE,CAAU,CACrC,EAEA,GAAIH,EAAM,MAAO,CACf,MAAMI,EAAQC,GAAS,CACrBJ,EAAaI,EACbH,GACF,EACAF,EAAM,KAAKI,CAAI,CACjB,MACEH,EAAaD,EAAM,KAAK,EACxBE,EAAU,CAEd,CAIF,CA/BML,OAAAA,EACG,KAAOH"}