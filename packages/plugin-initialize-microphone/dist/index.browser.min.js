var jsPsychInitializeMicrophone = (function (o) {
  "use strict";
  var u = {
      name: "@jspsych/plugin-initialize-microphone",
      version: "2.0.0",
      description: "jsPsych plugin for getting permission to initialize the user's microphone",
      type: "module",
      main: "dist/index.cjs",
      exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
      typings: "dist/index.d.ts",
      unpkg: "dist/index.browser.min.js",
      files: ["src", "dist"],
      source: "src/index.ts",
      scripts: {
        test: "jest --passWithNoTests",
        "test:watch": "npm test -- --watch",
        tsc: "tsc",
        build: "rollup --config",
        "build:watch": "npm run build -- --watch",
      },
      repository: {
        type: "git",
        url: "git+https://github.com/jspsych/jsPsych.git",
        directory: "packages/plugin-initialize-microphone",
      },
      author: "Josh de Leeuw",
      license: "MIT",
      bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
      homepage: "https://www.jspsych.org/latest/plugins/initialize-microphone",
      peerDependencies: { jspsych: ">=7.1.0" },
      devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
    },
    d = (p, e, i) =>
      new Promise((s, t) => {
        var n = (r) => {
            try {
              c(i.next(r));
            } catch (l) {
              t(l);
            }
          },
          a = (r) => {
            try {
              c(i.throw(r));
            } catch (l) {
              t(l);
            }
          },
          c = (r) => (r.done ? s(r.value) : Promise.resolve(r.value).then(n, a));
        c((i = i.apply(p, e)).next());
      });
  const m = {
    name: "initialize-microphone",
    version: u.version,
    parameters: {
      device_select_message: {
        type: o.ParameterType.HTML_STRING,
        default: "<p>Please select the microphone you would like to use.</p>",
      },
      button_label: { type: o.ParameterType.STRING, default: "Use this microphone" },
    },
    data: { device_id: { type: o.ParameterType.STRING } },
  };
  class h {
    constructor(e) {
      this.jsPsych = e;
    }
    trial(e, i) {
      this.run_trial(e, i).then((s) => {
        this.jsPsych.finishTrial({ device_id: s });
      });
    }
    run_trial(e, i) {
      return d(this, null, function* () {
        yield this.askForPermission(),
          this.showMicrophoneSelection(e, i),
          this.updateDeviceList(e),
          (navigator.mediaDevices.ondevicechange = (n) => {
            this.updateDeviceList(e);
          });
        const s = yield this.waitForSelection(e),
          t = yield navigator.mediaDevices.getUserMedia({ audio: { deviceId: s } });
        return this.jsPsych.pluginAPI.initializeMicrophoneRecorder(t), s;
      });
    }
    askForPermission() {
      return d(this, null, function* () {
        return yield navigator.mediaDevices.getUserMedia({ audio: !0, video: !1 });
      });
    }
    showMicrophoneSelection(e, i) {
      let s = `
      ${i.device_select_message}
      <select name="mic" id="which-mic" style="font-size:14px; font-family: 'Open Sans', 'Arial', sans-serif; padding: 4px;">
      </select>
      <p><button class="jspsych-btn" id="btn-select-mic">${i.button_label}</button></p>`;
      e.innerHTML = s;
    }
    waitForSelection(e) {
      return new Promise((i) => {
        e.querySelector("#btn-select-mic").addEventListener("click", () => {
          const s = e.querySelector("#which-mic").value;
          i(s);
        });
      });
    }
    updateDeviceList(e) {
      navigator.mediaDevices.enumerateDevices().then((i) => {
        const s = i
          .filter(
            (t) =>
              t.kind === "audioinput" && t.deviceId !== "default" && t.deviceId !== "communications"
          )
          .filter((t, n, a) => a.findIndex((c) => c.groupId == t.groupId) == n);
        (e.querySelector("#which-mic").innerHTML = ""),
          s.forEach((t) => {
            let n = document.createElement("option");
            (n.value = t.deviceId),
              (n.innerHTML = t.label),
              e.querySelector("#which-mic").appendChild(n);
          });
      });
    }
  }
  return (h.info = m), h;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
