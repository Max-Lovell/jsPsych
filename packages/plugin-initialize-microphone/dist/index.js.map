{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"initialize-microphone\",\n  version: version,\n  parameters: {\n    /** The message to display when the user is presented with a dropdown list of available devices. */\n    device_select_message: {\n      type: ParameterType.HTML_STRING,\n      default: `<p>Please select the microphone you would like to use.</p>`,\n    },\n    /** The label for the select button. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Use this microphone\",\n    },\n  },\n  data: {\n    /**  The [device ID](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/deviceId) of the selected microphone. */\n    device_id: {\n      type: ParameterType.STRING,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin asks the participant to grant permission to access a microphone.\n * If multiple microphones are connected to the participant's device, then it allows the participant to pick which device to use.\n * Once access is granted for an experiment you do not need to get permission again.\n *\n * Once the microphone is selected with this plugin it can be accessed with\n * [`jsPsych.pluginAPI.getMicrophoneRecorder()`](../reference/jspsych-pluginAPI.md#getmicrophonerecorder).\n *\n * !!! warning\n *     When recording from a microphone your experiment will need to be running over `https://` protocol.\n * If you try to run the experiment locally using the `file://` protocol or over `http://` protocol you will not\n * be able to access the microphone because of\n * [potential security problems](https://blog.mozilla.org/webrtc/camera-microphone-require-https-in-firefox-68/).\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/initialize-microphone/ initialize-microphone plugin documentation on jspsych.org}\n */\nclass InitializeMicrophonePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    this.run_trial(display_element, trial).then((id) => {\n      this.jsPsych.finishTrial({\n        device_id: id,\n      });\n    });\n  }\n\n  private async run_trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    await this.askForPermission();\n\n    this.showMicrophoneSelection(display_element, trial);\n\n    this.updateDeviceList(display_element);\n\n    navigator.mediaDevices.ondevicechange = (e) => {\n      this.updateDeviceList(display_element);\n    };\n\n    const mic_id = await this.waitForSelection(display_element);\n\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: { deviceId: mic_id } });\n\n    this.jsPsych.pluginAPI.initializeMicrophoneRecorder(stream);\n\n    return mic_id;\n  }\n\n  private async askForPermission() {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\n    return stream;\n  }\n\n  private showMicrophoneSelection(display_element, trial: TrialType<Info>) {\n    let html = `\n      ${trial.device_select_message}\n      <select name=\"mic\" id=\"which-mic\" style=\"font-size:14px; font-family: 'Open Sans', 'Arial', sans-serif; padding: 4px;\">\n      </select>\n      <p><button class=\"jspsych-btn\" id=\"btn-select-mic\">${trial.button_label}</button></p>`;\n    display_element.innerHTML = html;\n  }\n\n  private waitForSelection(display_element) {\n    return new Promise((resolve) => {\n      display_element.querySelector(\"#btn-select-mic\").addEventListener(\"click\", () => {\n        const mic = display_element.querySelector(\"#which-mic\").value;\n        resolve(mic);\n      });\n    });\n  }\n\n  private updateDeviceList(display_element) {\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\n      const mics = devices.filter(\n        (d) =>\n          d.kind === \"audioinput\" && d.deviceId !== \"default\" && d.deviceId !== \"communications\"\n      );\n\n      // remove entries with duplicate groupID\n      const unique_mics = mics.filter(\n        (mic, index, arr) => arr.findIndex((v) => v.groupId == mic.groupId) == index\n      );\n\n      // reset the list by clearing all current options\n      display_element.querySelector(\"#which-mic\").innerHTML = \"\";\n\n      unique_mics.forEach((d) => {\n        let el = document.createElement(\"option\");\n        el.value = d.deviceId;\n        el.innerHTML = d.label;\n\n        display_element.querySelector(\"#which-mic\").appendChild(el);\n      });\n    });\n  }\n}\n\nexport default InitializeMicrophonePlugin;\n"],"names":["version"],"mappings":"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"}