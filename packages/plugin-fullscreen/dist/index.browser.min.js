var jsPsychFullscreen = (function (n) {
  "use strict";
  var u = {
    name: "@jspsych/plugin-fullscreen",
    version: "2.0.0",
    description: "jsPsych plugin to toggle fullscreen mode in the browser",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-fullscreen",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/fullscreen",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const c = {
    name: "fullscreen",
    version: u.version,
    parameters: {
      fullscreen_mode: { type: n.ParameterType.BOOL, default: !0, array: !1 },
      message: {
        type: n.ParameterType.HTML_STRING,
        default:
          "<p>The experiment will switch to full screen mode when you press the button below</p>",
        array: !1,
      },
      button_label: { type: n.ParameterType.STRING, default: "Continue", array: !1 },
      delay_after: { type: n.ParameterType.INT, default: 1e3, array: !1 },
    },
    data: {
      success: {
        type: n.ParameterType.BOOL,
        default: null,
        description: "True if the user entered fullscreen mode, false if not.",
      },
      rt: {
        type: n.ParameterType.INT,
        default: null,
        description: "Time in milliseconds until the user entered fullscreen mode.",
      },
    },
  };
  class r {
    constructor(e) {
      (this.jsPsych = e), (this.rt = null), (this.start_time = 0);
    }
    trial(e, t) {
      var s = typeof Element != "undefined" && "ALLOW_KEYBOARD_INPUT" in Element;
      s
        ? this.endTrial(e, !1, t)
        : t.fullscreen_mode
        ? this.showDisplay(e, t)
        : (this.exitFullScreen(), this.endTrial(e, !0, t));
    }
    showDisplay(e, t) {
      (e.innerHTML = `
      ${t.message}
      <button id="jspsych-fullscreen-btn" class="jspsych-btn">${t.button_label}</button>
    `),
        e.querySelector("#jspsych-fullscreen-btn").addEventListener("click", () => {
          (this.rt = Math.round(performance.now() - this.start_time)),
            this.enterFullScreen(),
            this.endTrial(e, !0, t);
        }),
        (this.start_time = performance.now());
    }
    endTrial(e, t, s) {
      (e.innerHTML = ""),
        this.jsPsych.pluginAPI.setTimeout(() => {
          var l = { success: t, rt: this.rt };
          this.jsPsych.finishTrial(l);
        }, s.delay_after);
    }
    enterFullScreen() {
      var e = document.documentElement;
      e.requestFullscreen
        ? e.requestFullscreen()
        : e.mozRequestFullScreen
        ? e.mozRequestFullScreen()
        : e.webkitRequestFullscreen
        ? e.webkitRequestFullscreen()
        : e.msRequestFullscreen && e.msRequestFullscreen();
    }
    exitFullScreen() {
      (document.fullscreenElement ||
        document.mozFullScreenElement ||
        document.webkitFullscreenElement) &&
        (document.exitFullscreen
          ? document.exitFullscreen()
          : document.msExitFullscreen
          ? document.msExitFullscreen()
          : document.mozCancelFullScreen
          ? document.mozCancelFullScreen()
          : document.webkitExitFullscreen && document.webkitExitFullscreen());
    }
    simulate(e, t, s, l) {
      t == "data-only" && (l(), this.simulate_data_only(e, s)),
        t == "visual" && this.simulate_visual(e, s, l);
    }
    create_simulation_data(e, t) {
      const s = {
        success: !0,
        rt: this.jsPsych.randomization.sampleExGaussian(1e3, 100, 0.005, !0),
      };
      return this.jsPsych.pluginAPI.mergeSimulationData(s, t);
    }
    simulate_data_only(e, t) {
      const s = this.create_simulation_data(e, t);
      this.jsPsych.finishTrial(s);
    }
    simulate_visual(e, t, s) {
      const l = this.create_simulation_data(e, t),
        i = this.jsPsych.getDisplayElement();
      l.success === !1
        ? this.endTrial(i, !1, e)
        : (this.trial(i, e),
          s(),
          this.jsPsych.pluginAPI.clickTarget(i.querySelector("#jspsych-fullscreen-btn"), l.rt));
    }
  }
  return (r.info = c), r;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
