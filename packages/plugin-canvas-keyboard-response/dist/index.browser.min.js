var jsPsychCanvasKeyboardResponse = (function (i) {
  "use strict";
  var c = {
    name: "@jspsych/plugin-canvas-keyboard-response",
    version: "2.0.0",
    description: "jsPsych plugin for displaying a canvas stimulus and getting a keyboard response",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest  --passWithNoTests",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-canvas-keyboard-response",
    },
    author: "Chris Jungerius, Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/canvas-keyboard-response",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const p = {
    name: "canvas-keyboard-response",
    version: c.version,
    parameters: {
      stimulus: { type: i.ParameterType.FUNCTION, default: void 0 },
      choices: { type: i.ParameterType.KEYS, default: "ALL_KEYS" },
      prompt: { type: i.ParameterType.HTML_STRING, default: null },
      stimulus_duration: { type: i.ParameterType.INT, default: null },
      trial_duration: { type: i.ParameterType.INT, default: null },
      response_ends_trial: { type: i.ParameterType.BOOL, default: !0 },
      canvas_size: { type: i.ParameterType.INT, array: !0, default: [500, 500] },
    },
    data: { response: { type: i.ParameterType.STRING }, rt: { type: i.ParameterType.INT } },
  };
  class l {
    constructor(e) {
      this.jsPsych = e;
    }
    trial(e, s) {
      var a =
        '<div id="jspsych-canvas-keyboard-response-stimulus"><canvas id="jspsych-canvas-stimulus" height="' +
        s.canvas_size[0] +
        '" width="' +
        s.canvas_size[1] +
        '"></canvas></div>';
      s.prompt !== null && (a += s.prompt), (e.innerHTML = a);
      let t = document.getElementById("jspsych-canvas-stimulus");
      (t.style.display = "block"), s.stimulus(t);
      var n = { rt: null, key: null };
      const u = () => {
        typeof o != "undefined" && this.jsPsych.pluginAPI.cancelKeyboardResponse(o);
        var r = { rt: n.rt, response: n.key };
        this.jsPsych.finishTrial(r);
      };
      var d = (r) => {
        (e.querySelector("#jspsych-canvas-keyboard-response-stimulus").className += " responded"),
          n.key == null && (n = r),
          s.response_ends_trial && u();
      };
      if (s.choices != "NO_KEYS")
        var o = this.jsPsych.pluginAPI.getKeyboardResponse({
          callback_function: d,
          valid_responses: s.choices,
          rt_method: "performance",
          persist: !1,
          allow_held_key: !1,
        });
      s.stimulus_duration !== null &&
        this.jsPsych.pluginAPI.setTimeout(() => {
          e.querySelector("#jspsych-canvas-keyboard-response-stimulus").style.visibility = "hidden";
        }, s.stimulus_duration),
        s.trial_duration !== null &&
          this.jsPsych.pluginAPI.setTimeout(() => {
            u();
          }, s.trial_duration);
    }
    simulate(e, s, a, t) {
      s == "data-only" && (t(), this.simulate_data_only(e, a)),
        s == "visual" && this.simulate_visual(e, a, t);
    }
    simulate_data_only(e, s) {
      const a = this.create_simulation_data(e, s);
      this.jsPsych.finishTrial(a);
    }
    simulate_visual(e, s, a) {
      const t = this.create_simulation_data(e, s),
        n = this.jsPsych.getDisplayElement();
      this.trial(n, e), a(), t.rt !== null && this.jsPsych.pluginAPI.pressKey(t.response, t.rt);
    }
    create_simulation_data(e, s) {
      const a = {
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0),
          response: this.jsPsych.pluginAPI.getValidKey(e.choices),
        },
        t = this.jsPsych.pluginAPI.mergeSimulationData(a, s);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(e, t), t;
    }
  }
  return (l.info = p), l;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
