{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"canvas-keyboard-response\",\n  version: version,\n  parameters: {\n    /** The function to draw on the canvas. This function automatically takes a canvas element as its only\n     * argument, e.g. `function(c) {...}` or `function drawStim(c) {...}`, where `c` refers to the canvas element.\n     * Note that the stimulus function will still generally need to set the correct context itself, using a line\n     * like `let ctx = c.getContext(\"2d\")`.\n     */\n    stimulus: {\n      type: ParameterType.FUNCTION,\n      default: undefined,\n    },\n    /** This array contains the key(s) that the participant is allowed to press in order to respond to the stimulus.\n     * Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) -\n     * see [this page](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)\n     * and [this page (event.key column)](https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/)\n     * for more examples. Any key presses that are not listed in the array will be ignored. The default value\n     * of `\"ALL_KEYS\"` means that all keys will be accepted as valid responses. Specifying `\"NO_KEYS\"` will mean\n     * that no responses are allowed.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention\n     * is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to\n     * `hidden` after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends.\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the\n     * participant fails to make a response before this timer is reached, the participant's response will be\n     * recorded as null for the trial and the trial will end. If the value of this parameter is null, then the\n     * trial will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their\n     * response before the cutoff specified by the `trial_duration` parameter). If false, then the trial will\n     * continue until the value for `trial_duration` is reached. You can use this parameter to force the participant\n     * to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** Array that defines the size of the canvas element in pixels. First value is height, second value is width. */\n    canvas_size: {\n      type: ParameterType.INT,\n      array: true,\n      default: [500, 500],\n    },\n  },\n  data: {\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from\n     * when the stimulus first appears on the screen until the participant's response.\n     */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin can be used to draw a stimulus on a [HTML canvas element](https://www.w3schools.com/html/html5_canvas.asp) and\n * record a keyboard response. The canvas stimulus can be useful for displaying dynamic, parametrically-defined graphics,\n * and for controlling the positioning of multiple graphical elements (shapes, text, images). The stimulus can be\n * displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically\n * if the participant has failed to respond within a fixed length of time.\n *\n * @author Chris Jungerius (modified from Josh de Leeuw)\n * @see {@link https://www.jspsych.org/latest/plugins/canvas-keyboard-response/ canvas-keyboard-response plugin documentation on jspsych.org}\n */\nclass CanvasKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var new_html =\n      '<div id=\"jspsych-canvas-keyboard-response-stimulus\">' +\n      '<canvas id=\"jspsych-canvas-stimulus\" height=\"' +\n      trial.canvas_size[0] +\n      '\" width=\"' +\n      trial.canvas_size[1] +\n      '\"></canvas>' +\n      \"</div>\";\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // draw\n    display_element.innerHTML = new_html;\n    let c = document.getElementById(\"jspsych-canvas-stimulus\");\n    c.style.display = \"block\";\n    trial.stimulus(c);\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        response: response.key,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-canvas-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-canvas-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n}\n\nexport default CanvasKeyboardResponsePlugin;\n"],"names":["info","version","ParameterType","CanvasKeyboardResponsePlugin","jsPsych","display_element","trial","new_html","c","response","end_trial","keyboardListener","trial_data","after_response","simulation_mode","simulation_options","load_callback","data","default_data"],"mappings":"w+BAIA,MAAMA,EAAc,CAClB,KAAM,2BACN,QAASC,EAAAA,QACT,WAAY,CAMV,SAAU,CACR,KAAMC,EAAAA,cAAc,SACpB,QAAS,MACX,EASA,QAAS,CACP,KAAMA,EAAAA,cAAc,KACpB,QAAS,UACX,EAIA,OAAQ,CACN,KAAMA,EAAAA,cAAc,YACpB,QAAS,IACX,EAIA,kBAAmB,CACjB,KAAMA,gBAAc,IACpB,QAAS,IACX,EAMA,eAAgB,CACd,KAAMA,EAAAA,cAAc,IACpB,QAAS,IACX,EAMA,oBAAqB,CACnB,KAAMA,EAAc,cAAA,KACpB,QAAS,EACX,EAEA,YAAa,CACX,KAAMA,gBAAc,IACpB,MAAO,GACP,QAAS,CAAC,IAAK,GAAG,CACpB,CACF,EACA,KAAM,CAEJ,SAAU,CACR,KAAMA,EAAAA,cAAc,MACtB,EAIA,GAAI,CACF,KAAMA,EAAc,cAAA,GACtB,CACF,CACF,EAcA,MAAMC,CAA4D,CAGhE,YAAoBC,EAAkB,CAAlB,aAAAA,CAAmB,CAEvC,MAAMC,EAA8BC,EAAwB,CAC1D,IAAIC,EACF,oGAEAD,EAAM,YAAY,GAClB,YACAA,EAAM,YAAY,GAClB,oBAGEA,EAAM,SAAW,OACnBC,GAAYD,EAAM,QAIpBD,EAAgB,UAAYE,EAC5B,IAAIC,EAAI,SAAS,eAAe,yBAAyB,EACzDA,EAAE,MAAM,QAAU,QAClBF,EAAM,SAASE,CAAC,EAEhB,IAAIC,EAAW,CACb,GAAI,KACJ,IAAK,IACP,EAGA,MAAMC,EAAY,IAAM,CAElB,OAAOC,GAAqB,aAC9B,KAAK,QAAQ,UAAU,uBAAuBA,CAAgB,EAIhE,IAAIC,EAAa,CACf,GAAIH,EAAS,GACb,SAAUA,EAAS,GACrB,EAGA,KAAK,QAAQ,YAAYG,CAAU,CACrC,EAGA,IAAIC,EAAkBb,GAAS,CAG7BK,EAAgB,cAAc,4CAA4C,EAAE,WAC1E,aAGEI,EAAS,KAAO,OAClBA,EAAWT,GAGTM,EAAM,qBACRI,GAEJ,EAGA,GAAIJ,EAAM,SAAW,UACnB,IAAIK,EAAmB,KAAK,QAAQ,UAAU,oBAAoB,CAChE,kBAAmBE,EACnB,gBAAiBP,EAAM,QACvB,UAAW,cACX,QAAS,GACT,eAAgB,EAClB,CAAC,EAICA,EAAM,oBAAsB,MAC9B,KAAK,QAAQ,UAAU,WAAW,IAAM,CACtCD,EAAgB,cACd,4CACF,EAAE,MAAM,WAAa,QACvB,EAAGC,EAAM,iBAAiB,EAIxBA,EAAM,iBAAmB,MAC3B,KAAK,QAAQ,UAAU,WAAW,IAAM,CACtCI,EACF,CAAA,EAAGJ,EAAM,cAAc,CAE3B,CAEA,SACEA,EACAQ,EACAC,EACAC,EACA,CACIF,GAAmB,cACrBE,EACA,EAAA,KAAK,mBAAmBV,EAAOS,CAAkB,GAE/CD,GAAmB,UACrB,KAAK,gBAAgBR,EAAOS,EAAoBC,CAAa,CAEjE,CAEQ,mBAAmBV,EAAwBS,EAAoB,CACrE,MAAME,EAAO,KAAK,uBAAuBX,EAAOS,CAAkB,EAElE,KAAK,QAAQ,YAAYE,CAAI,CAC/B,CAEQ,gBAAgBX,EAAwBS,EAAoBC,EAA2B,CAC7F,MAAMC,EAAO,KAAK,uBAAuBX,EAAOS,CAAkB,EAE5DV,EAAkB,KAAK,QAAQ,oBAErC,KAAK,MAAMA,EAAiBC,CAAK,EACjCU,IAEIC,EAAK,KAAO,MACd,KAAK,QAAQ,UAAU,SAASA,EAAK,SAAUA,EAAK,EAAE,CAE1D,CAEQ,uBAAuBX,EAAwBS,EAAoB,CACzE,MAAMG,EAAe,CACnB,GAAI,KAAK,QAAQ,cAAc,iBAAiB,IAAK,GAAI,oBAAS,EAAI,EACtE,SAAU,KAAK,QAAQ,UAAU,YAAYZ,EAAM,OAAO,CAC5D,EAEMW,EAAO,KAAK,QAAQ,UAAU,oBAAoBC,EAAcH,CAAkB,EAExF,OAAK,KAAA,QAAQ,UAAU,gCAAgCT,EAAOW,CAAI,EAE3DA,CACT,CACF,CA1IMd,OAAAA,EACG,KAAOH"}