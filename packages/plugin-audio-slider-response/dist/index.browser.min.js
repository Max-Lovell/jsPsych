var jsPsychAudioSliderResponse = (function (a) {
  "use strict";
  function m(i) {
    return i && i.__esModule && Object.prototype.hasOwnProperty.call(i, "default") ? i.default : i;
  }
  const c = (i) => {
    const s = new Set();
    do for (const e of Reflect.ownKeys(i)) s.add([i, e]);
    while ((i = Reflect.getPrototypeOf(i)) && i !== Object.prototype);
    return s;
  };
  var y = (i, { include: s, exclude: e } = {}) => {
      const r = (t) => {
        const n = (l) => (typeof l == "string" ? t === l : l.test(t));
        return s ? s.some(n) : e ? !e.some(n) : !0;
      };
      for (const [t, n] of c(i.constructor.prototype)) {
        if (n === "constructor" || !r(n)) continue;
        const l = Reflect.getOwnPropertyDescriptor(t, n);
        l && typeof l.value == "function" && (i[n] = i[n].bind(i));
      }
      return i;
    },
    _ = m(y),
    g = {
      name: "@jspsych/plugin-audio-slider-response",
      version: "2.0.1",
      description: "",
      type: "module",
      main: "dist/index.cjs",
      exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
      typings: "dist/index.d.ts",
      unpkg: "dist/index.browser.min.js",
      files: ["src", "dist"],
      source: "src/index.ts",
      scripts: {
        test: "jest  --passWithNoTests",
        "test:watch": "npm test -- --watch",
        tsc: "tsc",
        build: "rollup --config",
        "build:watch": "npm run build -- --watch",
      },
      repository: {
        type: "git",
        url: "git+https://github.com/jspsych/jsPsych.git",
        directory: "packages/plugin-audio-slider-response",
      },
      author: "Josh de Leeuw",
      license: "MIT",
      bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
      homepage: "https://www.jspsych.org/latest/plugins/audio-slider-response",
      peerDependencies: { jspsych: ">=7.1.0" },
      devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
    },
    v = (i, s, e) =>
      new Promise((r, t) => {
        var n = (p) => {
            try {
              d(e.next(p));
            } catch (o) {
              t(o);
            }
          },
          l = (p) => {
            try {
              d(e.throw(p));
            } catch (o) {
              t(o);
            }
          },
          d = (p) => (p.done ? r(p.value) : Promise.resolve(p.value).then(n, l));
        d((e = e.apply(i, s)).next());
      });
  const P = {
    name: "audio-slider-response",
    version: g.version,
    parameters: {
      stimulus: { type: a.ParameterType.AUDIO, default: void 0 },
      min: { type: a.ParameterType.INT, default: 0 },
      max: { type: a.ParameterType.INT, default: 100 },
      slider_start: { type: a.ParameterType.INT, default: 50 },
      step: { type: a.ParameterType.INT, default: 1 },
      labels: { type: a.ParameterType.HTML_STRING, default: [], array: !0 },
      slider_width: { type: a.ParameterType.INT, default: null },
      button_label: { type: a.ParameterType.STRING, default: "Continue", array: !1 },
      require_movement: { type: a.ParameterType.BOOL, default: !1 },
      prompt: { type: a.ParameterType.HTML_STRING, default: null },
      trial_duration: { type: a.ParameterType.INT, default: null },
      response_ends_trial: { type: a.ParameterType.BOOL, default: !0 },
      trial_ends_after_audio: { type: a.ParameterType.BOOL, default: !1 },
      response_allowed_while_playing: { type: a.ParameterType.BOOL, default: !0 },
    },
    data: {
      response: { type: a.ParameterType.INT },
      rt: { type: a.ParameterType.INT },
      stimulus: { type: a.ParameterType.STRING },
      slider_start: { type: a.ParameterType.INT },
    },
  };
  class u {
    constructor(s) {
      (this.jsPsych = s),
        (this.response = { rt: null, response: null }),
        (this.setupTrial = () => {
          this.params.trial_ends_after_audio &&
            this.audio.addEventListener("ended", this.end_trial),
            !this.params.response_allowed_while_playing &&
              !this.params.trial_ends_after_audio &&
              this.audio.addEventListener("ended", this.enable_slider);
          var e = '<div id="jspsych-audio-slider-response-wrapper" style="margin: 100px 0px;">';
          (e +=
            '<div class="jspsych-audio-slider-response-container" style="position:relative; margin: 0 auto 3em auto; width:'),
            this.params.slider_width !== null
              ? (e += this.params.slider_width + "px;")
              : (e += "auto;"),
            (e += '">'),
            (e +=
              '<input type="range" class="jspsych-slider" value="' +
              this.params.slider_start +
              '" min="' +
              this.params.min +
              '" max="' +
              this.params.max +
              '" step="' +
              this.params.step +
              '" id="jspsych-audio-slider-response-response"'),
            this.params.response_allowed_while_playing || (e += " disabled"),
            (e += "></input><div>");
          for (var r = 0; r < this.params.labels.length; r++) {
            var t = 100 / (this.params.labels.length - 1),
              n = r * (100 / (this.params.labels.length - 1)),
              l = ((n - 50) / 50) * 100,
              d = (l * this.half_thumb_width) / 100;
            (e +=
              '<div style="border: 1px solid transparent; display: inline-block; position: absolute; left:calc(' +
              n +
              "% - (" +
              t +
              "% / 2) - " +
              d +
              "px); text-align: center; width: " +
              t +
              '%;">'),
              (e +=
                '<span style="text-align: center; font-size: 80%;">' +
                this.params.labels[r] +
                "</span>"),
              (e += "</div>");
          }
          (e += "</div>"),
            (e += "</div>"),
            (e += "</div>"),
            this.params.prompt !== null && (e += this.params.prompt);
          var p = "";
          if (
            ((this.params.require_movement || !this.params.response_allowed_while_playing) &&
              (p = "disabled"),
            (e +=
              '<button id="jspsych-audio-slider-response-next" class="jspsych-btn" ' +
              p +
              ">" +
              this.params.button_label +
              "</button>"),
            (this.display.innerHTML = e),
            (this.response = { rt: null, response: null }),
            this.params.response_allowed_while_playing ||
              ((this.display.querySelector("#jspsych-audio-slider-response-response").disabled =
                !0),
              (this.display.querySelector("#jspsych-audio-slider-response-next").disabled = !0)),
            this.params.require_movement)
          ) {
            const o = () => {
              this.display.querySelector("#jspsych-audio-slider-response-next").disabled = !1;
            };
            this.display
              .querySelector("#jspsych-audio-slider-response-response")
              .addEventListener("mousedown", o),
              this.display
                .querySelector("#jspsych-audio-slider-response-response")
                .addEventListener("touchstart", o),
              this.display
                .querySelector("#jspsych-audio-slider-response-response")
                .addEventListener("change", o);
          }
          this.display
            .querySelector("#jspsych-audio-slider-response-next")
            .addEventListener("click", () => {
              var o = performance.now(),
                h = Math.round(o - this.startTime);
              this.context !== null &&
                ((o = this.context.currentTime), (h = Math.round((o - this.startTime) * 1e3))),
                (this.response.rt = h),
                (this.response.response = this.display.querySelector(
                  "#jspsych-audio-slider-response-response"
                ).valueAsNumber),
                this.params.response_ends_trial
                  ? this.end_trial()
                  : (this.display.querySelector("#jspsych-audio-slider-response-next").disabled =
                      !0);
            }),
            (this.startTime = performance.now()),
            this.context !== null && (this.startTime = this.context.currentTime),
            this.audio.play(),
            this.params.trial_duration !== null &&
              this.jsPsych.pluginAPI.setTimeout(() => {
                this.end_trial();
              }, this.params.trial_duration);
        }),
        (this.end_trial = () => {
          this.jsPsych.pluginAPI.clearAllTimeouts(),
            this.audio.stop(),
            this.audio.removeEventListener("ended", this.end_trial),
            this.audio.removeEventListener("ended", this.enable_slider);
          var e = {
            rt: this.response.rt,
            stimulus: this.params.stimulus,
            slider_start: this.params.slider_start,
            response: this.response.response,
          };
          (this.display.innerHTML = ""), this.trial_complete(e);
        }),
        _(this);
    }
    trial(s, e, r) {
      return v(this, null, function* () {
        return (
          (this.params = e),
          (this.display = s),
          this.response,
          (this.half_thumb_width = 7.5),
          this.trial_complete,
          (this.context = this.jsPsych.pluginAPI.audioContext()),
          (this.audio = yield this.jsPsych.pluginAPI.getAudioPlayer(e.stimulus)),
          this.setupTrial(),
          r(),
          new Promise((t) => {
            this.trial_complete = t;
          })
        );
      });
    }
    enable_slider() {
      (document.querySelector("#jspsych-audio-slider-response-response").disabled = !1),
        this.params.require_movement ||
          (document.querySelector("#jspsych-audio-slider-response-next").disabled = !1);
    }
    simulate(s, e, r, t) {
      e == "data-only" && (t(), this.simulate_data_only(s, r)),
        e == "visual" && this.simulate_visual(s, r, t);
    }
    create_simulation_data(s, e) {
      const r = {
          stimulus: s.stimulus,
          slider_start: s.slider_start,
          response: this.jsPsych.randomization.randomInt(s.min, s.max),
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0),
        },
        t = this.jsPsych.pluginAPI.mergeSimulationData(r, e);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(s, t), t;
    }
    simulate_data_only(s, e) {
      const r = this.create_simulation_data(s, e);
      this.jsPsych.finishTrial(r);
    }
    simulate_visual(s, e, r) {
      const t = this.create_simulation_data(s, e),
        n = this.jsPsych.getDisplayElement(),
        l = () => {
          if (t.rt !== null) {
            const d = n.querySelector("input[type='range']");
            setTimeout(() => {
              this.jsPsych.pluginAPI.clickTarget(d), (d.valueAsNumber = t.response);
            }, t.rt / 2),
              this.jsPsych.pluginAPI.clickTarget(n.querySelector("button"), t.rt);
          }
        };
      this.trial(n, s, () => {
        r(), s.response_allowed_while_playing ? l() : this.audio.addEventListener("ended", l);
      });
    }
  }
  return (u.info = P), u;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
