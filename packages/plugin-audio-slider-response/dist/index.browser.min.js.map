{"version":3,"file":"index.browser.min.js","sources":["../../../node_modules/auto-bind/index.js","../src/index.ts"],"sourcesContent":["'use strict';\n\n// Gets all non-builtin properties up the prototype chain\nconst getAllProperties = object => {\n\tconst properties = new Set();\n\n\tdo {\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tproperties.add([object, key]);\n\t\t}\n\t} while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);\n\n\treturn properties;\n};\n\nmodule.exports = (self, {include, exclude} = {}) => {\n\tconst filter = key => {\n\t\tconst match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n\t\tif (include) {\n\t\t\treturn include.some(match);\n\t\t}\n\n\t\tif (exclude) {\n\t\t\treturn !exclude.some(match);\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tfor (const [object, key] of getAllProperties(self.constructor.prototype)) {\n\t\tif (key === 'constructor' || !filter(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst descriptor = Reflect.getOwnPropertyDescriptor(object, key);\n\t\tif (descriptor && typeof descriptor.value === 'function') {\n\t\t\tself[key] = self[key].bind(self);\n\t\t}\n\t}\n\n\treturn self;\n};\n","import autoBind from \"auto-bind\";\nimport { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { AudioPlayerInterface } from \"../../jspsych/src/modules/plugin-api/AudioPlayer\";\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"audio-slider-response\",\n  version: version,\n  parameters: {\n    /** Audio file to be played. */\n    stimulus: {\n      type: ParameterType.AUDIO,\n      default: undefined,\n    },\n    /** Sets the minimum value of the slider. */\n    min: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /** Sets the maximum value of the slider */\n    max: {\n      type: ParameterType.INT,\n      default: 100,\n    },\n    /** Sets the starting value of the slider */\n    slider_start: {\n      type: ParameterType.INT,\n      default: 50,\n    },\n    /** Sets the step of the slider. This is the smallest amount by which the slider can change. */\n    step: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /** Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the\n     * slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the\n     * other two will be at 33% and 67% of the slider width.\n     */\n    labels: {\n      type: ParameterType.HTML_STRING,\n      default: [],\n      array: true,\n    },\n    /** Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. */\n    slider_width: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Label of the button to end the trial. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n      array: false,\n    },\n    /** If true, the participant must move the slider before clicking the continue button. */\n    require_movement: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is\n     * that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If\n     * the participant fails to make a response before this timer is reached, the participant's response will be\n     * recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial\n     * will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their response\n     * before the cutoff specified by the `trial_duration` parameter). If false, then the trial will continue until the\n     * value for `trial_duration` is reached. You can set this parameter to `false` to force the participant to listen to\n     * the stimulus for a fixed amount of time, even if they respond before the time is complete.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** If true, then the trial will end as soon as the audio file finishes playing. */\n    trial_ends_after_audio: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before\n     * the slider is enabled and the trial can end via the next button click. Once the audio has played all the way through,\n     * the slider is enabled and a response is allowed (including while the audio is being re-played via on-screen playback controls).\n     */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** The numeric value of the slider. */\n    response: {\n      type: ParameterType.INT,\n    },\n    /** The time in milliseconds for the participant to make a response. The time is measured from when the stimulus first\n     * began playing until the participant's response.\n     */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The path of the audio file that was played. */\n    stimulus: {\n      type: ParameterType.STRING,\n    },\n    /** The starting value of the slider. */\n    slider_start: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin plays an audio file and allows the participant to respond by dragging a slider.\n *\n * If the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the\n * playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of\n * response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio.\n *\n * Audio files can be automatically preloaded by jsPsych using the [`preload` plugin](preload.md). However, if you are using\n * timeline variables or another dynamic method to specify the audio stimulus, then you will need\n * to [manually preload](../overview/media-preloading.md#manual-preloading) the audio.\n *\n * The trial can end when the participant responds, or if the participant has failed to respond within a fixed length of time. You can also prevent the slider response from being made before the audio has finished playing.\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/audio-slider-response/ audio-slider-response plugin documentation on jspsych.org}\n */\nclass AudioSliderResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private audio: AudioPlayerInterface;\n  private context: AudioContext;\n  private params: TrialType<Info>;\n  private display: HTMLElement;\n  private response: { rt: number; response: number } = { rt: null, response: null };\n  private startTime: number;\n  private half_thumb_width: number;\n  private trial_complete: (trial_data: {\n    rt: number;\n    slider_start: number;\n    response: number;\n  }) => void;\n\n  constructor(private jsPsych: JsPsych) {\n    autoBind(this);\n  }\n\n  async trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    this.params = trial;\n    this.display = display_element;\n    // for storing data related to response\n    this.response;\n    // half of the thumb width value from jspsych.css, used to adjust the label positions\n    this.half_thumb_width = 7.5;\n    // hold the .resolve() function from the Promise that ends the trial\n    this.trial_complete;\n\n    // setup stimulus\n    this.context = this.jsPsych.pluginAPI.audioContext();\n\n    // load audio file\n    this.audio = await this.jsPsych.pluginAPI.getAudioPlayer(trial.stimulus);\n\n    this.setupTrial();\n\n    on_load();\n\n    return new Promise((resolve) => {\n      this.trial_complete = resolve;\n    });\n  }\n\n  // to enable slider after audio ends\n  private enable_slider() {\n    document.querySelector<HTMLInputElement>(\"#jspsych-audio-slider-response-response\").disabled =\n      false;\n    if (!this.params.require_movement) {\n      document.querySelector<HTMLButtonElement>(\"#jspsych-audio-slider-response-next\").disabled =\n        false;\n    }\n  }\n\n  private setupTrial = () => {\n    // set up end event if trial needs it\n    if (this.params.trial_ends_after_audio) {\n      this.audio.addEventListener(\"ended\", this.end_trial);\n    }\n\n    // enable slider after audio ends if necessary\n    if (!this.params.response_allowed_while_playing && !this.params.trial_ends_after_audio) {\n      this.audio.addEventListener(\"ended\", this.enable_slider);\n    }\n\n    var html = '<div id=\"jspsych-audio-slider-response-wrapper\" style=\"margin: 100px 0px;\">';\n    html +=\n      '<div class=\"jspsych-audio-slider-response-container\" style=\"position:relative; margin: 0 auto 3em auto; width:';\n    if (this.params.slider_width !== null) {\n      html += this.params.slider_width + \"px;\";\n    } else {\n      html += \"auto;\";\n    }\n    html += '\">';\n    html +=\n      '<input type=\"range\" class=\"jspsych-slider\" value=\"' +\n      this.params.slider_start +\n      '\" min=\"' +\n      this.params.min +\n      '\" max=\"' +\n      this.params.max +\n      '\" step=\"' +\n      this.params.step +\n      '\" id=\"jspsych-audio-slider-response-response\"';\n    if (!this.params.response_allowed_while_playing) {\n      html += \" disabled\";\n    }\n    html += \"></input><div>\";\n    for (var j = 0; j < this.params.labels.length; j++) {\n      var label_width_perc = 100 / (this.params.labels.length - 1);\n      var percent_of_range = j * (100 / (this.params.labels.length - 1));\n      var percent_dist_from_center = ((percent_of_range - 50) / 50) * 100;\n      var offset = (percent_dist_from_center * this.half_thumb_width) / 100;\n      html +=\n        '<div style=\"border: 1px solid transparent; display: inline-block; position: absolute; ' +\n        \"left:calc(\" +\n        percent_of_range +\n        \"% - (\" +\n        label_width_perc +\n        \"% / 2) - \" +\n        offset +\n        \"px); text-align: center; width: \" +\n        label_width_perc +\n        '%;\">';\n      html +=\n        '<span style=\"text-align: center; font-size: 80%;\">' + this.params.labels[j] + \"</span>\";\n      html += \"</div>\";\n    }\n    html += \"</div>\";\n    html += \"</div>\";\n    html += \"</div>\";\n\n    if (this.params.prompt !== null) {\n      html += this.params.prompt;\n    }\n\n    // add submit button\n    var next_disabled_attribute = \"\";\n    if (this.params.require_movement || !this.params.response_allowed_while_playing) {\n      next_disabled_attribute = \"disabled\";\n    }\n    html +=\n      '<button id=\"jspsych-audio-slider-response-next\" class=\"jspsych-btn\" ' +\n      next_disabled_attribute +\n      \">\" +\n      this.params.button_label +\n      \"</button>\";\n\n    this.display.innerHTML = html;\n\n    this.response = {\n      rt: null,\n      response: null,\n    };\n\n    if (!this.params.response_allowed_while_playing) {\n      this.display.querySelector<HTMLInputElement>(\n        \"#jspsych-audio-slider-response-response\"\n      ).disabled = true;\n      this.display.querySelector<HTMLInputElement>(\"#jspsych-audio-slider-response-next\").disabled =\n        true;\n    }\n\n    if (this.params.require_movement) {\n      const enable_button = () => {\n        this.display.querySelector<HTMLInputElement>(\n          \"#jspsych-audio-slider-response-next\"\n        ).disabled = false;\n      };\n\n      this.display\n        .querySelector(\"#jspsych-audio-slider-response-response\")\n        .addEventListener(\"mousedown\", enable_button);\n\n      this.display\n        .querySelector(\"#jspsych-audio-slider-response-response\")\n        .addEventListener(\"touchstart\", enable_button);\n\n      this.display\n        .querySelector(\"#jspsych-audio-slider-response-response\")\n        .addEventListener(\"change\", enable_button);\n    }\n\n    this.display\n      .querySelector(\"#jspsych-audio-slider-response-next\")\n      .addEventListener(\"click\", () => {\n        // measure response time\n        var endTime = performance.now();\n        var rt = Math.round(endTime - this.startTime);\n        if (this.context !== null) {\n          endTime = this.context.currentTime;\n          rt = Math.round((endTime - this.startTime) * 1000);\n        }\n        this.response.rt = rt;\n        this.response.response = this.display.querySelector<HTMLInputElement>(\n          \"#jspsych-audio-slider-response-response\"\n        ).valueAsNumber;\n\n        if (this.params.response_ends_trial) {\n          this.end_trial();\n        } else {\n          this.display.querySelector<HTMLInputElement>(\n            \"#jspsych-audio-slider-response-next\"\n          ).disabled = true;\n        }\n      });\n\n    //record start time\n    this.startTime = performance.now();\n    // record webaudio context start time\n    if (this.context !== null) {\n      this.startTime = this.context.currentTime;\n    }\n\n    // start audio\n    this.audio.play();\n\n    // end trial if trial_duration is set\n    if (this.params.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        this.end_trial();\n      }, this.params.trial_duration);\n    }\n  };\n\n  private end_trial = () => {\n    // kill any remaining setTimeout handlers\n    this.jsPsych.pluginAPI.clearAllTimeouts();\n\n    // stop the audio file if it is playing\n    this.audio.stop();\n\n    // remove end event listeners if they exist\n    this.audio.removeEventListener(\"ended\", this.end_trial);\n    this.audio.removeEventListener(\"ended\", this.enable_slider);\n\n    // save data\n    var trialdata = {\n      rt: this.response.rt,\n      stimulus: this.params.stimulus,\n      slider_start: this.params.slider_start,\n      response: this.response.response,\n    };\n\n    this.display.innerHTML = \"\";\n\n    // next trial\n    this.trial_complete(trialdata);\n  };\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      slider_start: trial.slider_start,\n      response: this.jsPsych.randomization.randomInt(trial.min, trial.max),\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    const respond = () => {\n      if (data.rt !== null) {\n        const el = display_element.querySelector<HTMLInputElement>(\"input[type='range']\");\n\n        setTimeout(() => {\n          this.jsPsych.pluginAPI.clickTarget(el);\n          el.valueAsNumber = data.response;\n        }, data.rt / 2);\n\n        this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(\"button\"), data.rt);\n      }\n    };\n\n    this.trial(display_element, trial, () => {\n      load_callback();\n\n      if (!trial.response_allowed_while_playing) {\n        this.audio.addEventListener(\"ended\", respond);\n      } else {\n        respond();\n      }\n    });\n  }\n}\n\nexport default AudioSliderResponsePlugin;\n"],"names":["getAllProperties","object","properties","key","autoBind","self","include","exclude","filter","match","pattern","descriptor","info","version","ParameterType","AudioSliderResponsePlugin","jsPsych","html","j","label_width_perc","percent_of_range","percent_dist_from_center","offset","next_disabled_attribute","enable_button","endTime","rt","trialdata","display_element","trial","on_load","__async","resolve","simulation_mode","simulation_options","load_callback","default_data","data","respond","el"],"mappings":"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"}