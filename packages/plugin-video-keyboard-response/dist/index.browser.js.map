{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"video-keyboard-response\",\n  version: version,\n  parameters: {\n    /** Array of the video file(s) to play. Video can be provided in multiple file formats for better cross-browser support. */\n    stimulus: {\n      type: ParameterType.VIDEO,\n      pretty_name: \"Video\",\n      default: undefined,\n      array: true,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** The width of the video in pixels. */\n    width: {\n      type: ParameterType.INT,\n      pretty_name: \"Width\",\n      default: \"\",\n    },\n    /** The height of the video display in pixels. */\n    height: {\n      type: ParameterType.INT,\n      pretty_name: \"Height\",\n      default: \"\",\n    },\n    /** If true, the video will begin playing as soon as it has loaded. */\n    autoplay: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Autoplay\",\n      default: true,\n    },\n    /** If true, the subject will be able to pause the video or move the playback to any point in the video. */\n    controls: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Controls\",\n      default: false,\n    },\n    /** Time to start the clip. If null (default), video will start at the beginning of the file. */\n    start: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Start\",\n      default: null,\n    },\n    /** Time to stop the clip. If null (default), video will stop at the end of the file. */\n    stop: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Stop\",\n      default: null,\n    },\n    /** The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. */\n    rate: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Rate\",\n      default: 1,\n    },\n    /** If true, the trial will end immediately after the video finishes playing. */\n    trial_ends_after_video: {\n      type: ParameterType.BOOL,\n      pretty_name: \"End trial after video finishes\",\n      default: false,\n    },\n    /** How long to show trial before it ends. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, the trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** If true, then responses are allowed while the video is playing. If false, then the video must finish playing before a response is accepted. */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response allowed while playing\",\n      default: true,\n    },\n  },\n  data: {\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the\n     * stimulus first appears on the screen until the participant's response.\n     * */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The `stimulus` array. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    stimulus: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin plays a video file and records a keyboard response. The stimulus can be displayed until a response is\n * given, or for a pre-determined amount of time. The trial can be ended automatically when the participant responds,\n * when the video file has finished playing, or if the participant has failed to respond within a fixed length of time.\n * You can also prevent a keyboard response from being recorded before the video has finished playing.\n *\n * Video files can be automatically preloaded by jsPsych using the [`preload` plugin](preload.md). However, if you are\n * using timeline variables or another dynamic method to specify the video stimulus, you will need to\n * [manually preload](../overview/media-preloading.md#manual-preloading) the videos. Also note that video preloading\n * is disabled when the experiment is running as a file (i.e. opened directly in the browser, rather than through a\n * server), in order to prevent CORS errors - see the section on [Running Experiments](../overview/running-experiments.md)\n * for more information.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/video-keyboard-response/ video-keyboard-response plugin documentation on jspsych.org}\n */\nclass VideoKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // catch mistake where stimuli are not an array\n    if (!Array.isArray(trial.stimulus)) {\n      throw new Error(`\n        The stimulus property for the video-keyboard-response plugin must be an array\n        of files. See https://www.jspsych.org/latest/plugins/video-keyboard-response/#parameters\n      `);\n    }\n\n    // setup stimulus\n    var video_html = \"<div>\";\n    video_html += '<video id=\"jspsych-video-keyboard-response-stimulus\"';\n\n    if (trial.width) {\n      video_html += ' width=\"' + trial.width + '\"';\n    }\n    if (trial.height) {\n      video_html += ' height=\"' + trial.height + '\"';\n    }\n    if (trial.autoplay && trial.start == null) {\n      // if autoplay is true and the start time is specified, then the video will start automatically\n      // via the play() method, rather than the autoplay attribute, to prevent showing the first frame\n      video_html += \" autoplay \";\n    }\n    if (trial.controls) {\n      video_html += \" controls \";\n    }\n    if (trial.start !== null) {\n      // hide video element when page loads if the start time is specified,\n      // to prevent the video element from showing the first frame\n      video_html += ' style=\"visibility: hidden;\"';\n    }\n    video_html += \">\";\n\n    var video_preload_blob = this.jsPsych.pluginAPI.getVideoBuffer(trial.stimulus[0]);\n    if (!video_preload_blob) {\n      for (var i = 0; i < trial.stimulus.length; i++) {\n        var file_name = trial.stimulus[i];\n        if (file_name.indexOf(\"?\") > -1) {\n          file_name = file_name.substring(0, file_name.indexOf(\"?\"));\n        }\n        var type = file_name.substr(file_name.lastIndexOf(\".\") + 1);\n        type = type.toLowerCase();\n        if (type == \"mov\") {\n          console.warn(\n            \"Warning: video-keyboard-response plugin does not reliably support .mov files.\"\n          );\n        }\n        video_html += '<source src=\"' + file_name + '\" type=\"video/' + type + '\">';\n      }\n    }\n    video_html += \"</video>\";\n    video_html += \"</div>\";\n\n    // add prompt if there is one\n    if (trial.prompt !== null) {\n      video_html += trial.prompt;\n    }\n\n    display_element.innerHTML = video_html;\n\n    var video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-keyboard-response-stimulus\"\n    );\n\n    if (video_preload_blob) {\n      video_element.src = video_preload_blob;\n    }\n\n    video_element.onended = () => {\n      if (trial.trial_ends_after_video) {\n        end_trial();\n      }\n      if (trial.response_allowed_while_playing == false && !trial.trial_ends_after_video) {\n        // start keyboard listener\n        var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: \"performance\",\n          persist: false,\n          allow_held_key: false,\n        });\n      }\n    };\n\n    video_element.playbackRate = trial.rate;\n\n    // if video start time is specified, hide the video and set the starting time\n    // before showing and playing, so that the video doesn't automatically show the first frame\n    if (trial.start !== null) {\n      video_element.pause();\n      video_element.onseeked = () => {\n        video_element.style.visibility = \"visible\";\n        video_element.muted = false;\n        if (trial.autoplay) {\n          video_element.play();\n        } else {\n          video_element.pause();\n        }\n        video_element.onseeked = () => {};\n      };\n      video_element.onplaying = () => {\n        video_element.currentTime = trial.start;\n        video_element.onplaying = () => {};\n      };\n      // fix for iOS/MacOS browsers: videos aren't seekable until they start playing, so need to hide/mute, play,\n      // change current time, then show/unmute\n      video_element.muted = true;\n      video_element.play();\n    }\n\n    let stopped = false;\n    if (trial.stop !== null) {\n      video_element.addEventListener(\"timeupdate\", (e) => {\n        var currenttime = video_element.currentTime;\n        if (currenttime >= trial.stop) {\n          if (!trial.response_allowed_while_playing) {\n            var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n              callback_function: after_response,\n              valid_responses: trial.choices,\n              rt_method: \"performance\",\n              persist: false,\n              allow_held_key: false,\n            });\n          }\n          video_element.pause();\n          if (trial.trial_ends_after_video && !stopped) {\n            // this is to prevent end_trial from being called twice, because the timeupdate event\n            // can fire in quick succession\n            stopped = true;\n            end_trial();\n          }\n        }\n      });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill keyboard listeners\n      this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n\n      // stop the video file if it is playing\n      // remove end event listeners if they exist\n      display_element\n        .querySelector<HTMLVideoElement>(\"#jspsych-video-keyboard-response-stimulus\")\n        .pause();\n      display_element.querySelector<HTMLVideoElement>(\n        \"#jspsych-video-keyboard-response-stimulus\"\n      ).onended = () => {};\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-video-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\" && trial.response_allowed_while_playing) {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-button-response-stimulus\"\n    );\n\n    const respond = () => {\n      if (data.rt !== null) {\n        this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n      }\n    };\n\n    if (!trial.response_allowed_while_playing) {\n      video_element.addEventListener(\"ended\", respond);\n    } else {\n      respond();\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n}\n\nexport default VideoKeyboardResponsePlugin;\n"],"names":["version","ParameterType","info"],"mappings":"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"}