{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"video-keyboard-response\",\n  version: version,\n  parameters: {\n    /** Array of the video file(s) to play. Video can be provided in multiple file formats for better cross-browser support. */\n    stimulus: {\n      type: ParameterType.VIDEO,\n      pretty_name: \"Video\",\n      default: undefined,\n      array: true,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** The width of the video in pixels. */\n    width: {\n      type: ParameterType.INT,\n      pretty_name: \"Width\",\n      default: \"\",\n    },\n    /** The height of the video display in pixels. */\n    height: {\n      type: ParameterType.INT,\n      pretty_name: \"Height\",\n      default: \"\",\n    },\n    /** If true, the video will begin playing as soon as it has loaded. */\n    autoplay: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Autoplay\",\n      default: true,\n    },\n    /** If true, the subject will be able to pause the video or move the playback to any point in the video. */\n    controls: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Controls\",\n      default: false,\n    },\n    /** Time to start the clip. If null (default), video will start at the beginning of the file. */\n    start: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Start\",\n      default: null,\n    },\n    /** Time to stop the clip. If null (default), video will stop at the end of the file. */\n    stop: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Stop\",\n      default: null,\n    },\n    /** The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. */\n    rate: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Rate\",\n      default: 1,\n    },\n    /** If true, the trial will end immediately after the video finishes playing. */\n    trial_ends_after_video: {\n      type: ParameterType.BOOL,\n      pretty_name: \"End trial after video finishes\",\n      default: false,\n    },\n    /** How long to show trial before it ends. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, the trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** If true, then responses are allowed while the video is playing. If false, then the video must finish playing before a response is accepted. */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response allowed while playing\",\n      default: true,\n    },\n  },\n  data: {\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the\n     * stimulus first appears on the screen until the participant's response.\n     * */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The `stimulus` array. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    stimulus: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin plays a video file and records a keyboard response. The stimulus can be displayed until a response is\n * given, or for a pre-determined amount of time. The trial can be ended automatically when the participant responds,\n * when the video file has finished playing, or if the participant has failed to respond within a fixed length of time.\n * You can also prevent a keyboard response from being recorded before the video has finished playing.\n *\n * Video files can be automatically preloaded by jsPsych using the [`preload` plugin](preload.md). However, if you are\n * using timeline variables or another dynamic method to specify the video stimulus, you will need to\n * [manually preload](../overview/media-preloading.md#manual-preloading) the videos. Also note that video preloading\n * is disabled when the experiment is running as a file (i.e. opened directly in the browser, rather than through a\n * server), in order to prevent CORS errors - see the section on [Running Experiments](../overview/running-experiments.md)\n * for more information.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/video-keyboard-response/ video-keyboard-response plugin documentation on jspsych.org}\n */\nclass VideoKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // catch mistake where stimuli are not an array\n    if (!Array.isArray(trial.stimulus)) {\n      throw new Error(`\n        The stimulus property for the video-keyboard-response plugin must be an array\n        of files. See https://www.jspsych.org/latest/plugins/video-keyboard-response/#parameters\n      `);\n    }\n\n    // setup stimulus\n    var video_html = \"<div>\";\n    video_html += '<video id=\"jspsych-video-keyboard-response-stimulus\"';\n\n    if (trial.width) {\n      video_html += ' width=\"' + trial.width + '\"';\n    }\n    if (trial.height) {\n      video_html += ' height=\"' + trial.height + '\"';\n    }\n    if (trial.autoplay && trial.start == null) {\n      // if autoplay is true and the start time is specified, then the video will start automatically\n      // via the play() method, rather than the autoplay attribute, to prevent showing the first frame\n      video_html += \" autoplay \";\n    }\n    if (trial.controls) {\n      video_html += \" controls \";\n    }\n    if (trial.start !== null) {\n      // hide video element when page loads if the start time is specified,\n      // to prevent the video element from showing the first frame\n      video_html += ' style=\"visibility: hidden;\"';\n    }\n    video_html += \">\";\n\n    var video_preload_blob = this.jsPsych.pluginAPI.getVideoBuffer(trial.stimulus[0]);\n    if (!video_preload_blob) {\n      for (var i = 0; i < trial.stimulus.length; i++) {\n        var file_name = trial.stimulus[i];\n        if (file_name.indexOf(\"?\") > -1) {\n          file_name = file_name.substring(0, file_name.indexOf(\"?\"));\n        }\n        var type = file_name.substr(file_name.lastIndexOf(\".\") + 1);\n        type = type.toLowerCase();\n        if (type == \"mov\") {\n          console.warn(\n            \"Warning: video-keyboard-response plugin does not reliably support .mov files.\"\n          );\n        }\n        video_html += '<source src=\"' + file_name + '\" type=\"video/' + type + '\">';\n      }\n    }\n    video_html += \"</video>\";\n    video_html += \"</div>\";\n\n    // add prompt if there is one\n    if (trial.prompt !== null) {\n      video_html += trial.prompt;\n    }\n\n    display_element.innerHTML = video_html;\n\n    var video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-keyboard-response-stimulus\"\n    );\n\n    if (video_preload_blob) {\n      video_element.src = video_preload_blob;\n    }\n\n    video_element.onended = () => {\n      if (trial.trial_ends_after_video) {\n        end_trial();\n      }\n      if (trial.response_allowed_while_playing == false && !trial.trial_ends_after_video) {\n        // start keyboard listener\n        var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: \"performance\",\n          persist: false,\n          allow_held_key: false,\n        });\n      }\n    };\n\n    video_element.playbackRate = trial.rate;\n\n    // if video start time is specified, hide the video and set the starting time\n    // before showing and playing, so that the video doesn't automatically show the first frame\n    if (trial.start !== null) {\n      video_element.pause();\n      video_element.onseeked = () => {\n        video_element.style.visibility = \"visible\";\n        video_element.muted = false;\n        if (trial.autoplay) {\n          video_element.play();\n        } else {\n          video_element.pause();\n        }\n        video_element.onseeked = () => {};\n      };\n      video_element.onplaying = () => {\n        video_element.currentTime = trial.start;\n        video_element.onplaying = () => {};\n      };\n      // fix for iOS/MacOS browsers: videos aren't seekable until they start playing, so need to hide/mute, play,\n      // change current time, then show/unmute\n      video_element.muted = true;\n      video_element.play();\n    }\n\n    let stopped = false;\n    if (trial.stop !== null) {\n      video_element.addEventListener(\"timeupdate\", (e) => {\n        var currenttime = video_element.currentTime;\n        if (currenttime >= trial.stop) {\n          if (!trial.response_allowed_while_playing) {\n            var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n              callback_function: after_response,\n              valid_responses: trial.choices,\n              rt_method: \"performance\",\n              persist: false,\n              allow_held_key: false,\n            });\n          }\n          video_element.pause();\n          if (trial.trial_ends_after_video && !stopped) {\n            // this is to prevent end_trial from being called twice, because the timeupdate event\n            // can fire in quick succession\n            stopped = true;\n            end_trial();\n          }\n        }\n      });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill keyboard listeners\n      this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n\n      // stop the video file if it is playing\n      // remove end event listeners if they exist\n      display_element\n        .querySelector<HTMLVideoElement>(\"#jspsych-video-keyboard-response-stimulus\")\n        .pause();\n      display_element.querySelector<HTMLVideoElement>(\n        \"#jspsych-video-keyboard-response-stimulus\"\n      ).onended = () => {};\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-video-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\" && trial.response_allowed_while_playing) {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-button-response-stimulus\"\n    );\n\n    const respond = () => {\n      if (data.rt !== null) {\n        this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n      }\n    };\n\n    if (!trial.response_allowed_while_playing) {\n      video_element.addEventListener(\"ended\", respond);\n    } else {\n      respond();\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n}\n\nexport default VideoKeyboardResponsePlugin;\n"],"names":["info","version","ParameterType","VideoKeyboardResponsePlugin","jsPsych","display_element","trial","video_html","video_preload_blob","i","file_name","type","video_element","end_trial","keyboardListener","after_response","stopped","e","currenttime","response","trial_data","simulation_mode","simulation_options","load_callback","data","respond","default_data"],"mappings":"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"}