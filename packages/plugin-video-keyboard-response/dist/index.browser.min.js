var jsPsychVideoKeyboardResponse = (function (r) {
  "use strict";
  var h = {
    name: "@jspsych/plugin-video-keyboard-response",
    version: "2.0.0",
    description: "jsPsych plugin for playing a video file and getting a keyboard response",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest --passWithNoTests",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-video-keyboard-response",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/video-keyboard-response",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const _ = {
    name: "video-keyboard-response",
    version: h.version,
    parameters: {
      stimulus: { type: r.ParameterType.VIDEO, pretty_name: "Video", default: void 0, array: !0 },
      choices: { type: r.ParameterType.KEYS, pretty_name: "Choices", default: "ALL_KEYS" },
      prompt: { type: r.ParameterType.HTML_STRING, pretty_name: "Prompt", default: null },
      width: { type: r.ParameterType.INT, pretty_name: "Width", default: "" },
      height: { type: r.ParameterType.INT, pretty_name: "Height", default: "" },
      autoplay: { type: r.ParameterType.BOOL, pretty_name: "Autoplay", default: !0 },
      controls: { type: r.ParameterType.BOOL, pretty_name: "Controls", default: !1 },
      start: { type: r.ParameterType.FLOAT, pretty_name: "Start", default: null },
      stop: { type: r.ParameterType.FLOAT, pretty_name: "Stop", default: null },
      rate: { type: r.ParameterType.FLOAT, pretty_name: "Rate", default: 1 },
      trial_ends_after_video: {
        type: r.ParameterType.BOOL,
        pretty_name: "End trial after video finishes",
        default: !1,
      },
      trial_duration: { type: r.ParameterType.INT, pretty_name: "Trial duration", default: null },
      response_ends_trial: {
        type: r.ParameterType.BOOL,
        pretty_name: "Response ends trial",
        default: !0,
      },
      response_allowed_while_playing: {
        type: r.ParameterType.BOOL,
        pretty_name: "Response allowed while playing",
        default: !0,
      },
    },
    data: {
      response: { type: r.ParameterType.STRING },
      rt: { type: r.ParameterType.INT },
      stimulus: { type: r.ParameterType.STRING, array: !0 },
    },
  };
  class c {
    constructor(s) {
      this.jsPsych = s;
    }
    trial(s, e) {
      if (!Array.isArray(e.stimulus))
        throw new Error(`
        The stimulus property for the video-keyboard-response plugin must be an array
        of files. See https://www.jspsych.org/latest/plugins/video-keyboard-response/#parameters
      `);
      var t = "<div>";
      (t += '<video id="jspsych-video-keyboard-response-stimulus"'),
        e.width && (t += ' width="' + e.width + '"'),
        e.height && (t += ' height="' + e.height + '"'),
        e.autoplay && e.start == null && (t += " autoplay "),
        e.controls && (t += " controls "),
        e.start !== null && (t += ' style="visibility: hidden;"'),
        (t += ">");
      var i = this.jsPsych.pluginAPI.getVideoBuffer(e.stimulus[0]);
      if (!i)
        for (var n = 0; n < e.stimulus.length; n++) {
          var l = e.stimulus[n];
          l.indexOf("?") > -1 && (l = l.substring(0, l.indexOf("?")));
          var o = l.substr(l.lastIndexOf(".") + 1);
          (o = o.toLowerCase()),
            o == "mov" &&
              console.warn(
                "Warning: video-keyboard-response plugin does not reliably support .mov files."
              ),
            (t += '<source src="' + l + '" type="video/' + o + '">');
        }
      (t += "</video>"), (t += "</div>"), e.prompt !== null && (t += e.prompt), (s.innerHTML = t);
      var a = s.querySelector("#jspsych-video-keyboard-response-stimulus");
      i && (a.src = i),
        (a.onended = () => {
          if (
            (e.trial_ends_after_video && d(),
            e.response_allowed_while_playing == !1 && !e.trial_ends_after_video)
          )
            var p = this.jsPsych.pluginAPI.getKeyboardResponse({
              callback_function: y,
              valid_responses: e.choices,
              rt_method: "performance",
              persist: !1,
              allow_held_key: !1,
            });
        }),
        (a.playbackRate = e.rate),
        e.start !== null &&
          (a.pause(),
          (a.onseeked = () => {
            (a.style.visibility = "visible"),
              (a.muted = !1),
              e.autoplay ? a.play() : a.pause(),
              (a.onseeked = () => {});
          }),
          (a.onplaying = () => {
            (a.currentTime = e.start), (a.onplaying = () => {});
          }),
          (a.muted = !0),
          a.play());
      let m = !1;
      e.stop !== null &&
        a.addEventListener("timeupdate", (p) => {
          var g = a.currentTime;
          if (g >= e.stop) {
            if (!e.response_allowed_while_playing)
              var P = this.jsPsych.pluginAPI.getKeyboardResponse({
                callback_function: y,
                valid_responses: e.choices,
                rt_method: "performance",
                persist: !1,
                allow_held_key: !1,
              });
            a.pause(), e.trial_ends_after_video && !m && ((m = !0), d());
          }
        });
      var u = { rt: null, key: null };
      const d = () => {
        this.jsPsych.pluginAPI.cancelAllKeyboardResponses(),
          s.querySelector("#jspsych-video-keyboard-response-stimulus").pause(),
          (s.querySelector("#jspsych-video-keyboard-response-stimulus").onended = () => {});
        var p = { rt: u.rt, stimulus: e.stimulus, response: u.key };
        this.jsPsych.finishTrial(p);
      };
      var y = (p) => {
        (s.querySelector("#jspsych-video-keyboard-response-stimulus").className += " responded"),
          u.key == null && (u = p),
          e.response_ends_trial && d();
      };
      if (e.choices != "NO_KEYS" && e.response_allowed_while_playing)
        var f = this.jsPsych.pluginAPI.getKeyboardResponse({
          callback_function: y,
          valid_responses: e.choices,
          rt_method: "performance",
          persist: !1,
          allow_held_key: !1,
        });
      e.trial_duration !== null && this.jsPsych.pluginAPI.setTimeout(d, e.trial_duration);
    }
    simulate(s, e, t, i) {
      e == "data-only" && (i(), this.simulate_data_only(s, t)),
        e == "visual" && this.simulate_visual(s, t, i);
    }
    simulate_data_only(s, e) {
      const t = this.create_simulation_data(s, e);
      this.jsPsych.finishTrial(t);
    }
    simulate_visual(s, e, t) {
      const i = this.create_simulation_data(s, e),
        n = this.jsPsych.getDisplayElement();
      this.trial(n, s), t();
      const l = n.querySelector("#jspsych-video-button-response-stimulus"),
        o = () => {
          i.rt !== null && this.jsPsych.pluginAPI.pressKey(i.response, i.rt);
        };
      s.response_allowed_while_playing ? o() : l.addEventListener("ended", o);
    }
    create_simulation_data(s, e) {
      const t = {
          stimulus: s.stimulus,
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0),
          response: this.jsPsych.pluginAPI.getValidKey(s.choices),
        },
        i = this.jsPsych.pluginAPI.mergeSimulationData(t, e);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(s, i), i;
    }
  }
  return (c.info = _), c;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
