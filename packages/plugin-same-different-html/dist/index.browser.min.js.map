{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"same-different-html\",\n  version: version,\n  parameters: {\n    /** A pair of stimuli, represented as an array with two entries, one for\n     * each stimulus. A stimulus is a string containing valid HTML markup.\n     * Stimuli will be shown in the order that they are defined in the array. */\n    stimuli: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n      array: true,\n    },\n    /** Correct answer: either \"same\" or \"different\". */\n    answer: {\n      type: ParameterType.SELECT,\n      options: [\"same\", \"different\"],\n      default: undefined,\n    },\n    /** The key that subjects should press to indicate that the two stimuli are the same. */\n    same_key: {\n      type: ParameterType.KEY,\n      default: \"q\",\n    },\n    /** The key that subjects should press to indicate that the two stimuli are different. */\n    different_key: {\n      type: ParameterType.KEY,\n      default: \"p\",\n    },\n    /** How long to show the first stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the participant presses any key. */\n    first_stim_duration: {\n      type: ParameterType.INT,\n      default: 1000,\n    },\n    /** How long to show a blank screen in between the two stimuli. */\n    gap_duration: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /** How long to show the second stimulus for in milliseconds. If null, then the stimulus will remain on the screen until a valid response is made. */\n    second_stim_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Second stimulus duration\",\n      default: 1000,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n  },\n  data: {\n    /**  An array of length 2 containing the HTML-formatted content that the participant saw for each trial. This will be encoded as a JSON string\n     * when data is saved using the `.json()` or `.csv()` functions. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      array: true,\n    },\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the second stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** `true` if the participant's response matched the `answer` for this trial.  */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n    /** The correct answer to the trial, either `'same'` or `'different'`. */\n    answer: {\n      type: ParameterType.STRING,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The same-different-html plugin displays two stimuli sequentially. Stimuli are HTML objects.\n * The participant responds using the keyboard, and indicates whether the stimuli were the\n * same or different. Same does not necessarily mean identical; a category judgment could be made, for example.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/same-different-html/ same-different-html plugin documentation on jspsych.org}\n */\nclass SameDifferentHtmlPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    display_element.innerHTML =\n      '<div class=\"jspsych-same-different-stimulus\">' + trial.stimuli[0] + \"</div>\";\n\n    var first_stim_info: { key: string; rt: number };\n    if (trial.first_stim_duration > 0) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        showBlankScreen();\n      }, trial.first_stim_duration);\n    } else {\n      const afterKeyboardResponse = (info: { key: string; rt: number }) => {\n        first_stim_info = info;\n        showBlankScreen();\n      };\n      this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: afterKeyboardResponse,\n        valid_responses: \"ALL_KEYS\",\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    const showBlankScreen = () => {\n      display_element.innerHTML = \"\";\n\n      this.jsPsych.pluginAPI.setTimeout(showSecondStim, trial.gap_duration);\n    };\n\n    const showSecondStim = () => {\n      var html = '<div class=\"jspsych-same-different-stimulus\">' + trial.stimuli[1] + \"</div>\";\n      //show prompt here\n      if (trial.prompt !== null) {\n        html += trial.prompt;\n      }\n      display_element.innerHTML = html;\n\n      if (trial.second_stim_duration > 0) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          display_element.querySelector<HTMLElement>(\n            \".jspsych-same-different-stimulus\"\n          ).style.visibility = \"hidden\";\n        }, trial.second_stim_duration);\n      }\n\n      const after_response = (info: { key: string; rt: number }) => {\n        var correct = false;\n\n        var skey = trial.same_key;\n        var dkey = trial.different_key;\n\n        if (this.jsPsych.pluginAPI.compareKeys(info.key, skey) && trial.answer == \"same\") {\n          correct = true;\n        }\n\n        if (this.jsPsych.pluginAPI.compareKeys(info.key, dkey) && trial.answer == \"different\") {\n          correct = true;\n        }\n\n        var trial_data = {\n          rt: info.rt,\n          answer: trial.answer,\n          correct: correct,\n          stimulus: [trial.stimuli[0], trial.stimuli[1]],\n          response: info.key,\n        };\n        if (first_stim_info) {\n          trial_data[\"rt_stim1\"] = first_stim_info.rt;\n          trial_data[\"response_stim1\"] = first_stim_info.key;\n        }\n\n        this.jsPsych.finishTrial(trial_data);\n      };\n\n      this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [trial.same_key, trial.different_key],\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    };\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const key = this.jsPsych.pluginAPI.getValidKey([trial.same_key, trial.different_key]);\n\n    const default_data = <any>{\n      stimuli: trial.stimuli,\n      response: key,\n      answer: trial.answer,\n      correct: trial.answer == \"same\" ? key == trial.same_key : key == trial.different_key,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n    };\n\n    if (trial.first_stim_duration == null) {\n      default_data.rt_stim1 = this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true);\n      default_data.response_stim1 = this.jsPsych.pluginAPI.getValidKey([\n        trial.same_key,\n        trial.different_key,\n      ]);\n    }\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (trial.first_stim_duration == null) {\n      this.jsPsych.pluginAPI.pressKey(data.response_stim1, data.rt_stim1);\n    }\n\n    this.jsPsych.pluginAPI.pressKey(\n      data.response,\n      trial.first_stim_duration + trial.gap_duration + data.rt\n    );\n  }\n}\n\nexport default SameDifferentHtmlPlugin;\n"],"names":["info","version","ParameterType","SameDifferentHtmlPlugin","jsPsych","display_element","trial","first_stim_info","showBlankScreen","afterKeyboardResponse","showSecondStim","html","after_response","correct","skey","dkey","trial_data","simulation_mode","simulation_options","load_callback","key","default_data","data"],"mappings":"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"}