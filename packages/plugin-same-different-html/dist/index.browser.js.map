{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"same-different-html\",\n  version: version,\n  parameters: {\n    /** A pair of stimuli, represented as an array with two entries, one for\n     * each stimulus. A stimulus is a string containing valid HTML markup.\n     * Stimuli will be shown in the order that they are defined in the array. */\n    stimuli: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n      array: true,\n    },\n    /** Correct answer: either \"same\" or \"different\". */\n    answer: {\n      type: ParameterType.SELECT,\n      options: [\"same\", \"different\"],\n      default: undefined,\n    },\n    /** The key that subjects should press to indicate that the two stimuli are the same. */\n    same_key: {\n      type: ParameterType.KEY,\n      default: \"q\",\n    },\n    /** The key that subjects should press to indicate that the two stimuli are different. */\n    different_key: {\n      type: ParameterType.KEY,\n      default: \"p\",\n    },\n    /** How long to show the first stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the participant presses any key. */\n    first_stim_duration: {\n      type: ParameterType.INT,\n      default: 1000,\n    },\n    /** How long to show a blank screen in between the two stimuli. */\n    gap_duration: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /** How long to show the second stimulus for in milliseconds. If null, then the stimulus will remain on the screen until a valid response is made. */\n    second_stim_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Second stimulus duration\",\n      default: 1000,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n  },\n  data: {\n    /**  An array of length 2 containing the HTML-formatted content that the participant saw for each trial. This will be encoded as a JSON string\n     * when data is saved using the `.json()` or `.csv()` functions. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      array: true,\n    },\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the second stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** `true` if the participant's response matched the `answer` for this trial.  */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n    /** The correct answer to the trial, either `'same'` or `'different'`. */\n    answer: {\n      type: ParameterType.STRING,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The same-different-html plugin displays two stimuli sequentially. Stimuli are HTML objects.\n * The participant responds using the keyboard, and indicates whether the stimuli were the\n * same or different. Same does not necessarily mean identical; a category judgment could be made, for example.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/same-different-html/ same-different-html plugin documentation on jspsych.org}\n */\nclass SameDifferentHtmlPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    display_element.innerHTML =\n      '<div class=\"jspsych-same-different-stimulus\">' + trial.stimuli[0] + \"</div>\";\n\n    var first_stim_info: { key: string; rt: number };\n    if (trial.first_stim_duration > 0) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        showBlankScreen();\n      }, trial.first_stim_duration);\n    } else {\n      const afterKeyboardResponse = (info: { key: string; rt: number }) => {\n        first_stim_info = info;\n        showBlankScreen();\n      };\n      this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: afterKeyboardResponse,\n        valid_responses: \"ALL_KEYS\",\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    const showBlankScreen = () => {\n      display_element.innerHTML = \"\";\n\n      this.jsPsych.pluginAPI.setTimeout(showSecondStim, trial.gap_duration);\n    };\n\n    const showSecondStim = () => {\n      var html = '<div class=\"jspsych-same-different-stimulus\">' + trial.stimuli[1] + \"</div>\";\n      //show prompt here\n      if (trial.prompt !== null) {\n        html += trial.prompt;\n      }\n      display_element.innerHTML = html;\n\n      if (trial.second_stim_duration > 0) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          display_element.querySelector<HTMLElement>(\n            \".jspsych-same-different-stimulus\"\n          ).style.visibility = \"hidden\";\n        }, trial.second_stim_duration);\n      }\n\n      const after_response = (info: { key: string; rt: number }) => {\n        var correct = false;\n\n        var skey = trial.same_key;\n        var dkey = trial.different_key;\n\n        if (this.jsPsych.pluginAPI.compareKeys(info.key, skey) && trial.answer == \"same\") {\n          correct = true;\n        }\n\n        if (this.jsPsych.pluginAPI.compareKeys(info.key, dkey) && trial.answer == \"different\") {\n          correct = true;\n        }\n\n        var trial_data = {\n          rt: info.rt,\n          answer: trial.answer,\n          correct: correct,\n          stimulus: [trial.stimuli[0], trial.stimuli[1]],\n          response: info.key,\n        };\n        if (first_stim_info) {\n          trial_data[\"rt_stim1\"] = first_stim_info.rt;\n          trial_data[\"response_stim1\"] = first_stim_info.key;\n        }\n\n        this.jsPsych.finishTrial(trial_data);\n      };\n\n      this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [trial.same_key, trial.different_key],\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    };\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const key = this.jsPsych.pluginAPI.getValidKey([trial.same_key, trial.different_key]);\n\n    const default_data = <any>{\n      stimuli: trial.stimuli,\n      response: key,\n      answer: trial.answer,\n      correct: trial.answer == \"same\" ? key == trial.same_key : key == trial.different_key,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n    };\n\n    if (trial.first_stim_duration == null) {\n      default_data.rt_stim1 = this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true);\n      default_data.response_stim1 = this.jsPsych.pluginAPI.getValidKey([\n        trial.same_key,\n        trial.different_key,\n      ]);\n    }\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (trial.first_stim_duration == null) {\n      this.jsPsych.pluginAPI.pressKey(data.response_stim1, data.rt_stim1);\n    }\n\n    this.jsPsych.pluginAPI.pressKey(\n      data.response,\n      trial.first_stim_duration + trial.gap_duration + data.rt\n    );\n  }\n}\n\nexport default SameDifferentHtmlPlugin;\n"],"names":["version","ParameterType","info"],"mappings":"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"}