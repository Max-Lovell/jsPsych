{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"preload\",\n  version: version,\n  parameters: {\n    /** If `true`, the plugin will preload any files that can be automatically preloaded based on the main experiment\n     * timeline that is passed to `jsPsych.run`. If `false`, any file(s) to be preloaded should be specified by passing\n     * a timeline array to the `trials` parameter and/or an array of file paths to the `images`, `audio`, and/or `video`\n     * parameters. Setting this parameter to `false` is useful when you plan to preload your files in smaller batches\n     * throughout the experiment. */\n    auto_preload: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** An array containing one or more jsPsych trial or timeline objects. This parameter is useful when you want to\n     * automatically preload stimuli files from a specific subset of the experiment. See [Creating an Experiment:\n     * The Timeline](../overview/timeline.md) for information on constructing timelines. */\n    trials: {\n      type: ParameterType.TIMELINE,\n      default: [],\n    },\n    /**\n     * Array with one or more image files to load. This parameter is often used in cases where media files cannot\n     * be automatically preloaded based on the timeline, e.g. because the media files are passed into an image plugin/parameter with\n     * timeline variables or dynamic parameters, or because the image is embedded in an HTML string.\n     */\n    images: {\n      type: ParameterType.STRING,\n      default: [],\n      array: true,\n    },\n    /**\n     * Array with one or more audio files to load. This parameter is often used in cases where media files cannot\n     * be automatically preloaded based on the timeline, e.g. because the media files are passed into an audio plugin/parameter with\n     * timeline variables or dynamic parameters, or because the audio is embedded in an HTML string.\n     */\n    audio: {\n      type: ParameterType.STRING,\n      default: [],\n      array: true,\n    },\n    /**\n     * Array with one or more video files to load. This parameter is often used in cases where media files cannot\n     * be automatically preloaded based on the timeline, e.g. because the media files are passed into a video plugin/parameter with\n     * timeline variables or dynamic parameters, or because the video is embedded in an HTML string.\n     */\n    video: {\n      type: ParameterType.STRING,\n      default: [],\n      array: true,\n    },\n    /** HTML-formatted message to show above the progress bar while the files are loading. If `null`, then no message is shown. */\n    message: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** If `true`, a progress bar will be shown while the files are loading. If `false`, no progress bar is shown. */\n    show_progress_bar: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * Whether or not to continue with the experiment if a loading error occurs. If false, then if a loading error occurs,\n     * the error_message will be shown on the page and the trial will not end. If true, then if if a loading error occurs, the trial will end\n     * and preloading failure will be logged in the trial data.\n     */\n    continue_after_error: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** HTML-formatted message to be shown on the page after loading fails or times out. Only applies when `continue_after_error` is `false`.*/\n    error_message: {\n      type: ParameterType.HTML_STRING,\n      default: \"The experiment failed to load.\",\n    },\n    /**\n     * Whether or not to show a detailed error message on the page. If true, then detailed error messages will be shown on the\n     * page for all files that failed to load, along with the general error_message. This parameter is only relevant when continue_after_error is false.\n     */\n    show_detailed_errors: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /**\n     * The maximum amount of time that the plugin should wait before stopping the preload and either ending the trial\n     * (if continue_after_error is true) or stopping the experiment with an error message (if continue_after_error is false).\n     * If null, the plugin will wait indefintely for the files to load.\n     */\n    max_load_time: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Function to be called after a file fails to load. The function takes the file name as its only argument. */\n    on_error: {\n      type: ParameterType.FUNCTION,\n      default: null,\n    },\n    /** Function to be called after a file loads successfully. The function takes the file name as its only argument. */\n    on_success: {\n      type: ParameterType.FUNCTION,\n      default: null,\n    },\n  },\n  data: {\n    /**  If `true`, then all files loaded successfully within the `max_load_time`. If `false`, then one or\n     * more file requests returned a failure and/or the file loading did not complete within the `max_load_time` duration.*/\n    success: {\n      type: ParameterType.BOOL,\n    },\n    /** If `true`, then the files did not finish loading within the `max_load_time` duration.\n     * If `false`, then the file loading did not timeout. Note that when the preload trial does not timeout\n     * (`timeout: false`), it is still possible for loading to fail (`success: false`). This happens if\n     * one or more files fails to load and all file requests trigger either a success or failure event before\n     * the `max_load_time` duration. */\n    timeout: {\n      type: ParameterType.BOOL,\n    },\n    /** One or more image file paths that produced a loading failure before the trial ended. */\n    failed_images: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n    /** One or more audio file paths that produced a loading failure before the trial ended. */\n    failed_audio: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n    /** One or more video file paths that produced a loading failure before the trial ended. */\n    failed_video: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin loads images, audio, and video files. It is used for loading files into the browser's memory before they are\n * needed in the experiment, in order to improve stimulus and response timing, and avoid disruption to the experiment flow.\n * We recommend using this plugin anytime you are loading media files, and especially when your experiment requires large\n * and/or many media files. See the [Media Preloading page](../overview/media-preloading.md) for more information.\n *\n * The preload trial will end as soon as all files have loaded successfully. The trial will end or stop with an error\n * message when one of these two scenarios occurs (whichever comes first): (a) all files have not finished loading\n * when the `max_load_time` duration is reached, or (b) all file requests have responded with either a load or fail\n * event, and one or more files has failed to load. The `continue_after_error` parameter determines whether the trial\n * will stop with an error message or end (allowing the experiment to continue) when preloading is not successful.\n *\n * @author Becky Gilbert\n * @see {@link https://www.jspsych.org/latest/plugins/preload/ preload plugin documentation on jspsych.org}\n */\nclass PreloadPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var success = null;\n    var timeout = false;\n    var failed_images = [];\n    var failed_audio = [];\n    var failed_video = [];\n    var detailed_errors = [];\n    var in_safe_mode = this.jsPsych.getSafeModeStatus();\n\n    // create list of media to preload //\n\n    var images = [];\n    var audio = [];\n    var video = [];\n\n    if (trial.auto_preload) {\n      var experiment_timeline = this.jsPsych.getTimeline();\n      var auto_preload = this.jsPsych.pluginAPI.getAutoPreloadList(experiment_timeline);\n      images = images.concat(auto_preload.images);\n      audio = audio.concat(auto_preload.audio);\n      video = video.concat(auto_preload.video);\n    }\n\n    if (trial.trials.length > 0) {\n      var trial_preloads = this.jsPsych.pluginAPI.getAutoPreloadList(trial.trials);\n      images = images.concat(trial_preloads.images);\n      audio = audio.concat(trial_preloads.audio);\n      video = video.concat(trial_preloads.video);\n    }\n\n    images = images.concat(trial.images);\n    audio = audio.concat(trial.audio);\n    video = video.concat(trial.video);\n\n    images = this.jsPsych.utils.unique(images.flat());\n    audio = this.jsPsych.utils.unique(audio.flat());\n    video = this.jsPsych.utils.unique(video.flat());\n\n    if (in_safe_mode) {\n      // don't preload video if in safe mode (experiment is running via file protocol)\n      video = [];\n    }\n\n    // render display of message and progress bar\n\n    var html = \"\";\n\n    if (trial.message !== null) {\n      html += trial.message;\n    }\n\n    if (trial.show_progress_bar) {\n      html += `\n            <div id='jspsych-loading-progress-bar-container' style='height: 10px; width: 300px; background-color: #ddd; margin: auto;'>\n              <div id='jspsych-loading-progress-bar' style='height: 10px; width: 0%; background-color: #777;'></div>\n            </div>`;\n    }\n\n    display_element.innerHTML = html;\n\n    const update_loading_progress_bar = () => {\n      loaded++;\n      if (trial.show_progress_bar) {\n        var percent_loaded = (loaded / total_n) * 100;\n        var preload_progress_bar = display_element.querySelector<HTMLElement>(\n          \"#jspsych-loading-progress-bar\"\n        );\n        if (preload_progress_bar !== null) {\n          preload_progress_bar.style.width = percent_loaded + \"%\";\n        }\n      }\n    };\n\n    // called if all files load successfully\n    const on_success = () => {\n      if (typeof timeout !== \"undefined\" && timeout === false) {\n        // clear timeout immediately after finishing, to handle race condition with max_load_time\n        this.jsPsych.pluginAPI.clearAllTimeouts();\n        // need to call cancel preload function to clear global jsPsych preload_request list, even when they've all succeeded\n        this.jsPsych.pluginAPI.cancelPreloads();\n        success = true;\n        end_trial();\n      }\n    };\n\n    // called if all_files haven't finished loading when max_load_time is reached\n    const on_timeout = () => {\n      this.jsPsych.pluginAPI.cancelPreloads();\n      if (typeof success !== \"undefined\" && (success === false || success === null)) {\n        timeout = true;\n        if (loaded_success < total_n) {\n          success = false;\n        }\n        after_error(\"timeout\"); // call trial's on_error event handler here, in case loading timed out with no file errors\n        detailed_errors.push(\n          \"<p><strong>Loading timed out.</strong><br>\" +\n            \"Consider compressing your stimuli files, loading your files in smaller batches,<br>\" +\n            \"and/or increasing the <i>max_load_time</i> parameter.</p>\"\n        );\n        if (trial.continue_after_error) {\n          end_trial();\n        } else {\n          stop_with_error_message();\n        }\n      }\n    };\n\n    const stop_with_error_message = () => {\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n      this.jsPsych.pluginAPI.cancelPreloads();\n      // show error message\n      display_element.innerHTML = trial.error_message;\n      // show detailed errors, if necessary\n      if (trial.show_detailed_errors) {\n        display_element.innerHTML += \"<p><strong>Error details:</strong></p>\";\n        detailed_errors.forEach((e) => {\n          display_element.innerHTML += e;\n        });\n      }\n    };\n\n    const end_trial = () => {\n      var trial_data = {\n        success: success,\n        timeout: timeout,\n        failed_images: failed_images,\n        failed_audio: failed_audio,\n        failed_video: failed_video,\n      };\n\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // do preloading\n\n    if (trial.max_load_time !== null) {\n      this.jsPsych.pluginAPI.setTimeout(on_timeout, trial.max_load_time);\n    }\n\n    var total_n = images.length + audio.length + video.length;\n    var loaded = 0; // success or error count\n    var loaded_success = 0; // success count\n\n    if (total_n == 0) {\n      on_success();\n    } else {\n      const load_video = (cb) => {\n        this.jsPsych.pluginAPI.preloadVideo(video, cb, file_loading_success, file_loading_error);\n      };\n      const load_audio = (cb) => {\n        this.jsPsych.pluginAPI.preloadAudio(audio, cb, file_loading_success, file_loading_error);\n      };\n      const load_images = (cb) => {\n        this.jsPsych.pluginAPI.preloadImages(images, cb, file_loading_success, file_loading_error);\n      };\n      if (video.length > 0) {\n        load_video(() => {});\n      }\n      if (audio.length > 0) {\n        load_audio(() => {});\n      }\n      if (images.length > 0) {\n        load_images(() => {});\n      }\n    }\n\n    // helper functions and callbacks\n\n    // called when a single file loading fails\n    function file_loading_error(e) {\n      // update progress bar even if there's an error\n      update_loading_progress_bar();\n      // change success flag after first file loading error\n      if (success == null) {\n        success = false;\n      }\n      // add file to failed media list\n      var source = \"unknown file\";\n      if (e.source) {\n        source = e.source;\n      }\n      if (e.error && e.error.path && e.error.path.length > 0) {\n        if (e.error.path[0].localName == \"img\") {\n          failed_images.push(source);\n        } else if (e.error.path[0].localName == \"audio\") {\n          failed_audio.push(source);\n        } else if (e.error.path[0].localName == \"video\") {\n          failed_video.push(source);\n        }\n      }\n      // construct detailed error message\n      var err_msg = \"<p><strong>Error loading file: \" + source + \"</strong><br>\";\n      if (e.error.statusText) {\n        err_msg += \"File request response status: \" + e.error.statusText + \"<br>\";\n      }\n      if (e.error == \"404\") {\n        err_msg += \"404 - file not found.<br>\";\n      }\n      if (\n        typeof e.error.loaded !== \"undefined\" &&\n        e.error.loaded !== null &&\n        e.error.loaded !== 0\n      ) {\n        err_msg += e.error.loaded + \" bytes transferred.\";\n      } else {\n        err_msg +=\n          \"File did not begin loading. Check that file path is correct and reachable by the browser,<br>\" +\n          \"and that loading is not blocked by cross-origin resource sharing (CORS) errors.\";\n      }\n      err_msg += \"</p>\";\n      detailed_errors.push(err_msg);\n      // call trial's on_error function\n      after_error(source);\n      // if this is the last file\n      if (loaded == total_n) {\n        if (trial.continue_after_error) {\n          // if continue_after_error is false, then stop with an error\n          end_trial();\n        } else {\n          // otherwise end the trial and continue\n          stop_with_error_message();\n        }\n      }\n    }\n\n    // called when a single file loads successfully\n    function file_loading_success(source: string) {\n      update_loading_progress_bar();\n      // call trial's on_success function\n      after_success(source);\n      loaded_success++;\n      if (loaded_success == total_n) {\n        // if this is the last file and all loaded successfully, call success function\n        on_success();\n      } else if (loaded == total_n) {\n        // if this is the last file and there was at least one error\n        if (trial.continue_after_error) {\n          // end the trial and continue with experiment\n          end_trial();\n        } else {\n          // if continue_after_error is false, then stop with an error\n          stop_with_error_message();\n        }\n      }\n    }\n\n    function after_error(source: string) {\n      // call on_error function and pass file name\n      if (trial.on_error !== null) {\n        trial.on_error(source);\n      }\n    }\n    function after_success(source: string) {\n      // call on_success function and pass file name\n      if (trial.on_success !== null) {\n        trial.on_success(source);\n      }\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      success: true,\n      timeout: false,\n      failed_images: [],\n      failed_audio: [],\n      failed_video: [],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n  }\n}\n\nexport default PreloadPlugin;\n"],"names":["info","version","ParameterType","PreloadPlugin","jsPsych","display_element","trial","success","timeout","failed_images","failed_audio","failed_video","detailed_errors","in_safe_mode","images","audio","video","experiment_timeline","auto_preload","trial_preloads","html","update_loading_progress_bar","loaded","percent_loaded","total_n","preload_progress_bar","on_success","end_trial","on_timeout","loaded_success","after_error","stop_with_error_message","e","trial_data","load_video","cb","file_loading_success","file_loading_error","load_audio","load_images","source","err_msg","after_success","simulation_mode","simulation_options","load_callback","default_data","data"],"mappings":"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"}