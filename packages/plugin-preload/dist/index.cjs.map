{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"preload\",\n  version: version,\n  parameters: {\n    /** If `true`, the plugin will preload any files that can be automatically preloaded based on the main experiment\n     * timeline that is passed to `jsPsych.run`. If `false`, any file(s) to be preloaded should be specified by passing\n     * a timeline array to the `trials` parameter and/or an array of file paths to the `images`, `audio`, and/or `video`\n     * parameters. Setting this parameter to `false` is useful when you plan to preload your files in smaller batches\n     * throughout the experiment. */\n    auto_preload: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** An array containing one or more jsPsych trial or timeline objects. This parameter is useful when you want to\n     * automatically preload stimuli files from a specific subset of the experiment. See [Creating an Experiment:\n     * The Timeline](../overview/timeline.md) for information on constructing timelines. */\n    trials: {\n      type: ParameterType.TIMELINE,\n      default: [],\n    },\n    /**\n     * Array with one or more image files to load. This parameter is often used in cases where media files cannot\n     * be automatically preloaded based on the timeline, e.g. because the media files are passed into an image plugin/parameter with\n     * timeline variables or dynamic parameters, or because the image is embedded in an HTML string.\n     */\n    images: {\n      type: ParameterType.STRING,\n      default: [],\n      array: true,\n    },\n    /**\n     * Array with one or more audio files to load. This parameter is often used in cases where media files cannot\n     * be automatically preloaded based on the timeline, e.g. because the media files are passed into an audio plugin/parameter with\n     * timeline variables or dynamic parameters, or because the audio is embedded in an HTML string.\n     */\n    audio: {\n      type: ParameterType.STRING,\n      default: [],\n      array: true,\n    },\n    /**\n     * Array with one or more video files to load. This parameter is often used in cases where media files cannot\n     * be automatically preloaded based on the timeline, e.g. because the media files are passed into a video plugin/parameter with\n     * timeline variables or dynamic parameters, or because the video is embedded in an HTML string.\n     */\n    video: {\n      type: ParameterType.STRING,\n      default: [],\n      array: true,\n    },\n    /** HTML-formatted message to show above the progress bar while the files are loading. If `null`, then no message is shown. */\n    message: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** If `true`, a progress bar will be shown while the files are loading. If `false`, no progress bar is shown. */\n    show_progress_bar: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * Whether or not to continue with the experiment if a loading error occurs. If false, then if a loading error occurs,\n     * the error_message will be shown on the page and the trial will not end. If true, then if if a loading error occurs, the trial will end\n     * and preloading failure will be logged in the trial data.\n     */\n    continue_after_error: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** HTML-formatted message to be shown on the page after loading fails or times out. Only applies when `continue_after_error` is `false`.*/\n    error_message: {\n      type: ParameterType.HTML_STRING,\n      default: \"The experiment failed to load.\",\n    },\n    /**\n     * Whether or not to show a detailed error message on the page. If true, then detailed error messages will be shown on the\n     * page for all files that failed to load, along with the general error_message. This parameter is only relevant when continue_after_error is false.\n     */\n    show_detailed_errors: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /**\n     * The maximum amount of time that the plugin should wait before stopping the preload and either ending the trial\n     * (if continue_after_error is true) or stopping the experiment with an error message (if continue_after_error is false).\n     * If null, the plugin will wait indefintely for the files to load.\n     */\n    max_load_time: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Function to be called after a file fails to load. The function takes the file name as its only argument. */\n    on_error: {\n      type: ParameterType.FUNCTION,\n      default: null,\n    },\n    /** Function to be called after a file loads successfully. The function takes the file name as its only argument. */\n    on_success: {\n      type: ParameterType.FUNCTION,\n      default: null,\n    },\n  },\n  data: {\n    /**  If `true`, then all files loaded successfully within the `max_load_time`. If `false`, then one or\n     * more file requests returned a failure and/or the file loading did not complete within the `max_load_time` duration.*/\n    success: {\n      type: ParameterType.BOOL,\n    },\n    /** If `true`, then the files did not finish loading within the `max_load_time` duration.\n     * If `false`, then the file loading did not timeout. Note that when the preload trial does not timeout\n     * (`timeout: false`), it is still possible for loading to fail (`success: false`). This happens if\n     * one or more files fails to load and all file requests trigger either a success or failure event before\n     * the `max_load_time` duration. */\n    timeout: {\n      type: ParameterType.BOOL,\n    },\n    /** One or more image file paths that produced a loading failure before the trial ended. */\n    failed_images: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n    /** One or more audio file paths that produced a loading failure before the trial ended. */\n    failed_audio: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n    /** One or more video file paths that produced a loading failure before the trial ended. */\n    failed_video: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin loads images, audio, and video files. It is used for loading files into the browser's memory before they are\n * needed in the experiment, in order to improve stimulus and response timing, and avoid disruption to the experiment flow.\n * We recommend using this plugin anytime you are loading media files, and especially when your experiment requires large\n * and/or many media files. See the [Media Preloading page](../overview/media-preloading.md) for more information.\n *\n * The preload trial will end as soon as all files have loaded successfully. The trial will end or stop with an error\n * message when one of these two scenarios occurs (whichever comes first): (a) all files have not finished loading\n * when the `max_load_time` duration is reached, or (b) all file requests have responded with either a load or fail\n * event, and one or more files has failed to load. The `continue_after_error` parameter determines whether the trial\n * will stop with an error message or end (allowing the experiment to continue) when preloading is not successful.\n *\n * @author Becky Gilbert\n * @see {@link https://www.jspsych.org/latest/plugins/preload/ preload plugin documentation on jspsych.org}\n */\nclass PreloadPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var success = null;\n    var timeout = false;\n    var failed_images = [];\n    var failed_audio = [];\n    var failed_video = [];\n    var detailed_errors = [];\n    var in_safe_mode = this.jsPsych.getSafeModeStatus();\n\n    // create list of media to preload //\n\n    var images = [];\n    var audio = [];\n    var video = [];\n\n    if (trial.auto_preload) {\n      var experiment_timeline = this.jsPsych.getTimeline();\n      var auto_preload = this.jsPsych.pluginAPI.getAutoPreloadList(experiment_timeline);\n      images = images.concat(auto_preload.images);\n      audio = audio.concat(auto_preload.audio);\n      video = video.concat(auto_preload.video);\n    }\n\n    if (trial.trials.length > 0) {\n      var trial_preloads = this.jsPsych.pluginAPI.getAutoPreloadList(trial.trials);\n      images = images.concat(trial_preloads.images);\n      audio = audio.concat(trial_preloads.audio);\n      video = video.concat(trial_preloads.video);\n    }\n\n    images = images.concat(trial.images);\n    audio = audio.concat(trial.audio);\n    video = video.concat(trial.video);\n\n    images = this.jsPsych.utils.unique(images.flat());\n    audio = this.jsPsych.utils.unique(audio.flat());\n    video = this.jsPsych.utils.unique(video.flat());\n\n    if (in_safe_mode) {\n      // don't preload video if in safe mode (experiment is running via file protocol)\n      video = [];\n    }\n\n    // render display of message and progress bar\n\n    var html = \"\";\n\n    if (trial.message !== null) {\n      html += trial.message;\n    }\n\n    if (trial.show_progress_bar) {\n      html += `\n            <div id='jspsych-loading-progress-bar-container' style='height: 10px; width: 300px; background-color: #ddd; margin: auto;'>\n              <div id='jspsych-loading-progress-bar' style='height: 10px; width: 0%; background-color: #777;'></div>\n            </div>`;\n    }\n\n    display_element.innerHTML = html;\n\n    const update_loading_progress_bar = () => {\n      loaded++;\n      if (trial.show_progress_bar) {\n        var percent_loaded = (loaded / total_n) * 100;\n        var preload_progress_bar = display_element.querySelector<HTMLElement>(\n          \"#jspsych-loading-progress-bar\"\n        );\n        if (preload_progress_bar !== null) {\n          preload_progress_bar.style.width = percent_loaded + \"%\";\n        }\n      }\n    };\n\n    // called if all files load successfully\n    const on_success = () => {\n      if (typeof timeout !== \"undefined\" && timeout === false) {\n        // clear timeout immediately after finishing, to handle race condition with max_load_time\n        this.jsPsych.pluginAPI.clearAllTimeouts();\n        // need to call cancel preload function to clear global jsPsych preload_request list, even when they've all succeeded\n        this.jsPsych.pluginAPI.cancelPreloads();\n        success = true;\n        end_trial();\n      }\n    };\n\n    // called if all_files haven't finished loading when max_load_time is reached\n    const on_timeout = () => {\n      this.jsPsych.pluginAPI.cancelPreloads();\n      if (typeof success !== \"undefined\" && (success === false || success === null)) {\n        timeout = true;\n        if (loaded_success < total_n) {\n          success = false;\n        }\n        after_error(\"timeout\"); // call trial's on_error event handler here, in case loading timed out with no file errors\n        detailed_errors.push(\n          \"<p><strong>Loading timed out.</strong><br>\" +\n            \"Consider compressing your stimuli files, loading your files in smaller batches,<br>\" +\n            \"and/or increasing the <i>max_load_time</i> parameter.</p>\"\n        );\n        if (trial.continue_after_error) {\n          end_trial();\n        } else {\n          stop_with_error_message();\n        }\n      }\n    };\n\n    const stop_with_error_message = () => {\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n      this.jsPsych.pluginAPI.cancelPreloads();\n      // show error message\n      display_element.innerHTML = trial.error_message;\n      // show detailed errors, if necessary\n      if (trial.show_detailed_errors) {\n        display_element.innerHTML += \"<p><strong>Error details:</strong></p>\";\n        detailed_errors.forEach((e) => {\n          display_element.innerHTML += e;\n        });\n      }\n    };\n\n    const end_trial = () => {\n      var trial_data = {\n        success: success,\n        timeout: timeout,\n        failed_images: failed_images,\n        failed_audio: failed_audio,\n        failed_video: failed_video,\n      };\n\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // do preloading\n\n    if (trial.max_load_time !== null) {\n      this.jsPsych.pluginAPI.setTimeout(on_timeout, trial.max_load_time);\n    }\n\n    var total_n = images.length + audio.length + video.length;\n    var loaded = 0; // success or error count\n    var loaded_success = 0; // success count\n\n    if (total_n == 0) {\n      on_success();\n    } else {\n      const load_video = (cb) => {\n        this.jsPsych.pluginAPI.preloadVideo(video, cb, file_loading_success, file_loading_error);\n      };\n      const load_audio = (cb) => {\n        this.jsPsych.pluginAPI.preloadAudio(audio, cb, file_loading_success, file_loading_error);\n      };\n      const load_images = (cb) => {\n        this.jsPsych.pluginAPI.preloadImages(images, cb, file_loading_success, file_loading_error);\n      };\n      if (video.length > 0) {\n        load_video(() => {});\n      }\n      if (audio.length > 0) {\n        load_audio(() => {});\n      }\n      if (images.length > 0) {\n        load_images(() => {});\n      }\n    }\n\n    // helper functions and callbacks\n\n    // called when a single file loading fails\n    function file_loading_error(e) {\n      // update progress bar even if there's an error\n      update_loading_progress_bar();\n      // change success flag after first file loading error\n      if (success == null) {\n        success = false;\n      }\n      // add file to failed media list\n      var source = \"unknown file\";\n      if (e.source) {\n        source = e.source;\n      }\n      if (e.error && e.error.path && e.error.path.length > 0) {\n        if (e.error.path[0].localName == \"img\") {\n          failed_images.push(source);\n        } else if (e.error.path[0].localName == \"audio\") {\n          failed_audio.push(source);\n        } else if (e.error.path[0].localName == \"video\") {\n          failed_video.push(source);\n        }\n      }\n      // construct detailed error message\n      var err_msg = \"<p><strong>Error loading file: \" + source + \"</strong><br>\";\n      if (e.error.statusText) {\n        err_msg += \"File request response status: \" + e.error.statusText + \"<br>\";\n      }\n      if (e.error == \"404\") {\n        err_msg += \"404 - file not found.<br>\";\n      }\n      if (\n        typeof e.error.loaded !== \"undefined\" &&\n        e.error.loaded !== null &&\n        e.error.loaded !== 0\n      ) {\n        err_msg += e.error.loaded + \" bytes transferred.\";\n      } else {\n        err_msg +=\n          \"File did not begin loading. Check that file path is correct and reachable by the browser,<br>\" +\n          \"and that loading is not blocked by cross-origin resource sharing (CORS) errors.\";\n      }\n      err_msg += \"</p>\";\n      detailed_errors.push(err_msg);\n      // call trial's on_error function\n      after_error(source);\n      // if this is the last file\n      if (loaded == total_n) {\n        if (trial.continue_after_error) {\n          // if continue_after_error is false, then stop with an error\n          end_trial();\n        } else {\n          // otherwise end the trial and continue\n          stop_with_error_message();\n        }\n      }\n    }\n\n    // called when a single file loads successfully\n    function file_loading_success(source: string) {\n      update_loading_progress_bar();\n      // call trial's on_success function\n      after_success(source);\n      loaded_success++;\n      if (loaded_success == total_n) {\n        // if this is the last file and all loaded successfully, call success function\n        on_success();\n      } else if (loaded == total_n) {\n        // if this is the last file and there was at least one error\n        if (trial.continue_after_error) {\n          // end the trial and continue with experiment\n          end_trial();\n        } else {\n          // if continue_after_error is false, then stop with an error\n          stop_with_error_message();\n        }\n      }\n    }\n\n    function after_error(source: string) {\n      // call on_error function and pass file name\n      if (trial.on_error !== null) {\n        trial.on_error(source);\n      }\n    }\n    function after_success(source: string) {\n      // call on_success function and pass file name\n      if (trial.on_success !== null) {\n        trial.on_success(source);\n      }\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      success: true,\n      timeout: false,\n      failed_images: [],\n      failed_audio: [],\n      failed_video: [],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n  }\n}\n\nexport default PreloadPlugin;\n"],"names":["version","ParameterType"],"mappings":"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"}