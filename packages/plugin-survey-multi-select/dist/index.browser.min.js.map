{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"survey-multi-select\",\n  version: version,\n  parameters: {\n    /**\n     * An array of objects, each object represents a question that appears on the screen. Each object contains a prompt,\n     * options, required, and horizontal parameter that will be applied to the question. See examples below for further\n     * clarification.`prompt`: Type string, default value is *undefined*. The string is prompt/question that will be\n     * associated with a group of options (radio buttons). All questions will get presented on the same page (trial).\n     * `options`: Type array, defualt value is *undefined*. An array of strings. The array contains a set of options to\n     * display for an individual question.`required`: Type boolean, default value is null. The boolean value indicates\n     * if a question is required('true') or not ('false'), using the HTML5 `required` attribute. If this parameter is\n     * undefined, the question will be optional. `horizontal`:Type boolean, default value is false. If true, then the\n     * question is centered and the options are displayed horizontally. `name`: Name of the question. Used for storing\n     * data. If left undefined then default names (`Q0`, `Q1`, `...`) will be used for the questions.\n     */\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          default: undefined,\n        },\n        /** Array of multiple select options for this question. */\n        options: {\n          type: ParameterType.STRING,\n          array: true,\n          default: undefined,\n        },\n        /** If true, then the question will be centered and options will be displayed horizontally. */\n        horizontal: {\n          type: ParameterType.BOOL,\n          default: false,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          default: \"\",\n        },\n      },\n    },\n    /**\n     * If true, the display order of `questions` is randomly determined at the start of the trial. In the data\n     * object, `Q0` will still refer to the first question in the array, regardless of where it was presented\n     * visually.\n     */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** HTML formatted string to display at the top of the page above all the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** Label of the button to submit responses. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /** 'You must choose at least one response for this question' | Message to display if required response is not given. */\n    required_message: {\n      type: ParameterType.STRING,\n      default: \"You must choose at least one response for this question\",\n    },\n    /** This determines whether or not all of the input elements on the page should allow autocomplete.\n     * Setting this to true will enable autocomplete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n\n  data: {\n    /** An object containing the response for each question. The object will have a separate key (variable) for each question, with the first question in the trial being recorded in `Q0`, the second in `Q1`, and so on. The responses are recorded as integers, representing the position selected on the likert scale for that question. If the `name` parameter is defined for the question, then the response object will use the value of `name` as the key for each question. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    response: {\n      type: ParameterType.COMPLEX,\n      nested: {\n        identifier: {\n          type: ParameterType.STRING,\n        },\n        response: {\n          type:\n            ParameterType.STRING |\n            ParameterType.INT |\n            ParameterType.FLOAT |\n            ParameterType.BOOL |\n            ParameterType.OBJECT,\n        },\n      },\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the questions first appear on the screen until the participant's response(s) are submitted. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** An array with the order of questions. For example `[2,0,1]` would indicate that the first question was `trial.questions[2]` (the third item in the `questions` parameter), the second question was `trial.questions[0]`, and the final question was `trial.questions[1]`. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    question_order: {\n      type: ParameterType.INT,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The survey-multi-select plugin displays a set of questions with multiple select response fields. The participant can\n * select multiple answers.\n *\n * @see {@link https://www.jspsych.org/latest/plugins/survey-multi-select/ survey-multi-select plugin documentation on jspsych.org}\n */\nclass SurveyMultiSelectPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var plugin_id_name = \"jspsych-survey-multi-select\";\n    var plugin_id_selector = \"#\" + plugin_id_name;\n    const _join = (...args: Array<string | number>) => args.join(\"-\");\n\n    // inject CSS for trial\n    var cssstr =\n      \".jspsych-survey-multi-select-question { margin-top: 2em; margin-bottom: 2em; text-align: left; }\" +\n      \".jspsych-survey-multi-select-text span.required {color: darkred;}\" +\n      \".jspsych-survey-multi-select-horizontal .jspsych-survey-multi-select-text {  text-align: center;}\" +\n      \".jspsych-survey-multi-select-option { line-height: 2; }\" +\n      \".jspsych-survey-multi-select-horizontal .jspsych-survey-multi-select-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\" +\n      \"label.jspsych-survey-multi-select-text input[type='checkbox'] {margin-right: 1em;}\";\n    display_element.innerHTML =\n      '<style id=\"jspsych-survey-multi-select-css\">' + cssstr + \"</style>\";\n\n    // form element\n    var trial_form_id = _join(plugin_id_name, \"form\");\n    display_element.innerHTML += '<form id=\"' + trial_form_id + '\"></form>';\n    var trial_form = display_element.querySelector<HTMLFormElement>(\"#\" + trial_form_id);\n    if (!trial.autocomplete) {\n      trial_form.setAttribute(\"autocomplete\", \"off\");\n    }\n    // show preamble text\n    var preamble_id_name = _join(plugin_id_name, \"preamble\");\n    if (trial.preamble !== null) {\n      trial_form.innerHTML +=\n        '<div id=\"' +\n        preamble_id_name +\n        '\" class=\"' +\n        preamble_id_name +\n        '\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n    // so that the data are always associated with the same question regardless of order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n    // add multiple-select questions\n    for (var i = 0; i < trial.questions.length; i++) {\n      var question = trial.questions[question_order[i]];\n      var question_id = question_order[i];\n      // create question container\n      var question_classes = [_join(plugin_id_name, \"question\")];\n      if (question.horizontal) {\n        question_classes.push(_join(plugin_id_name, \"horizontal\"));\n      }\n\n      trial_form.innerHTML +=\n        '<div id=\"' +\n        _join(plugin_id_name, question_id) +\n        '\" data-name=\"' +\n        question.name +\n        '\" class=\"' +\n        question_classes.join(\" \") +\n        '\"></div>';\n\n      var question_selector = _join(plugin_id_selector, question_id);\n\n      // add question text\n      display_element.querySelector(question_selector).innerHTML +=\n        '<p id=\"survey-question\" class=\"' +\n        plugin_id_name +\n        '-text survey-multi-select\">' +\n        question.prompt +\n        \"</p>\";\n\n      // create option check boxes\n      for (var j = 0; j < question.options.length; j++) {\n        var option_id_name = _join(plugin_id_name, \"option\", question_id, j);\n\n        // add check box container\n        display_element.querySelector(question_selector).innerHTML +=\n          '<div id=\"' + option_id_name + '\" class=\"' + _join(plugin_id_name, \"option\") + '\"></div>';\n\n        // add label and question text\n        var form = document.getElementById(option_id_name);\n        var input_name = _join(plugin_id_name, \"response\", question_id);\n        var input_id = _join(plugin_id_name, \"response\", question_id, j);\n        var label = document.createElement(\"label\");\n        label.setAttribute(\"class\", plugin_id_name + \"-text\");\n        label.innerHTML = question.options[j];\n        label.setAttribute(\"for\", input_id);\n\n        // create checkboxes\n        var input = document.createElement(\"input\");\n        input.setAttribute(\"type\", \"checkbox\");\n        input.setAttribute(\"name\", input_name);\n        input.setAttribute(\"id\", input_id);\n        input.setAttribute(\"value\", question.options[j]);\n        form.appendChild(label);\n        label.insertBefore(input, label.firstChild);\n      }\n    }\n    // add submit button\n    trial_form.innerHTML += '<div class=\"fail-message\"></div>';\n    trial_form.innerHTML +=\n      '<button id=\"' +\n      plugin_id_name +\n      '-next\" class=\"' +\n      plugin_id_name +\n      ' jspsych-btn\">' +\n      trial.button_label +\n      \"</button>\";\n\n    // validation check on the data first for custom validation handling\n    // then submit the form\n    display_element\n      .querySelector(\"#jspsych-survey-multi-select-next\")\n      .addEventListener(\"click\", () => {\n        for (var i = 0; i < trial.questions.length; i++) {\n          if (trial.questions[i].required) {\n            if (\n              display_element.querySelector(\n                \"#jspsych-survey-multi-select-\" + i + \" input:checked\"\n              ) == null\n            ) {\n              display_element\n                .querySelector<HTMLInputElement>(\"#jspsych-survey-multi-select-\" + i + \" input\")\n                .setCustomValidity(trial.required_message);\n            } else {\n              display_element\n                .querySelector<HTMLInputElement>(\"#jspsych-survey-multi-select-\" + i + \" input\")\n                .setCustomValidity(\"\");\n            }\n          }\n        }\n        trial_form.reportValidity();\n      });\n\n    trial_form.addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n      var has_response = [];\n      for (var index = 0; index < trial.questions.length; index++) {\n        var match = display_element.querySelector(\"#jspsych-survey-multi-select-\" + index);\n        var val = [];\n        var inputboxes = match.querySelectorAll<HTMLInputElement>(\"input[type=checkbox]:checked\");\n        for (var j = 0; j < inputboxes.length; j++) {\n          var currentChecked = inputboxes[j];\n          val.push(currentChecked.value);\n        }\n        var id = \"Q\" + index;\n        var obje = {};\n        var name = id;\n        if (match.attributes[\"data-name\"].value !== \"\") {\n          name = match.attributes[\"data-name\"].value;\n        }\n        obje[name] = val;\n        Object.assign(question_data, obje);\n        if (val.length == 0) {\n          has_response.push(false);\n        } else {\n          has_response.push(true);\n        }\n      }\n\n      // save data\n      var trial_data = {\n        rt: response_time,\n        response: question_data,\n        question_order: question_order,\n      };\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      let n_answers;\n      if (q.required) {\n        n_answers = this.jsPsych.randomization.randomInt(1, q.options.length);\n      } else {\n        n_answers = this.jsPsych.randomization.randomInt(0, q.options.length);\n      }\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      const selections = this.jsPsych.randomization.sampleWithoutReplacement(q.options, n_answers);\n      question_data[name] = selections;\n      rt += this.jsPsych.randomization.sampleExGaussian(1500, 400, 1 / 200, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n      question_order: trial.randomize_question_order\n        ? this.jsPsych.randomization.shuffle([...Array(trial.questions.length).keys()])\n        : [...Array(trial.questions.length).keys()],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers: [string, []][] = Object.entries(data.response);\n    for (let i = 0; i < answers.length; i++) {\n      for (const a of answers[i][1]) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\n            `#jspsych-survey-multi-select-response-${i}-${trial.questions[i].options.indexOf(a)}`\n          ),\n          ((data.rt - 1000) / answers.length) * (i + 1)\n        );\n      }\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-multi-select-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyMultiSelectPlugin;\n"],"names":["info","version","ParameterType","SurveyMultiSelectPlugin","jsPsych","display_element","trial","plugin_id_name","plugin_id_selector","_join","args","cssstr","trial_form_id","trial_form","preamble_id_name","question_order","i","question","question_id","question_classes","question_selector","j","option_id_name","form","input_name","input_id","label","input","event","endTime","response_time","startTime","question_data","has_response","index","match","val","inputboxes","currentChecked","id","obje","name","trial_data","simulation_mode","simulation_options","load_callback","rt","q","n_answers","selections","default_data","data","answers","a"],"mappings":"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"}