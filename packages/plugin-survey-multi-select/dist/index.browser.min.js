var jsPsychSurveyMultiSelect = (function (r) {
  "use strict";
  var z = {
    name: "@jspsych/plugin-survey-multi-select",
    version: "2.0.0",
    description: "a jspsych plugin for multiple choice survey questions",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-survey-multi-select",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/survey-multi-select",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const A = {
    name: "survey-multi-select",
    version: z.version,
    parameters: {
      questions: {
        type: r.ParameterType.COMPLEX,
        array: !0,
        nested: {
          prompt: { type: r.ParameterType.HTML_STRING, default: void 0 },
          options: { type: r.ParameterType.STRING, array: !0, default: void 0 },
          horizontal: { type: r.ParameterType.BOOL, default: !1 },
          required: { type: r.ParameterType.BOOL, default: !1 },
          name: { type: r.ParameterType.STRING, default: "" },
        },
      },
      randomize_question_order: { type: r.ParameterType.BOOL, default: !1 },
      preamble: { type: r.ParameterType.HTML_STRING, default: null },
      button_label: { type: r.ParameterType.STRING, default: "Continue" },
      required_message: {
        type: r.ParameterType.STRING,
        default: "You must choose at least one response for this question",
      },
      autocomplete: { type: r.ParameterType.BOOL, default: !1 },
    },
    data: {
      response: {
        type: r.ParameterType.COMPLEX,
        nested: {
          identifier: { type: r.ParameterType.STRING },
          response: {
            type:
              r.ParameterType.STRING |
              r.ParameterType.INT |
              r.ParameterType.FLOAT |
              r.ParameterType.BOOL |
              r.ParameterType.OBJECT,
          },
        },
      },
      rt: { type: r.ParameterType.INT },
      question_order: { type: r.ParameterType.INT, array: !0 },
    },
  };
  class b {
    constructor(e) {
      this.jsPsych = e;
    }
    trial(e, s) {
      var t = "jspsych-survey-multi-select",
        o = "#" + t;
      const a = (...l) => l.join("-");
      var u =
        ".jspsych-survey-multi-select-question { margin-top: 2em; margin-bottom: 2em; text-align: left; }.jspsych-survey-multi-select-text span.required {color: darkred;}.jspsych-survey-multi-select-horizontal .jspsych-survey-multi-select-text {  text-align: center;}.jspsych-survey-multi-select-option { line-height: 2; }.jspsych-survey-multi-select-horizontal .jspsych-survey-multi-select-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}label.jspsych-survey-multi-select-text input[type='checkbox'] {margin-right: 1em;}";
      e.innerHTML = '<style id="jspsych-survey-multi-select-css">' + u + "</style>";
      var i = a(t, "form");
      e.innerHTML += '<form id="' + i + '"></form>';
      var n = e.querySelector("#" + i);
      s.autocomplete || n.setAttribute("autocomplete", "off");
      var f = a(t, "preamble");
      s.preamble !== null &&
        (n.innerHTML += '<div id="' + f + '" class="' + f + '">' + s.preamble + "</div>");
      for (var c = [], p = 0; p < s.questions.length; p++) c.push(p);
      s.randomize_question_order && (c = this.jsPsych.randomization.shuffle(c));
      for (var p = 0; p < s.questions.length; p++) {
        var m = s.questions[c[p]],
          h = c[p],
          j = [a(t, "question")];
        m.horizontal && j.push(a(t, "horizontal")),
          (n.innerHTML +=
            '<div id="' +
            a(t, h) +
            '" data-name="' +
            m.name +
            '" class="' +
            j.join(" ") +
            '"></div>');
        var _ = a(o, h);
        e.querySelector(_).innerHTML +=
          '<p id="survey-question" class="' + t + '-text survey-multi-select">' + m.prompt + "</p>";
        for (var y = 0; y < m.options.length; y++) {
          var x = a(t, "option", h, y);
          e.querySelector(_).innerHTML +=
            '<div id="' + x + '" class="' + a(t, "option") + '"></div>';
          var H = document.getElementById(x),
            w = a(t, "response", h),
            S = a(t, "response", h, y),
            d = document.createElement("label");
          d.setAttribute("class", t + "-text"),
            (d.innerHTML = m.options[y]),
            d.setAttribute("for", S);
          var v = document.createElement("input");
          v.setAttribute("type", "checkbox"),
            v.setAttribute("name", w),
            v.setAttribute("id", S),
            v.setAttribute("value", m.options[y]),
            H.appendChild(d),
            d.insertBefore(v, d.firstChild);
        }
      }
      (n.innerHTML += '<div class="fail-message"></div>'),
        (n.innerHTML +=
          '<button id="' +
          t +
          '-next" class="' +
          t +
          ' jspsych-btn">' +
          s.button_label +
          "</button>"),
        e.querySelector("#jspsych-survey-multi-select-next").addEventListener("click", () => {
          for (var l = 0; l < s.questions.length; l++)
            s.questions[l].required &&
              (e.querySelector("#jspsych-survey-multi-select-" + l + " input:checked") == null
                ? e
                    .querySelector("#jspsych-survey-multi-select-" + l + " input")
                    .setCustomValidity(s.required_message)
                : e
                    .querySelector("#jspsych-survey-multi-select-" + l + " input")
                    .setCustomValidity(""));
          n.reportValidity();
        }),
        n.addEventListener("submit", (l) => {
          l.preventDefault();
          for (
            var E = performance.now(), R = Math.round(E - N), L = {}, I = [], g = 0;
            g < s.questions.length;
            g++
          ) {
            for (
              var T = e.querySelector("#jspsych-survey-multi-select-" + g),
                P = [],
                O = T.querySelectorAll("input[type=checkbox]:checked"),
                q = 0;
              q < O.length;
              q++
            ) {
              var C = O[q];
              P.push(C.value);
            }
            var G = "Q" + g,
              M = {},
              k = G;
            T.attributes["data-name"].value !== "" && (k = T.attributes["data-name"].value),
              (M[k] = P),
              Object.assign(L, M),
              P.length == 0 ? I.push(!1) : I.push(!0);
          }
          var B = { rt: R, response: L, question_order: c };
          this.jsPsych.finishTrial(B);
        });
      var N = performance.now();
    }
    simulate(e, s, t, o) {
      s == "data-only" && (o(), this.simulate_data_only(e, t)),
        s == "visual" && this.simulate_visual(e, t, o);
    }
    create_simulation_data(e, s) {
      const t = {};
      let o = 1e3;
      for (const i of e.questions) {
        let n;
        i.required
          ? (n = this.jsPsych.randomization.randomInt(1, i.options.length))
          : (n = this.jsPsych.randomization.randomInt(0, i.options.length));
        const f = i.name ? i.name : `Q${e.questions.indexOf(i)}`,
          c = this.jsPsych.randomization.sampleWithoutReplacement(i.options, n);
        (t[f] = c), (o += this.jsPsych.randomization.sampleExGaussian(1500, 400, 0.005, !0));
      }
      const a = {
          response: t,
          rt: o,
          question_order: e.randomize_question_order
            ? this.jsPsych.randomization.shuffle([...Array(e.questions.length).keys()])
            : [...Array(e.questions.length).keys()],
        },
        u = this.jsPsych.pluginAPI.mergeSimulationData(a, s);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(e, u), u;
    }
    simulate_data_only(e, s) {
      const t = this.create_simulation_data(e, s);
      this.jsPsych.finishTrial(t);
    }
    simulate_visual(e, s, t) {
      const o = this.create_simulation_data(e, s),
        a = this.jsPsych.getDisplayElement();
      this.trial(a, e), t();
      const u = Object.entries(o.response);
      for (let i = 0; i < u.length; i++)
        for (const n of u[i][1])
          this.jsPsych.pluginAPI.clickTarget(
            a.querySelector(
              `#jspsych-survey-multi-select-response-${i}-${e.questions[i].options.indexOf(n)}`
            ),
            ((o.rt - 1e3) / u.length) * (i + 1)
          );
      this.jsPsych.pluginAPI.clickTarget(
        a.querySelector("#jspsych-survey-multi-select-next"),
        o.rt
      );
    }
  }
  return (b.info = A), b;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
