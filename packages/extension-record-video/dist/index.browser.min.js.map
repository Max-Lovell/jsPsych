{"version":3,"file":"index.browser.min.js","sources":["../../../node_modules/auto-bind/index.js","../src/index.ts"],"sourcesContent":["'use strict';\n\n// Gets all non-builtin properties up the prototype chain\nconst getAllProperties = object => {\n\tconst properties = new Set();\n\n\tdo {\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tproperties.add([object, key]);\n\t\t}\n\t} while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);\n\n\treturn properties;\n};\n\nmodule.exports = (self, {include, exclude} = {}) => {\n\tconst filter = key => {\n\t\tconst match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n\t\tif (include) {\n\t\t\treturn include.some(match);\n\t\t}\n\n\t\tif (exclude) {\n\t\t\treturn !exclude.some(match);\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tfor (const [object, key] of getAllProperties(self.constructor.prototype)) {\n\t\tif (key === 'constructor' || !filter(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst descriptor = Reflect.getOwnPropertyDescriptor(object, key);\n\t\tif (descriptor && typeof descriptor.value === 'function') {\n\t\t\tself[key] = self[key].bind(self);\n\t\t}\n\t}\n\n\treturn self;\n};\n","import autoBind from \"auto-bind\";\nimport { JsPsych, JsPsychExtension, JsPsychExtensionInfo, ParameterType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\n/**\n * https://www.jspsych.org/latest/extensions/record-video/\n */\nclass RecordVideoExtension implements JsPsychExtension {\n  static info: JsPsychExtensionInfo = {\n    name: \"record-video\",\n    version: version,\n    data: {\n      /** [Base 64 encoded](https://developer.mozilla.org/en-US/docs/Glossary/Base64) representation of the video data. */\n      record_video_data: {\n        type: ParameterType.STRING,\n      },\n    },\n  };\n\n  constructor(private jsPsych: JsPsych) {\n    autoBind(this);\n  }\n\n  private recordedChunks = [];\n  private recorder: MediaRecorder = null;\n  private currentTrialData = null;\n  private trialComplete = false;\n  private onUpdateCallback: () => void = null;\n\n  // todo: add option to stream data to server with timeslice?\n  initialize = async () => {};\n\n  on_start = (): void => {\n    this.recorder = this.jsPsych.pluginAPI.getCameraRecorder();\n    this.recordedChunks = [];\n    this.trialComplete = false;\n    this.currentTrialData = {};\n\n    if (!this.recorder) {\n      console.warn(\n        \"The record-video extension is trying to start but the camera is not initialized. Do you need to run the initialize-camera plugin?\"\n      );\n      return;\n    }\n\n    this.recorder.addEventListener(\"dataavailable\", this.handleOnDataAvailable);\n  };\n\n  on_load = () => {\n    this.recorder.start();\n  };\n\n  on_finish = (): Promise<any> => {\n    return new Promise((resolve) => {\n      this.trialComplete = true;\n      this.recorder.stop();\n\n      if (!this.currentTrialData.record_video_data) {\n        this.onUpdateCallback = () => {\n          resolve(this.currentTrialData);\n        };\n      } else {\n        resolve(this.currentTrialData);\n      }\n    });\n  };\n\n  private handleOnDataAvailable(event) {\n    if (event.data.size > 0) {\n      console.log(\"chunks added\");\n      this.recordedChunks.push(event.data);\n      if (this.trialComplete) {\n        this.updateData();\n      }\n    }\n  }\n\n  private updateData() {\n    const data = new Blob(this.recordedChunks, {\n      type: this.recorder.mimeType,\n    });\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => {\n      const base64 = (reader.result as string).split(\",\")[1];\n      this.currentTrialData.record_video_data = base64;\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback();\n      }\n    });\n    reader.readAsDataURL(data);\n  }\n}\n\nexport default RecordVideoExtension;\n"],"names":["getAllProperties","object","properties","key","autoBind","self","include","exclude","filter","match","pattern","descriptor","RecordVideoExtension","jsPsych","__async","resolve","event","data","reader","base64","version","ParameterType"],"mappings":"6JAGA,MAAMA,EAAmBC,GAAU,CAClC,MAAMC,EAAa,IAAI,IAEvB,EACC,WAAWC,KAAO,QAAQ,QAAQF,CAAM,EACvCC,EAAW,IAAI,CAACD,EAAQE,CAAG,CAAC,SAEpBF,EAAS,QAAQ,eAAeA,CAAM,IAAMA,IAAW,OAAO,WAExE,OAAOC,CACR,MAEAE,EAAiB,CAACC,EAAM,CAAC,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAAA,IAAO,CACnD,MAAMC,EAASL,GAAO,CACrB,MAAMM,EAAQC,GAAW,OAAOA,GAAY,SAAWP,IAAQO,EAAUA,EAAQ,KAAKP,CAAG,EAEzF,OAAIG,EACIA,EAAQ,KAAKG,CAAK,EAGtBF,EACI,CAACA,EAAQ,KAAKE,CAAK,EAGpB,EACT,EAEC,SAAW,CAACR,EAAQE,CAAG,IAAKH,EAAiBK,EAAK,YAAY,SAAS,EAAG,CACzE,GAAIF,IAAQ,eAAiB,CAACK,EAAOL,CAAG,EACvC,SAGD,MAAMQ,EAAa,QAAQ,yBAAyBV,EAAQE,CAAG,EAC3DQ,GAAc,OAAOA,EAAW,OAAU,aAC7CN,EAAKF,GAAOE,EAAKF,GAAK,KAAKE,CAAI,EAEhC,CAED,OAAOA,CACR,khCClCA,MAAMO,CAAiD,CAYrD,YAAoBC,EAAkB,CAAlB,KAAA,QAAAA,EAIpB,KAAQ,eAAiB,CAAC,EAC1B,KAAQ,SAA0B,KAClC,KAAQ,iBAAmB,KAC3B,KAAQ,cAAgB,GACxB,KAAQ,iBAA+B,KAGvC,KAAA,WAAa,IAAYC,EAAA,sBAEzB,CAAA,EAAA,KAAA,SAAW,IAAY,CAMrB,GALA,KAAK,SAAW,KAAK,QAAQ,UAAU,kBACvC,EAAA,KAAK,eAAiB,CAAA,EACtB,KAAK,cAAgB,GACrB,KAAK,iBAAmB,CAAA,EAEpB,CAAC,KAAK,SAAU,CAClB,QAAQ,KACN,mIACF,EACA,MACF,CAEA,KAAK,SAAS,iBAAiB,gBAAiB,KAAK,qBAAqB,CAC5E,EAEA,KAAU,QAAA,IAAM,CACd,KAAK,SAAS,OAChB,EAEA,KAAY,UAAA,IACH,IAAI,QAASC,GAAY,CAC9B,KAAK,cAAgB,GACrB,KAAK,SAAS,KAET,EAAA,KAAK,iBAAiB,kBAKzBA,EAAQ,KAAK,gBAAgB,EAJ7B,KAAK,iBAAmB,IAAM,CAC5BA,EAAQ,KAAK,gBAAgB,CAC/B,CAIJ,CAAC,EA5CDX,EAAS,IAAI,CACf,CA8CQ,sBAAsBY,EAAO,CAC/BA,EAAM,KAAK,KAAO,IACpB,QAAQ,IAAI,cAAc,EAC1B,KAAK,eAAe,KAAKA,EAAM,IAAI,EAC/B,KAAK,eACP,KAAK,WAAW,EAGtB,CAEQ,YAAa,CACnB,MAAMC,EAAO,IAAI,KAAK,KAAK,eAAgB,CACzC,KAAM,KAAK,SAAS,QACtB,CAAC,EACKC,EAAS,IAAI,WACnBA,EAAO,iBAAiB,OAAQ,IAAM,CACpC,MAAMC,EAAUD,EAAO,OAAkB,MAAM,GAAG,EAAE,GACpD,KAAK,iBAAiB,kBAAoBC,EACtC,KAAK,kBACP,KAAK,iBAET,CAAA,CAAC,EACDD,EAAO,cAAcD,CAAI,CAC3B,CACF,CApFML,OAAAA,EACG,KAA6B,CAClC,KAAM,eACN,QAASQ,EACT,QAAA,KAAM,CAEJ,kBAAmB,CACjB,KAAMC,EAAAA,cAAc,MACtB,CACF,CACF"}