{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"canvas-button-response\",\n  version: version,\n  parameters: {\n    /**\n     * The function to draw on the canvas. This function automatically takes a canvas element as its only argument,\n     * e.g. `function(c) {...}`  or `function drawStim(c) {...}`, where `c` refers to the canvas element. Note that\n     * the stimulus function will still generally need to set the correct context itself, using a line like\n     * `let ctx = c.getContext(\"2d\")`.\n     */\n    stimulus: {\n      type: ParameterType.FUNCTION,\n      default: undefined,\n    },\n    /** Labels for the buttons. Each different string in the array will generate a different button. */\n    choices: {\n      type: ParameterType.STRING,\n      default: undefined,\n      array: true,\n    },\n    /**\n     * ``(choice: string, choice_index: number)=>`<button class=\"jspsych-btn\">${choice}</button>``; | A\n     * function that generates the HTML for each button in the `choices` array. The function gets the\n     * string and index of the item in the `choices` array and should return valid HTML. If you want\n     * to use different markup for each button, you can do that by using a conditional on either parameter.\n     * The default parameter returns a button element with the text label of the choice.\n     */\n    button_html: {\n      type: ParameterType.FUNCTION,\n      default: function (choice: string, choice_index: number) {\n        return `<button class=\"jspsych-btn\">${choice}</button>`;\n      },\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus.\n     * The intention is that it can be used to provide a reminder about the action the participant is supposed\n     * to take (e.g., what question to answer).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be\n     * set to `hidden` after this time has elapsed. If this is null, then the stimulus will remain visible until\n     * the trial ends.\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds.\n     * If the participant fails to make a response before this timer is reached, the participant's response\n     * will be recorded as null for the trial and the trial will end. If the value of this parameter is null,\n     * the trial will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Setting to `'grid'` will make the container element have the CSS property `display: grid` and enable\n     * the use of `grid_rows` and `grid_columns`. Setting to `'flex'` will make the container element have the\n     * CSS property `display: flex`. You can customize how the buttons are laid out by adding inline CSS in\n     * the `button_html` parameter.\n     */\n    button_layout: {\n      type: ParameterType.STRING,\n      default: \"grid\",\n    },\n    /**\n     * The number of rows in the button grid. Only applicable when `button_layout` is set to `'grid'`.\n     * If null, the number of rows will be determined automatically based on the number of buttons and the number of columns.\n     */\n    grid_rows: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /**\n     * The number of columns in the button grid. Only applicable when `button_layout` is set to `'grid'`.\n     * If null, the number of columns will be determined automatically based on the number of buttons and the number of rows.\n     */\n    grid_columns: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their response\n     * before the cutoff specified by the `trial_duration` parameter). If false, then the trial will continue until\n     * the value for `trial_duration` is reached. You can use this parameter to force the participant to view a\n     * stimulus for a fixed amount of time, even if they respond before the time is complete.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** Array that defines the size of the canvas element in pixels. First value is height, second value is width. */\n    canvas_size: {\n      type: ParameterType.INT,\n      array: true,\n      default: [500, 500],\n    },\n  },\n  data: {\n    /** Indicates which button the participant pressed. The first button in the `choices` array is 0, the second is 1, and so on. */\n    response: {\n      type: ParameterType.INT,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the\n     * stimulus first appears on the screen until the participant's response.\n     */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin can be used to draw a stimulus on a [HTML canvas element](https://www.w3schools.com/html/html5_canvas.asp), and record\n * a button click response and response time. The canvas stimulus can be useful for displaying dynamic, parametrically-defined\n * graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). The stimulus can be\n * displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the\n * participant has failed to respond within a fixed length of time. One or more button choices will be displayed under the canvas,\n * and the button style can be customized using HTML formatting.\n *\n * @author Chris Jungerius (modified from Josh de Leeuw)\n * @see {@link https://www.jspsych.org/latest/plugins/canvas-button-response/ canvas-button-response plugin documentation on jspsych.org}\n */\nclass CanvasButtonResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // Create canvas\n    const stimulusElement = document.createElement(\"div\");\n    stimulusElement.id = \"jspsych-canvas-button-response-stimulus\";\n\n    const canvasElement = document.createElement(\"canvas\");\n    canvasElement.id = \"jspsych-canvas-stimulus\";\n    canvasElement.height = trial.canvas_size[0];\n    canvasElement.width = trial.canvas_size[1];\n    canvasElement.style.display = \"block\";\n    stimulusElement.appendChild(canvasElement);\n\n    display_element.appendChild(stimulusElement);\n\n    // Display buttons\n    const buttonGroupElement = document.createElement(\"div\");\n    buttonGroupElement.id = \"jspsych-canvas-button-response-btngroup\";\n    if (trial.button_layout === \"grid\") {\n      buttonGroupElement.classList.add(\"jspsych-btn-group-grid\");\n      if (trial.grid_rows === null && trial.grid_columns === null) {\n        throw new Error(\n          \"You cannot set `grid_rows` to `null` without providing a value for `grid_columns`.\"\n        );\n      }\n      const n_cols =\n        trial.grid_columns === null\n          ? Math.ceil(trial.choices.length / trial.grid_rows)\n          : trial.grid_columns;\n      const n_rows =\n        trial.grid_rows === null\n          ? Math.ceil(trial.choices.length / trial.grid_columns)\n          : trial.grid_rows;\n      buttonGroupElement.style.gridTemplateColumns = `repeat(${n_cols}, 1fr)`;\n      buttonGroupElement.style.gridTemplateRows = `repeat(${n_rows}, 1fr)`;\n    } else if (trial.button_layout === \"flex\") {\n      buttonGroupElement.classList.add(\"jspsych-btn-group-flex\");\n    }\n\n    for (const [choiceIndex, choice] of trial.choices.entries()) {\n      buttonGroupElement.insertAdjacentHTML(\"beforeend\", trial.button_html(choice, choiceIndex));\n      const buttonElement = buttonGroupElement.lastChild as HTMLElement;\n      buttonElement.dataset.choice = choiceIndex.toString();\n      buttonElement.addEventListener(\"click\", () => {\n        after_response(choiceIndex);\n      });\n    }\n\n    display_element.appendChild(buttonGroupElement);\n\n    // Show prompt if there is one\n    if (trial.prompt !== null) {\n      display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n    }\n\n    //draw\n    trial.stimulus(canvasElement);\n\n    // start time\n    var start_time = performance.now();\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        response: response.button,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      stimulusElement.classList.add(\"responded\");\n\n      // disable all the buttons after a response\n      for (const button of buttonGroupElement.children) {\n        button.setAttribute(\"disabled\", \"disabled\");\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        stimulusElement.style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.randomization.randomInt(0, trial.choices.length - 1),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(\n          `#jspsych-canvas-button-response-btngroup [data-choice=\"${data.response}\"]`\n        ),\n        data.rt\n      );\n    }\n  }\n}\n\nexport default CanvasButtonResponsePlugin;\n"],"names":["info","version","ParameterType","choice","choice_index","CanvasButtonResponsePlugin","jsPsych","display_element","trial","stimulusElement","canvasElement","buttonGroupElement","n_cols","n_rows","choiceIndex","buttonElement","after_response","start_time","response","end_trial","trial_data","end_time","rt","button","simulation_mode","simulation_options","load_callback","default_data","data"],"mappings":"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"}