var jsPsychCanvasButtonResponse = (function (a) {
  "use strict";
  var h = {
    name: "@jspsych/plugin-canvas-button-response",
    version: "2.0.0",
    description: "jsPsych plugin for displaying a canvas stimulus and getting a button response",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-canvas-button-response",
    },
    author: "Chris Jungerius, Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/canvas-button-response",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const m = {
    name: "canvas-button-response",
    version: h.version,
    parameters: {
      stimulus: { type: a.ParameterType.FUNCTION, default: void 0 },
      choices: { type: a.ParameterType.STRING, default: void 0, array: !0 },
      button_html: {
        type: a.ParameterType.FUNCTION,
        default: function (d, e) {
          return `<button class="jspsych-btn">${d}</button>`;
        },
      },
      prompt: { type: a.ParameterType.HTML_STRING, default: null },
      stimulus_duration: { type: a.ParameterType.INT, default: null },
      trial_duration: { type: a.ParameterType.INT, default: null },
      button_layout: { type: a.ParameterType.STRING, default: "grid" },
      grid_rows: { type: a.ParameterType.INT, default: 1 },
      grid_columns: { type: a.ParameterType.INT, default: null },
      response_ends_trial: { type: a.ParameterType.BOOL, default: !0 },
      canvas_size: { type: a.ParameterType.INT, array: !0, default: [500, 500] },
    },
    data: { response: { type: a.ParameterType.INT }, rt: { type: a.ParameterType.INT } },
  };
  class c {
    constructor(e) {
      this.jsPsych = e;
    }
    trial(e, t) {
      const n = document.createElement("div");
      n.id = "jspsych-canvas-button-response-stimulus";
      const s = document.createElement("canvas");
      (s.id = "jspsych-canvas-stimulus"),
        (s.height = t.canvas_size[0]),
        (s.width = t.canvas_size[1]),
        (s.style.display = "block"),
        n.appendChild(s),
        e.appendChild(n);
      const i = document.createElement("div");
      if (((i.id = "jspsych-canvas-button-response-btngroup"), t.button_layout === "grid")) {
        if (
          (i.classList.add("jspsych-btn-group-grid"),
          t.grid_rows === null && t.grid_columns === null)
        )
          throw new Error(
            "You cannot set `grid_rows` to `null` without providing a value for `grid_columns`."
          );
        const r =
            t.grid_columns === null ? Math.ceil(t.choices.length / t.grid_rows) : t.grid_columns,
          o = t.grid_rows === null ? Math.ceil(t.choices.length / t.grid_columns) : t.grid_rows;
        (i.style.gridTemplateColumns = `repeat(${r}, 1fr)`),
          (i.style.gridTemplateRows = `repeat(${o}, 1fr)`);
      } else t.button_layout === "flex" && i.classList.add("jspsych-btn-group-flex");
      for (const [r, o] of t.choices.entries()) {
        i.insertAdjacentHTML("beforeend", t.button_html(o, r));
        const u = i.lastChild;
        (u.dataset.choice = r.toString()),
          u.addEventListener("click", () => {
            g(r);
          });
      }
      e.appendChild(i),
        t.prompt !== null && e.insertAdjacentHTML("beforeend", t.prompt),
        t.stimulus(s);
      var y = performance.now(),
        l = { rt: null, button: null };
      const p = () => {
        var r = { rt: l.rt, response: l.button };
        this.jsPsych.finishTrial(r);
      };
      function g(r) {
        var o = performance.now(),
          u = Math.round(o - y);
        (l.button = parseInt(r)), (l.rt = u), n.classList.add("responded");
        for (const _ of i.children) _.setAttribute("disabled", "disabled");
        t.response_ends_trial && p();
      }
      t.stimulus_duration !== null &&
        this.jsPsych.pluginAPI.setTimeout(() => {
          n.style.visibility = "hidden";
        }, t.stimulus_duration),
        t.trial_duration !== null &&
          this.jsPsych.pluginAPI.setTimeout(() => {
            p();
          }, t.trial_duration);
    }
    simulate(e, t, n, s) {
      t == "data-only" && (s(), this.simulate_data_only(e, n)),
        t == "visual" && this.simulate_visual(e, n, s);
    }
    create_simulation_data(e, t) {
      const n = {
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0),
          response: this.jsPsych.randomization.randomInt(0, e.choices.length - 1),
        },
        s = this.jsPsych.pluginAPI.mergeSimulationData(n, t);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(e, s), s;
    }
    simulate_data_only(e, t) {
      const n = this.create_simulation_data(e, t);
      this.jsPsych.finishTrial(n);
    }
    simulate_visual(e, t, n) {
      const s = this.create_simulation_data(e, t),
        i = this.jsPsych.getDisplayElement();
      this.trial(i, e),
        n(),
        s.rt !== null &&
          this.jsPsych.pluginAPI.clickTarget(
            i.querySelector(
              `#jspsych-canvas-button-response-btngroup [data-choice="${s.response}"]`
            ),
            s.rt
          );
    }
  }
  return (c.info = m), c;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
