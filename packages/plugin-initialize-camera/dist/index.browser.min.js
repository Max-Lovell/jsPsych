var jsPsychInitializeCamera = (function (r) {
  "use strict";
  var p = {
      name: "@jspsych/plugin-initialize-camera",
      version: "2.0.0",
      description: "jsPsych plugin for getting permission to initialize the user's camera",
      type: "module",
      main: "dist/index.cjs",
      exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
      typings: "dist/index.d.ts",
      unpkg: "dist/index.browser.min.js",
      files: ["src", "dist"],
      source: "src/index.ts",
      scripts: {
        test: "jest --passWithNoTests",
        "test:watch": "npm test -- --watch",
        tsc: "tsc",
        build: "rollup --config",
        "build:watch": "npm run build -- --watch",
      },
      repository: {
        type: "git",
        url: "git+https://github.com/jspsych/jsPsych.git",
        directory: "packages/plugin-initialize-camera",
      },
      author: "Josh de Leeuw",
      license: "MIT",
      bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
      homepage: "https://www.jspsych.org/latest/plugins/initialize-camera",
      peerDependencies: { jspsych: ">=7.2.0" },
      devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
    },
    o = (h, i, e) =>
      new Promise((s, t) => {
        var a = (n) => {
            try {
              d(e.next(n));
            } catch (l) {
              t(l);
            }
          },
          c = (n) => {
            try {
              d(e.throw(n));
            } catch (l) {
              t(l);
            }
          },
          d = (n) => (n.done ? s(n.value) : Promise.resolve(n.value).then(a, c));
        d((e = e.apply(h, i)).next());
      });
  const m = {
    name: "initialize-camera",
    version: p.version,
    parameters: {
      device_select_message: {
        type: r.ParameterType.HTML_STRING,
        default: "<p>Please select the camera you would like to use.</p>",
      },
      button_label: { type: r.ParameterType.STRING, default: "Use this camera" },
      include_audio: { type: r.ParameterType.BOOL, default: !1 },
      width: { type: r.ParameterType.INT, default: null },
      height: { type: r.ParameterType.INT, default: null },
      mime_type: { type: r.ParameterType.STRING, default: null },
    },
    data: { device_id: { type: r.ParameterType.STRING } },
  };
  class u {
    constructor(i) {
      this.jsPsych = i;
    }
    trial(i, e) {
      this.run_trial(i, e).then((s) => {
        this.jsPsych.finishTrial({ device_id: s });
      });
    }
    run_trial(i, e) {
      return o(this, null, function* () {
        yield this.askForPermission(e),
          this.showCameraSelection(i, e),
          this.updateDeviceList(i),
          (navigator.mediaDevices.ondevicechange = (d) => {
            this.updateDeviceList(i);
          });
        const s = yield this.waitForSelection(i),
          t = { video: { deviceId: s } };
        e.width && (t.video.width = e.width),
          e.height && (t.video.height = e.height),
          e.include_audio && (t.audio = !0);
        const a = yield navigator.mediaDevices.getUserMedia(t),
          c = {};
        return (
          e.mime_type && (c.mimeType = e.mime_type),
          this.jsPsych.pluginAPI.initializeCameraRecorder(a, c),
          s
        );
      });
    }
    askForPermission(i) {
      return o(this, null, function* () {
        return yield navigator.mediaDevices.getUserMedia({ audio: i.include_audio, video: !0 });
      });
    }
    showCameraSelection(i, e) {
      let s = `
      ${e.device_select_message}
      <select name="camera" id="which-camera" style="font-size:14px; font-family: 'Open Sans', 'Arial', sans-serif; padding: 4px;">
      </select>
      <p><button class="jspsych-btn" id="btn-select-camera">${e.button_label}</button></p>`;
      i.innerHTML = s;
    }
    waitForSelection(i) {
      return new Promise((e) => {
        i.querySelector("#btn-select-camera").addEventListener("click", () => {
          const s = i.querySelector("#which-camera").value;
          e(s);
        });
      });
    }
    updateDeviceList(i) {
      navigator.mediaDevices.enumerateDevices().then((e) => {
        const s = e
          .filter(
            (t) =>
              t.kind === "videoinput" && t.deviceId !== "default" && t.deviceId !== "communications"
          )
          .filter((t, a, c) => c.findIndex((d) => d.groupId == t.groupId) == a);
        (i.querySelector("#which-camera").innerHTML = ""),
          s.forEach((t) => {
            let a = document.createElement("option");
            (a.value = t.deviceId),
              (a.innerHTML = t.label),
              i.querySelector("#which-camera").appendChild(a);
          });
      });
    }
  }
  return (u.info = m), u;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
