{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"image-slider-response\",\n  version: version,\n  parameters: {\n    /** The path to the image file to be displayed. */\n    stimulus: {\n      type: ParameterType.IMAGE,\n      default: undefined,\n    },\n    /** Set the height of the image in pixels. If left null (no value specified), then the image will display at its natural height. */\n    stimulus_height: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Set the width of the image in pixels. If left null (no value specified), then the image will display at its natural width. */\n    stimulus_width: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If setting *only* the width or *only* the height and this parameter is true, then the other dimension will be scaled\n     * to maintain the image's aspect ratio. */\n    maintain_aspect_ratio: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** Sets the minimum value of the slider. */\n    min: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /** Sets the maximum value of the slider. */\n    max: {\n      type: ParameterType.INT,\n      default: 100,\n    },\n    /** Sets the starting value of the slider. */\n    slider_start: {\n      type: ParameterType.INT,\n      default: 50,\n    },\n    /** Sets the step of the slider. */\n    step: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /** abels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider.\n     * Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will\n     * be at 33% and 67% of the slider width. */\n    labels: {\n      type: ParameterType.STRING,\n      default: [],\n      array: true,\n    },\n    /** Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. */\n    slider_width: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Label of the button to advance/submit. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n      array: false,\n    },\n    /** If true, the participant must move the slider before clicking the continue button. */\n    require_movement: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be\n     * used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the participant\n     * makes a response. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the participant\n     * fails to make a response before this timer is reached, the participant's response will be recorded as null for the trial\n     * and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their response\n     * before the cutoff specified by the `trial_duration` parameter). If false, then the trial will continue until the\n     * value for `trial_duration` is reached. You can set this parameter to `false` to force the participant to view a\n     * stimulus for a fixed amount of time, even if they respond before the time is complete. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * If true, the image will be drawn onto a canvas element. This prevents a blank screen (white flash) between\n     * consecutive image trials in some browsers, like Firefox and Edge.\n     * If false, the image will be shown via an img element, as in previous versions of jsPsych. If the stimulus is\n     * an **animated gif**, you must set this parameter to false, because the canvas rendering method will only present static images.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** The path of the image that was displayed. */\n    stimulus: {\n      type: ParameterType.STRING,\n    },\n    /** The numeric value of the slider. */\n    response: {\n      type: ParameterType.INT,\n    },\n    /** The time in milliseconds for the participant to make a response. The time is measured from when the stimulus\n     * first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The starting value of the slider. */\n    slider_start: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays and image and allows the participant to respond by dragging a slider.\n *\n * Image files can be automatically preloaded by jsPsych using the [`preload` plugin](preload.md). However, if you are\n * using timeline variables or another dynamic method to specify the image stimulus, you will need\n * to [manually preload](../overview/media-preloading.md#manual-preloading) the images.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/image-slider-response/ image-slider-response plugin documentation on jspsych.org}\n */\nclass ImageSliderResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var height, width;\n    var html;\n    // half of the thumb width value from jspsych.css, used to adjust the label positions\n    var half_thumb_width = 7.5;\n\n    if (trial.render_on_canvas) {\n      var image_drawn = false;\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      // create wrapper div, canvas element and image\n      var content_wrapper = document.createElement(\"div\");\n      content_wrapper.id = \"jspsych-image-slider-response-wrapper\";\n      content_wrapper.style.margin = \"100px 0px\";\n      var canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-image-slider-response-stimulus\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      var ctx = canvas.getContext(\"2d\");\n      var img = new Image();\n      img.onload = () => {\n        // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n        if (!image_drawn) {\n          getHeightWidth(); // only possible to get width/height after image loads\n          ctx.drawImage(img, 0, 0, width, height);\n        }\n      };\n      img.src = trial.stimulus;\n      // get/set image height and width - this can only be done after image loads because uses image's naturalWidth/naturalHeight properties\n      const getHeightWidth = () => {\n        if (trial.stimulus_height !== null) {\n          height = trial.stimulus_height;\n          if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n            width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n          }\n        } else {\n          height = img.naturalHeight;\n        }\n        if (trial.stimulus_width !== null) {\n          width = trial.stimulus_width;\n          if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n            height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n          }\n        } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n          // if stimulus width is null, only use the image's natural width if the width value wasn't set\n          // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n          width = img.naturalWidth;\n        }\n        canvas.height = height;\n        canvas.width = width;\n      };\n      getHeightWidth(); // call now, in case image loads immediately (is cached)\n      // create container with slider and labels\n      var slider_container = document.createElement(\"div\");\n      slider_container.classList.add(\"jspsych-image-slider-response-container\");\n      slider_container.style.position = \"relative\";\n      slider_container.style.margin = \"0 auto 3em auto\";\n      if (trial.slider_width !== null) {\n        slider_container.style.width = trial.slider_width.toString() + \"px\";\n      }\n      // create html string with slider and labels, and add to slider container\n      html =\n        '<input type=\"range\" class=\"jspsych-slider\" value=\"' +\n        trial.slider_start +\n        '\" min=\"' +\n        trial.min +\n        '\" max=\"' +\n        trial.max +\n        '\" step=\"' +\n        trial.step +\n        '\" id=\"jspsych-image-slider-response-response\"></input>';\n      html += \"<div>\";\n      for (var j = 0; j < trial.labels.length; j++) {\n        var label_width_perc = 100 / (trial.labels.length - 1);\n        var percent_of_range = j * (100 / (trial.labels.length - 1));\n        var percent_dist_from_center = ((percent_of_range - 50) / 50) * 100;\n        var offset = (percent_dist_from_center * half_thumb_width) / 100;\n        html +=\n          '<div style=\"border: 1px solid transparent; display: inline-block; position: absolute; ' +\n          \"left:calc(\" +\n          percent_of_range +\n          \"% - (\" +\n          label_width_perc +\n          \"% / 2) - \" +\n          offset +\n          \"px); text-align: center; width: \" +\n          label_width_perc +\n          '%;\">';\n        html += '<span style=\"text-align: center; font-size: 80%;\">' + trial.labels[j] + \"</span>\";\n        html += \"</div>\";\n      }\n      html += \"</div>\";\n      slider_container.innerHTML = html;\n      // add canvas and slider to content wrapper div\n      content_wrapper.insertBefore(canvas, content_wrapper.firstElementChild);\n      content_wrapper.insertBefore(slider_container, canvas.nextElementSibling);\n      // add content wrapper div to screen and draw image on canvas\n      display_element.insertBefore(content_wrapper, null);\n      if (img.complete && Number.isFinite(width) && Number.isFinite(height)) {\n        // if image has loaded and width/height have been set, then draw it now\n        // (don't rely on img onload function to draw image when image is in the cache, because that causes a delay in the image presentation)\n        ctx.drawImage(img, 0, 0, width, height);\n        image_drawn = true;\n      }\n      // add prompt if there is one\n      if (trial.prompt !== null) {\n        display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n      }\n      // add submit button\n      var submit_btn = document.createElement(\"button\") as HTMLButtonElement;\n      submit_btn.id = \"jspsych-image-slider-response-next\";\n      submit_btn.classList.add(\"jspsych-btn\");\n      submit_btn.disabled = trial.require_movement ? true : false;\n      submit_btn.innerHTML = trial.button_label;\n      display_element.insertBefore(submit_btn, display_element.nextElementSibling);\n    } else {\n      html = '<div id=\"jspsych-image-slider-response-wrapper\" style=\"margin: 100px 0px;\">';\n      html += '<div id=\"jspsych-image-slider-response-stimulus\">';\n      html += '<img src=\"' + trial.stimulus + '\" style=\"';\n      if (trial.stimulus_height !== null) {\n        html += \"height:\" + trial.stimulus_height + \"px; \";\n        if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n          html += \"width: auto; \";\n        }\n      }\n      if (trial.stimulus_width !== null) {\n        html += \"width:\" + trial.stimulus_width + \"px; \";\n        if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n          html += \"height: auto; \";\n        }\n      }\n      html += '\"></img>';\n      html += \"</div>\";\n      html +=\n        '<div class=\"jspsych-image-slider-response-container\" style=\"position:relative; margin: 0 auto 3em auto; width:';\n      if (trial.slider_width !== null) {\n        html += trial.slider_width + \"px;\";\n      } else {\n        html += \"auto;\";\n      }\n      html += '\">';\n      html +=\n        '<input type=\"range\" class=\"jspsych-slider\" value=\"' +\n        trial.slider_start +\n        '\" min=\"' +\n        trial.min +\n        '\" max=\"' +\n        trial.max +\n        '\" step=\"' +\n        trial.step +\n        '\" id=\"jspsych-image-slider-response-response\"></input>';\n      html += \"<div>\";\n      for (var j = 0; j < trial.labels.length; j++) {\n        var label_width_perc = 100 / (trial.labels.length - 1);\n        var percent_of_range = j * (100 / (trial.labels.length - 1));\n        var percent_dist_from_center = ((percent_of_range - 50) / 50) * 100;\n        var offset = (percent_dist_from_center * half_thumb_width) / 100;\n        html +=\n          '<div style=\"border: 1px solid transparent; display: inline-block; position: absolute; ' +\n          \"left:calc(\" +\n          percent_of_range +\n          \"% - (\" +\n          label_width_perc +\n          \"% / 2) - \" +\n          offset +\n          \"px); text-align: center; width: \" +\n          label_width_perc +\n          '%;\">';\n        html += '<span style=\"text-align: center; font-size: 80%;\">' + trial.labels[j] + \"</span>\";\n        html += \"</div>\";\n      }\n      html += \"</div>\";\n      html += \"</div>\";\n      html += \"</div>\";\n\n      if (trial.prompt !== null) {\n        html += trial.prompt;\n      }\n\n      // add submit button\n      html +=\n        '<button id=\"jspsych-image-slider-response-next\" class=\"jspsych-btn\" ' +\n        (trial.require_movement ? \"disabled\" : \"\") +\n        \">\" +\n        trial.button_label +\n        \"</button>\";\n\n      display_element.innerHTML = html;\n\n      // set image dimensions after image has loaded (so that we have access to naturalHeight/naturalWidth)\n      var img = display_element.querySelector(\"img\") as HTMLImageElement;\n      if (trial.stimulus_height !== null) {\n        height = trial.stimulus_height;\n        if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n          width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n        }\n      } else {\n        height = img.naturalHeight;\n      }\n      if (trial.stimulus_width !== null) {\n        width = trial.stimulus_width;\n        if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n          height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n        }\n      } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n        // if stimulus width is null, only use the image's natural width if the width value wasn't set\n        // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n        width = img.naturalWidth;\n      }\n      img.style.height = height.toString() + \"px\";\n      img.style.width = width.toString() + \"px\";\n    }\n\n    var response = {\n      rt: null,\n      response: null,\n    };\n\n    if (trial.require_movement) {\n      const enable_button = () => {\n        display_element.querySelector<HTMLInputElement>(\n          \"#jspsych-image-slider-response-next\"\n        ).disabled = false;\n      };\n\n      display_element\n        .querySelector(\"#jspsych-image-slider-response-response\")\n        .addEventListener(\"mousedown\", enable_button);\n\n      display_element\n        .querySelector(\"#jspsych-image-slider-response-response\")\n        .addEventListener(\"touchstart\", enable_button);\n\n      display_element\n        .querySelector(\"#jspsych-image-slider-response-response\")\n        .addEventListener(\"change\", enable_button);\n    }\n\n    const end_trial = () => {\n      // save data\n      var trialdata = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        slider_start: trial.slider_start,\n        response: response.response,\n      };\n\n      // next trial\n      this.jsPsych.finishTrial(trialdata);\n    };\n\n    display_element\n      .querySelector(\"#jspsych-image-slider-response-next\")\n      .addEventListener(\"click\", () => {\n        // measure response time\n        var endTime = performance.now();\n        response.rt = Math.round(endTime - startTime);\n        response.response = display_element.querySelector<HTMLInputElement>(\n          \"#jspsych-image-slider-response-response\"\n        ).valueAsNumber;\n\n        if (trial.response_ends_trial) {\n          end_trial();\n        } else {\n          display_element.querySelector<HTMLButtonElement>(\n            \"#jspsych-image-slider-response-next\"\n          ).disabled = true;\n        }\n      });\n\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-image-slider-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    }\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      slider_start: trial.slider_start,\n      response: this.jsPsych.randomization.randomInt(trial.min, trial.max),\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      const el = display_element.querySelector<HTMLInputElement>(\"input[type='range']\");\n\n      setTimeout(() => {\n        this.jsPsych.pluginAPI.clickTarget(el);\n        el.valueAsNumber = data.response;\n      }, data.rt / 2);\n\n      this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(\"button\"), data.rt);\n    }\n  }\n}\n\nexport default ImageSliderResponsePlugin;\n"],"names":["info","version","ParameterType","ImageSliderResponsePlugin","jsPsych","display_element","trial","height","width","html","half_thumb_width","image_drawn","content_wrapper","canvas","ctx","img","getHeightWidth","slider_container","j","label_width_perc","percent_of_range","percent_dist_from_center","offset","submit_btn","response","enable_button","end_trial","trialdata","endTime","startTime","simulation_mode","simulation_options","load_callback","default_data","data","el"],"mappings":"45BAIA,MAAMA,EAAc,CAClB,KAAM,wBACN,QAASC,EAAAA,QACT,WAAY,CAEV,SAAU,CACR,KAAMC,EAAAA,cAAc,MACpB,QAAS,MACX,EAEA,gBAAiB,CACf,KAAMA,EAAAA,cAAc,IACpB,QAAS,IACX,EAEA,eAAgB,CACd,KAAMA,EAAc,cAAA,IACpB,QAAS,IACX,EAGA,sBAAuB,CACrB,KAAMA,EAAAA,cAAc,KACpB,QAAS,EACX,EAEA,IAAK,CACH,KAAMA,EAAAA,cAAc,IACpB,QAAS,CACX,EAEA,IAAK,CACH,KAAMA,EAAc,cAAA,IACpB,QAAS,GACX,EAEA,aAAc,CACZ,KAAMA,EAAAA,cAAc,IACpB,QAAS,EACX,EAEA,KAAM,CACJ,KAAMA,EAAAA,cAAc,IACpB,QAAS,CACX,EAIA,OAAQ,CACN,KAAMA,gBAAc,OACpB,QAAS,CAAA,EACT,MAAO,EACT,EAEA,aAAc,CACZ,KAAMA,EAAAA,cAAc,IACpB,QAAS,IACX,EAEA,aAAc,CACZ,KAAMA,EAAAA,cAAc,OACpB,QAAS,WACT,MAAO,EACT,EAEA,iBAAkB,CAChB,KAAMA,EAAAA,cAAc,KACpB,QAAS,EACX,EAGA,OAAQ,CACN,KAAMA,EAAAA,cAAc,YACpB,QAAS,IACX,EAGA,kBAAmB,CACjB,KAAMA,EAAAA,cAAc,IACpB,QAAS,IACX,EAIA,eAAgB,CACd,KAAMA,EAAAA,cAAc,IACpB,QAAS,IACX,EAKA,oBAAqB,CACnB,KAAMA,EAAc,cAAA,KACpB,QAAS,EACX,EAOA,iBAAkB,CAChB,KAAMA,EAAc,cAAA,KACpB,QAAS,EACX,CACF,EACA,KAAM,CAEJ,SAAU,CACR,KAAMA,EAAc,cAAA,MACtB,EAEA,SAAU,CACR,KAAMA,EAAAA,cAAc,GACtB,EAGA,GAAI,CACF,KAAMA,EAAAA,cAAc,GACtB,EAEA,aAAc,CACZ,KAAMA,EAAc,cAAA,GACtB,CACF,CACF,EAcA,MAAMC,CAAyD,CAG7D,YAAoBC,EAAkB,CAAlB,KAAA,QAAAA,CAAmB,CAEvC,MAAMC,EAA8BC,EAAwB,CAC1D,IAAIC,EAAQC,EACRC,EAEAC,EAAmB,IAEvB,GAAIJ,EAAM,iBAAkB,CAC1B,IAAIK,EAAc,GAElB,GAAIN,EAAgB,cAAc,EAEhC,KAAOA,EAAgB,YACrBA,EAAgB,YAAYA,EAAgB,UAAU,EAI1D,IAAIO,EAAkB,SAAS,cAAc,KAAK,EAClDA,EAAgB,GAAK,wCACrBA,EAAgB,MAAM,OAAS,YAC/B,IAAIC,EAAS,SAAS,cAAc,QAAQ,EAC5CA,EAAO,GAAK,yCACZA,EAAO,MAAM,OAAS,IACtBA,EAAO,MAAM,QAAU,IACvB,IAAIC,EAAMD,EAAO,WAAW,IAAI,EAC5BE,EAAM,IAAI,MACdA,EAAI,OAAS,IAAM,CAEZJ,IACHK,EAAe,EACfF,EAAI,UAAUC,EAAK,EAAG,EAAGP,EAAOD,CAAM,EAE1C,EACAQ,EAAI,IAAMT,EAAM,SAEhB,MAAMU,EAAiB,IAAM,CACvBV,EAAM,kBAAoB,MAC5BC,EAASD,EAAM,gBACXA,EAAM,gBAAkB,MAAQA,EAAM,wBACxCE,EAAQO,EAAI,cAAgBT,EAAM,gBAAkBS,EAAI,iBAG1DR,EAASQ,EAAI,cAEXT,EAAM,iBAAmB,MAC3BE,EAAQF,EAAM,eACVA,EAAM,iBAAmB,MAAQA,EAAM,wBACzCC,EAASQ,EAAI,eAAiBT,EAAM,eAAiBS,EAAI,gBAEhDT,EAAM,kBAAoB,MAAQA,EAAM,wBAGnDE,EAAQO,EAAI,cAEdF,EAAO,OAASN,EAChBM,EAAO,MAAQL,CACjB,EACAQ,IAEA,IAAIC,EAAmB,SAAS,cAAc,KAAK,EACnDA,EAAiB,UAAU,IAAI,yCAAyC,EACxEA,EAAiB,MAAM,SAAW,WAClCA,EAAiB,MAAM,OAAS,kBAC5BX,EAAM,eAAiB,OACzBW,EAAiB,MAAM,MAAQX,EAAM,aAAa,SAAa,EAAA,MAGjEG,EACE,qDACAH,EAAM,aACN,UACAA,EAAM,IACN,UACAA,EAAM,IACN,WACAA,EAAM,KACN,yDACFG,GAAQ,QACR,QAASS,EAAI,EAAGA,EAAIZ,EAAM,OAAO,OAAQY,IAAK,CAC5C,IAAIC,EAAmB,KAAOb,EAAM,OAAO,OAAS,GAChDc,EAAmBF,GAAK,KAAOZ,EAAM,OAAO,OAAS,IACrDe,GAA6BD,EAAmB,IAAM,GAAM,IAC5DE,EAAUD,EAA2BX,EAAoB,IAC7DD,GACE,mGAEAW,EACA,QACAD,EACA,YACAG,EACA,mCACAH,EACA,OACFV,GAAQ,qDAAuDH,EAAM,OAAOY,GAAK,UACjFT,GAAQ,QACV,CACAA,GAAQ,SACRQ,EAAiB,UAAYR,EAE7BG,EAAgB,aAAaC,EAAQD,EAAgB,iBAAiB,EACtEA,EAAgB,aAAaK,EAAkBJ,EAAO,kBAAkB,EAExER,EAAgB,aAAaO,EAAiB,IAAI,EAC9CG,EAAI,UAAY,OAAO,SAASP,CAAK,GAAK,OAAO,SAASD,CAAM,IAGlEO,EAAI,UAAUC,EAAK,EAAG,EAAGP,EAAOD,CAAM,EACtCI,EAAc,IAGZL,EAAM,SAAW,MACnBD,EAAgB,mBAAmB,YAAaC,EAAM,MAAM,EAG9D,IAAIiB,EAAa,SAAS,cAAc,QAAQ,EAChDA,EAAW,GAAK,qCAChBA,EAAW,UAAU,IAAI,aAAa,EACtCA,EAAW,SAAW,EAAAjB,EAAM,iBAC5BiB,EAAW,UAAYjB,EAAM,aAC7BD,EAAgB,aAAakB,EAAYlB,EAAgB,kBAAkB,CAC7E,KAAO,CACLI,EAAO,8EACPA,GAAQ,oDACRA,GAAQ,aAAeH,EAAM,SAAW,YACpCA,EAAM,kBAAoB,OAC5BG,GAAQ,UAAYH,EAAM,gBAAkB,OACxCA,EAAM,gBAAkB,MAAQA,EAAM,wBACxCG,GAAQ,kBAGRH,EAAM,iBAAmB,OAC3BG,GAAQ,SAAWH,EAAM,eAAiB,OACtCA,EAAM,iBAAmB,MAAQA,EAAM,wBACzCG,GAAQ,mBAGZA,GAAQ,WACRA,GAAQ,SACRA,GACE,iHACEH,EAAM,eAAiB,KACzBG,GAAQH,EAAM,aAAe,MAE7BG,GAAQ,QAEVA,GAAQ,KACRA,GACE,qDACAH,EAAM,aACN,UACAA,EAAM,IACN,UACAA,EAAM,IACN,WACAA,EAAM,KACN,yDACFG,GAAQ,QACR,QAASS,EAAI,EAAGA,EAAIZ,EAAM,OAAO,OAAQY,IAAK,CAC5C,IAAIC,EAAmB,KAAOb,EAAM,OAAO,OAAS,GAChDc,EAAmBF,GAAK,KAAOZ,EAAM,OAAO,OAAS,IACrDe,GAA6BD,EAAmB,IAAM,GAAM,IAC5DE,EAAUD,EAA2BX,EAAoB,IAC7DD,GACE,mGAEAW,EACA,QACAD,EACA,YACAG,EACA,mCACAH,EACA,OACFV,GAAQ,qDAAuDH,EAAM,OAAOY,GAAK,UACjFT,GAAQ,QACV,CACAA,GAAQ,SACRA,GAAQ,SACRA,GAAQ,SAEJH,EAAM,SAAW,OACnBG,GAAQH,EAAM,QAIhBG,GACE,wEACCH,EAAM,iBAAmB,WAAa,IACvC,IACAA,EAAM,aACN,YAEFD,EAAgB,UAAYI,EAG5B,IAAIM,EAAMV,EAAgB,cAAc,KAAK,EACzCC,EAAM,kBAAoB,MAC5BC,EAASD,EAAM,gBACXA,EAAM,gBAAkB,MAAQA,EAAM,wBACxCE,EAAQO,EAAI,cAAgBT,EAAM,gBAAkBS,EAAI,iBAG1DR,EAASQ,EAAI,cAEXT,EAAM,iBAAmB,MAC3BE,EAAQF,EAAM,eACVA,EAAM,iBAAmB,MAAQA,EAAM,wBACzCC,EAASQ,EAAI,eAAiBT,EAAM,eAAiBS,EAAI,gBAEhDT,EAAM,kBAAoB,MAAQA,EAAM,wBAGnDE,EAAQO,EAAI,cAEdA,EAAI,MAAM,OAASR,EAAO,WAAa,KACvCQ,EAAI,MAAM,MAAQP,EAAM,SAAa,EAAA,IACvC,CAEA,IAAIgB,EAAW,CACb,GAAI,KACJ,SAAU,IACZ,EAEA,GAAIlB,EAAM,iBAAkB,CAC1B,MAAMmB,EAAgB,IAAM,CAC1BpB,EAAgB,cACd,qCACF,EAAE,SAAW,EACf,EAEAA,EACG,cAAc,yCAAyC,EACvD,iBAAiB,YAAaoB,CAAa,EAE9CpB,EACG,cAAc,yCAAyC,EACvD,iBAAiB,aAAcoB,CAAa,EAE/CpB,EACG,cAAc,yCAAyC,EACvD,iBAAiB,SAAUoB,CAAa,CAC7C,CAEA,MAAMC,EAAY,IAAM,CAEtB,IAAIC,EAAY,CACd,GAAIH,EAAS,GACb,SAAUlB,EAAM,SAChB,aAAcA,EAAM,aACpB,SAAUkB,EAAS,QACrB,EAGA,KAAK,QAAQ,YAAYG,CAAS,CACpC,EAEAtB,EACG,cAAc,qCAAqC,EACnD,iBAAiB,QAAS,IAAM,CAE/B,IAAIuB,EAAU,YAAY,IAAA,EAC1BJ,EAAS,GAAK,KAAK,MAAMI,EAAUC,CAAS,EAC5CL,EAAS,SAAWnB,EAAgB,cAClC,yCACF,EAAE,cAEEC,EAAM,oBACRoB,EAAAA,EAEArB,EAAgB,cACd,qCACF,EAAE,SAAW,EAEjB,CAAC,EAECC,EAAM,oBAAsB,MAC9B,KAAK,QAAQ,UAAU,WAAW,IAAM,CACtCD,EAAgB,cACd,yCACF,EAAE,MAAM,WAAa,QACvB,EAAGC,EAAM,iBAAiB,EAIxBA,EAAM,iBAAmB,MAC3B,KAAK,QAAQ,UAAU,WAAW,IAAM,CACtCoB,EACF,CAAA,EAAGpB,EAAM,cAAc,EAGzB,IAAIuB,EAAY,YAAY,IAAA,CAC9B,CAEA,SACEvB,EACAwB,EACAC,EACAC,EACA,CACIF,GAAmB,cACrBE,EAAc,EACd,KAAK,mBAAmB1B,EAAOyB,CAAkB,GAE/CD,GAAmB,UACrB,KAAK,gBAAgBxB,EAAOyB,EAAoBC,CAAa,CAEjE,CAEQ,uBAAuB1B,EAAwByB,EAAoB,CACzE,MAAME,EAAe,CACnB,SAAU3B,EAAM,SAChB,aAAcA,EAAM,aACpB,SAAU,KAAK,QAAQ,cAAc,UAAUA,EAAM,IAAKA,EAAM,GAAG,EACnE,GAAI,KAAK,QAAQ,cAAc,iBAAiB,IAAK,GAAI,oBAAS,EAAI,CACxE,EAEM4B,EAAO,KAAK,QAAQ,UAAU,oBAAoBD,EAAcF,CAAkB,EAExF,OAAK,KAAA,QAAQ,UAAU,gCAAgCzB,EAAO4B,CAAI,EAE3DA,CACT,CAEQ,mBAAmB5B,EAAwByB,EAAoB,CACrE,MAAMG,EAAO,KAAK,uBAAuB5B,EAAOyB,CAAkB,EAElE,KAAK,QAAQ,YAAYG,CAAI,CAC/B,CAEQ,gBAAgB5B,EAAwByB,EAAoBC,EAA2B,CAC7F,MAAME,EAAO,KAAK,uBAAuB5B,EAAOyB,CAAkB,EAE5D1B,EAAkB,KAAK,QAAQ,oBAKrC,GAHA,KAAK,MAAMA,EAAiBC,CAAK,EACjC0B,EAAc,EAEVE,EAAK,KAAO,KAAM,CACpB,MAAMC,EAAK9B,EAAgB,cAAgC,qBAAqB,EAEhF,WAAW,IAAM,CACf,KAAK,QAAQ,UAAU,YAAY8B,CAAE,EACrCA,EAAG,cAAgBD,EAAK,QAC1B,EAAGA,EAAK,GAAK,CAAC,EAEd,KAAK,QAAQ,UAAU,YAAY7B,EAAgB,cAAc,QAAQ,EAAG6B,EAAK,EAAE,CACrF,CACF,CACF,CAjWM/B,OAAAA,EACG,KAAOH"}