{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"image-slider-response\",\n  version: version,\n  parameters: {\n    /** The path to the image file to be displayed. */\n    stimulus: {\n      type: ParameterType.IMAGE,\n      default: undefined,\n    },\n    /** Set the height of the image in pixels. If left null (no value specified), then the image will display at its natural height. */\n    stimulus_height: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Set the width of the image in pixels. If left null (no value specified), then the image will display at its natural width. */\n    stimulus_width: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If setting *only* the width or *only* the height and this parameter is true, then the other dimension will be scaled\n     * to maintain the image's aspect ratio. */\n    maintain_aspect_ratio: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** Sets the minimum value of the slider. */\n    min: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /** Sets the maximum value of the slider. */\n    max: {\n      type: ParameterType.INT,\n      default: 100,\n    },\n    /** Sets the starting value of the slider. */\n    slider_start: {\n      type: ParameterType.INT,\n      default: 50,\n    },\n    /** Sets the step of the slider. */\n    step: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /** abels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider.\n     * Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will\n     * be at 33% and 67% of the slider width. */\n    labels: {\n      type: ParameterType.STRING,\n      default: [],\n      array: true,\n    },\n    /** Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. */\n    slider_width: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Label of the button to advance/submit. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n      array: false,\n    },\n    /** If true, the participant must move the slider before clicking the continue button. */\n    require_movement: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be\n     * used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the participant\n     * makes a response. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** How long to wait for the participant to make a response before ending the trial in milliseconds. If the participant\n     * fails to make a response before this timer is reached, the participant's response will be recorded as null for the trial\n     * and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their response\n     * before the cutoff specified by the `trial_duration` parameter). If false, then the trial will continue until the\n     * value for `trial_duration` is reached. You can set this parameter to `false` to force the participant to view a\n     * stimulus for a fixed amount of time, even if they respond before the time is complete. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * If true, the image will be drawn onto a canvas element. This prevents a blank screen (white flash) between\n     * consecutive image trials in some browsers, like Firefox and Edge.\n     * If false, the image will be shown via an img element, as in previous versions of jsPsych. If the stimulus is\n     * an **animated gif**, you must set this parameter to false, because the canvas rendering method will only present static images.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** The path of the image that was displayed. */\n    stimulus: {\n      type: ParameterType.STRING,\n    },\n    /** The numeric value of the slider. */\n    response: {\n      type: ParameterType.INT,\n    },\n    /** The time in milliseconds for the participant to make a response. The time is measured from when the stimulus\n     * first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The starting value of the slider. */\n    slider_start: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays and image and allows the participant to respond by dragging a slider.\n *\n * Image files can be automatically preloaded by jsPsych using the [`preload` plugin](preload.md). However, if you are\n * using timeline variables or another dynamic method to specify the image stimulus, you will need\n * to [manually preload](../overview/media-preloading.md#manual-preloading) the images.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/image-slider-response/ image-slider-response plugin documentation on jspsych.org}\n */\nclass ImageSliderResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var height, width;\n    var html;\n    // half of the thumb width value from jspsych.css, used to adjust the label positions\n    var half_thumb_width = 7.5;\n\n    if (trial.render_on_canvas) {\n      var image_drawn = false;\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      // create wrapper div, canvas element and image\n      var content_wrapper = document.createElement(\"div\");\n      content_wrapper.id = \"jspsych-image-slider-response-wrapper\";\n      content_wrapper.style.margin = \"100px 0px\";\n      var canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-image-slider-response-stimulus\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      var ctx = canvas.getContext(\"2d\");\n      var img = new Image();\n      img.onload = () => {\n        // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n        if (!image_drawn) {\n          getHeightWidth(); // only possible to get width/height after image loads\n          ctx.drawImage(img, 0, 0, width, height);\n        }\n      };\n      img.src = trial.stimulus;\n      // get/set image height and width - this can only be done after image loads because uses image's naturalWidth/naturalHeight properties\n      const getHeightWidth = () => {\n        if (trial.stimulus_height !== null) {\n          height = trial.stimulus_height;\n          if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n            width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n          }\n        } else {\n          height = img.naturalHeight;\n        }\n        if (trial.stimulus_width !== null) {\n          width = trial.stimulus_width;\n          if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n            height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n          }\n        } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n          // if stimulus width is null, only use the image's natural width if the width value wasn't set\n          // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n          width = img.naturalWidth;\n        }\n        canvas.height = height;\n        canvas.width = width;\n      };\n      getHeightWidth(); // call now, in case image loads immediately (is cached)\n      // create container with slider and labels\n      var slider_container = document.createElement(\"div\");\n      slider_container.classList.add(\"jspsych-image-slider-response-container\");\n      slider_container.style.position = \"relative\";\n      slider_container.style.margin = \"0 auto 3em auto\";\n      if (trial.slider_width !== null) {\n        slider_container.style.width = trial.slider_width.toString() + \"px\";\n      }\n      // create html string with slider and labels, and add to slider container\n      html =\n        '<input type=\"range\" class=\"jspsych-slider\" value=\"' +\n        trial.slider_start +\n        '\" min=\"' +\n        trial.min +\n        '\" max=\"' +\n        trial.max +\n        '\" step=\"' +\n        trial.step +\n        '\" id=\"jspsych-image-slider-response-response\"></input>';\n      html += \"<div>\";\n      for (var j = 0; j < trial.labels.length; j++) {\n        var label_width_perc = 100 / (trial.labels.length - 1);\n        var percent_of_range = j * (100 / (trial.labels.length - 1));\n        var percent_dist_from_center = ((percent_of_range - 50) / 50) * 100;\n        var offset = (percent_dist_from_center * half_thumb_width) / 100;\n        html +=\n          '<div style=\"border: 1px solid transparent; display: inline-block; position: absolute; ' +\n          \"left:calc(\" +\n          percent_of_range +\n          \"% - (\" +\n          label_width_perc +\n          \"% / 2) - \" +\n          offset +\n          \"px); text-align: center; width: \" +\n          label_width_perc +\n          '%;\">';\n        html += '<span style=\"text-align: center; font-size: 80%;\">' + trial.labels[j] + \"</span>\";\n        html += \"</div>\";\n      }\n      html += \"</div>\";\n      slider_container.innerHTML = html;\n      // add canvas and slider to content wrapper div\n      content_wrapper.insertBefore(canvas, content_wrapper.firstElementChild);\n      content_wrapper.insertBefore(slider_container, canvas.nextElementSibling);\n      // add content wrapper div to screen and draw image on canvas\n      display_element.insertBefore(content_wrapper, null);\n      if (img.complete && Number.isFinite(width) && Number.isFinite(height)) {\n        // if image has loaded and width/height have been set, then draw it now\n        // (don't rely on img onload function to draw image when image is in the cache, because that causes a delay in the image presentation)\n        ctx.drawImage(img, 0, 0, width, height);\n        image_drawn = true;\n      }\n      // add prompt if there is one\n      if (trial.prompt !== null) {\n        display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n      }\n      // add submit button\n      var submit_btn = document.createElement(\"button\") as HTMLButtonElement;\n      submit_btn.id = \"jspsych-image-slider-response-next\";\n      submit_btn.classList.add(\"jspsych-btn\");\n      submit_btn.disabled = trial.require_movement ? true : false;\n      submit_btn.innerHTML = trial.button_label;\n      display_element.insertBefore(submit_btn, display_element.nextElementSibling);\n    } else {\n      html = '<div id=\"jspsych-image-slider-response-wrapper\" style=\"margin: 100px 0px;\">';\n      html += '<div id=\"jspsych-image-slider-response-stimulus\">';\n      html += '<img src=\"' + trial.stimulus + '\" style=\"';\n      if (trial.stimulus_height !== null) {\n        html += \"height:\" + trial.stimulus_height + \"px; \";\n        if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n          html += \"width: auto; \";\n        }\n      }\n      if (trial.stimulus_width !== null) {\n        html += \"width:\" + trial.stimulus_width + \"px; \";\n        if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n          html += \"height: auto; \";\n        }\n      }\n      html += '\"></img>';\n      html += \"</div>\";\n      html +=\n        '<div class=\"jspsych-image-slider-response-container\" style=\"position:relative; margin: 0 auto 3em auto; width:';\n      if (trial.slider_width !== null) {\n        html += trial.slider_width + \"px;\";\n      } else {\n        html += \"auto;\";\n      }\n      html += '\">';\n      html +=\n        '<input type=\"range\" class=\"jspsych-slider\" value=\"' +\n        trial.slider_start +\n        '\" min=\"' +\n        trial.min +\n        '\" max=\"' +\n        trial.max +\n        '\" step=\"' +\n        trial.step +\n        '\" id=\"jspsych-image-slider-response-response\"></input>';\n      html += \"<div>\";\n      for (var j = 0; j < trial.labels.length; j++) {\n        var label_width_perc = 100 / (trial.labels.length - 1);\n        var percent_of_range = j * (100 / (trial.labels.length - 1));\n        var percent_dist_from_center = ((percent_of_range - 50) / 50) * 100;\n        var offset = (percent_dist_from_center * half_thumb_width) / 100;\n        html +=\n          '<div style=\"border: 1px solid transparent; display: inline-block; position: absolute; ' +\n          \"left:calc(\" +\n          percent_of_range +\n          \"% - (\" +\n          label_width_perc +\n          \"% / 2) - \" +\n          offset +\n          \"px); text-align: center; width: \" +\n          label_width_perc +\n          '%;\">';\n        html += '<span style=\"text-align: center; font-size: 80%;\">' + trial.labels[j] + \"</span>\";\n        html += \"</div>\";\n      }\n      html += \"</div>\";\n      html += \"</div>\";\n      html += \"</div>\";\n\n      if (trial.prompt !== null) {\n        html += trial.prompt;\n      }\n\n      // add submit button\n      html +=\n        '<button id=\"jspsych-image-slider-response-next\" class=\"jspsych-btn\" ' +\n        (trial.require_movement ? \"disabled\" : \"\") +\n        \">\" +\n        trial.button_label +\n        \"</button>\";\n\n      display_element.innerHTML = html;\n\n      // set image dimensions after image has loaded (so that we have access to naturalHeight/naturalWidth)\n      var img = display_element.querySelector(\"img\") as HTMLImageElement;\n      if (trial.stimulus_height !== null) {\n        height = trial.stimulus_height;\n        if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n          width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n        }\n      } else {\n        height = img.naturalHeight;\n      }\n      if (trial.stimulus_width !== null) {\n        width = trial.stimulus_width;\n        if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n          height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n        }\n      } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n        // if stimulus width is null, only use the image's natural width if the width value wasn't set\n        // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n        width = img.naturalWidth;\n      }\n      img.style.height = height.toString() + \"px\";\n      img.style.width = width.toString() + \"px\";\n    }\n\n    var response = {\n      rt: null,\n      response: null,\n    };\n\n    if (trial.require_movement) {\n      const enable_button = () => {\n        display_element.querySelector<HTMLInputElement>(\n          \"#jspsych-image-slider-response-next\"\n        ).disabled = false;\n      };\n\n      display_element\n        .querySelector(\"#jspsych-image-slider-response-response\")\n        .addEventListener(\"mousedown\", enable_button);\n\n      display_element\n        .querySelector(\"#jspsych-image-slider-response-response\")\n        .addEventListener(\"touchstart\", enable_button);\n\n      display_element\n        .querySelector(\"#jspsych-image-slider-response-response\")\n        .addEventListener(\"change\", enable_button);\n    }\n\n    const end_trial = () => {\n      // save data\n      var trialdata = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        slider_start: trial.slider_start,\n        response: response.response,\n      };\n\n      // next trial\n      this.jsPsych.finishTrial(trialdata);\n    };\n\n    display_element\n      .querySelector(\"#jspsych-image-slider-response-next\")\n      .addEventListener(\"click\", () => {\n        // measure response time\n        var endTime = performance.now();\n        response.rt = Math.round(endTime - startTime);\n        response.response = display_element.querySelector<HTMLInputElement>(\n          \"#jspsych-image-slider-response-response\"\n        ).valueAsNumber;\n\n        if (trial.response_ends_trial) {\n          end_trial();\n        } else {\n          display_element.querySelector<HTMLButtonElement>(\n            \"#jspsych-image-slider-response-next\"\n          ).disabled = true;\n        }\n      });\n\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-image-slider-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    }\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      slider_start: trial.slider_start,\n      response: this.jsPsych.randomization.randomInt(trial.min, trial.max),\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      const el = display_element.querySelector<HTMLInputElement>(\"input[type='range']\");\n\n      setTimeout(() => {\n        this.jsPsych.pluginAPI.clickTarget(el);\n        el.valueAsNumber = data.response;\n      }, data.rt / 2);\n\n      this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(\"button\"), data.rt);\n    }\n  }\n}\n\nexport default ImageSliderResponsePlugin;\n"],"names":["version","ParameterType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAIA,MAAM,IAAc,GAAA;EAAA,EAClB,IAAM,EAAA,uBAAA;EAAA,WACNA,gBAAA;EAAA,EACA,UAAY,EAAA;EAAA,IAEV,QAAU,EAAA;EAAA,MACR,MAAMC,qBAAc,CAAA,KAAA;EAAA,MACpB,OAAS,EAAA,KAAA,CAAA;EAAA,KACX;EAAA,IAEA,eAAiB,EAAA;EAAA,MACf,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,IAEA,cAAgB,EAAA;EAAA,MACd,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,IAGA,qBAAuB,EAAA;EAAA,MACrB,MAAMA,qBAAc,CAAA,IAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,IAEA,GAAK,EAAA;EAAA,MACH,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,CAAA;EAAA,KACX;EAAA,IAEA,GAAK,EAAA;EAAA,MACH,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,GAAA;EAAA,KACX;EAAA,IAEA,YAAc,EAAA;EAAA,MACZ,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,EAAA;EAAA,KACX;EAAA,IAEA,IAAM,EAAA;EAAA,MACJ,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,CAAA;EAAA,KACX;EAAA,IAIA,MAAQ,EAAA;EAAA,MACN,MAAMA,qBAAc,CAAA,MAAA;EAAA,MACpB,SAAS,EAAC;EAAA,MACV,KAAO,EAAA,IAAA;EAAA,KACT;EAAA,IAEA,YAAc,EAAA;EAAA,MACZ,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,IAEA,YAAc,EAAA;EAAA,MACZ,MAAMA,qBAAc,CAAA,MAAA;EAAA,MACpB,OAAS,EAAA,UAAA;EAAA,MACT,KAAO,EAAA,KAAA;EAAA,KACT;EAAA,IAEA,gBAAkB,EAAA;EAAA,MAChB,MAAMA,qBAAc,CAAA,IAAA;EAAA,MACpB,OAAS,EAAA,KAAA;EAAA,KACX;EAAA,IAGA,MAAQ,EAAA;EAAA,MACN,MAAMA,qBAAc,CAAA,WAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,IAGA,iBAAmB,EAAA;EAAA,MACjB,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,IAIA,cAAgB,EAAA;EAAA,MACd,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,IAKA,mBAAqB,EAAA;EAAA,MACnB,MAAMA,qBAAc,CAAA,IAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,IAOA,gBAAkB,EAAA;EAAA,MAChB,MAAMA,qBAAc,CAAA,IAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,GACF;EAAA,EACA,IAAM,EAAA;EAAA,IAEJ,QAAU,EAAA;EAAA,MACR,MAAMA,qBAAc,CAAA,MAAA;EAAA,KACtB;EAAA,IAEA,QAAU,EAAA;EAAA,MACR,MAAMA,qBAAc,CAAA,GAAA;EAAA,KACtB;EAAA,IAGA,EAAI,EAAA;EAAA,MACF,MAAMA,qBAAc,CAAA,GAAA;EAAA,KACtB;EAAA,IAEA,YAAc,EAAA;EAAA,MACZ,MAAMA,qBAAc,CAAA,GAAA;EAAA,KACtB;EAAA,GACF;EACF,CAAA,CAAA;EAcA,MAAM,yBAAyD,CAAA;EAAA,EAG7D,YAAoB,OAAkB,EAAA;EAAlB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;EAAA,GAAmB;EAAA,EAFvC,OAAO,IAAO,GAAA,IAAA,CAAA;EAAA,EAId,KAAA,CAAM,iBAA8B,KAAwB,EAAA;EAC1D,IAAA,IAAI,MAAQ,EAAA,KAAA,CAAA;EACZ,IAAI,IAAA,IAAA,CAAA;EAEJ,IAAA,IAAI,gBAAmB,GAAA,GAAA,CAAA;EAEvB,IAAA,IAAI,MAAM,gBAAkB,EAAA;EAC1B,MAAA,IAAI,WAAc,GAAA,KAAA,CAAA;EAElB,MAAI,IAAA,eAAA,CAAgB,eAAiB,EAAA;EAEnC,QAAA,OAAO,gBAAgB,UAAY,EAAA;EACjC,UAAgB,eAAA,CAAA,WAAA,CAAY,gBAAgB,UAAU,CAAA,CAAA;EAAA,SACxD;EAAA,OACF;EAEA,MAAI,IAAA,eAAA,GAAkB,QAAS,CAAA,aAAA,CAAc,KAAK,CAAA,CAAA;EAClD,MAAA,eAAA,CAAgB,EAAK,GAAA,uCAAA,CAAA;EACrB,MAAA,eAAA,CAAgB,MAAM,MAAS,GAAA,WAAA,CAAA;EAC/B,MAAI,IAAA,MAAA,GAAS,QAAS,CAAA,aAAA,CAAc,QAAQ,CAAA,CAAA;EAC5C,MAAA,MAAA,CAAO,EAAK,GAAA,wCAAA,CAAA;EACZ,MAAA,MAAA,CAAO,MAAM,MAAS,GAAA,GAAA,CAAA;EACtB,MAAA,MAAA,CAAO,MAAM,OAAU,GAAA,GAAA,CAAA;EACvB,MAAI,IAAA,GAAA,GAAM,MAAO,CAAA,UAAA,CAAW,IAAI,CAAA,CAAA;EAChC,MAAI,IAAA,GAAA,GAAM,IAAI,KAAM,EAAA,CAAA;EACpB,MAAA,GAAA,CAAI,SAAS,MAAM;EAEjB,QAAA,IAAI,CAAC,WAAa,EAAA;EAChB,UAAe,cAAA,EAAA,CAAA;EACf,UAAA,GAAA,CAAI,SAAU,CAAA,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,OAAO,MAAM,CAAA,CAAA;EAAA,SACxC;EAAA,OACF,CAAA;EACA,MAAA,GAAA,CAAI,MAAM,KAAM,CAAA,QAAA,CAAA;EAEhB,MAAA,MAAM,iBAAiB,MAAM;EAC3B,QAAI,IAAA,KAAA,CAAM,oBAAoB,IAAM,EAAA;EAClC,UAAA,MAAA,GAAS,KAAM,CAAA,eAAA,CAAA;EACf,UAAA,IAAI,KAAM,CAAA,cAAA,IAAkB,IAAQ,IAAA,KAAA,CAAM,qBAAuB,EAAA;EAC/D,YAAA,KAAA,GAAQ,GAAI,CAAA,YAAA,IAAgB,KAAM,CAAA,eAAA,GAAkB,GAAI,CAAA,aAAA,CAAA,CAAA;EAAA,WAC1D;EAAA,SACK,MAAA;EACL,UAAA,MAAA,GAAS,GAAI,CAAA,aAAA,CAAA;EAAA,SACf;EACA,QAAI,IAAA,KAAA,CAAM,mBAAmB,IAAM,EAAA;EACjC,UAAA,KAAA,GAAQ,KAAM,CAAA,cAAA,CAAA;EACd,UAAA,IAAI,KAAM,CAAA,eAAA,IAAmB,IAAQ,IAAA,KAAA,CAAM,qBAAuB,EAAA;EAChE,YAAA,MAAA,GAAS,GAAI,CAAA,aAAA,IAAiB,KAAM,CAAA,cAAA,GAAiB,GAAI,CAAA,YAAA,CAAA,CAAA;EAAA,WAC3D;EAAA,mBACS,EAAE,KAAA,CAAM,eAAoB,KAAA,IAAA,IAAQ,MAAM,qBAAwB,CAAA,EAAA;EAG3E,UAAA,KAAA,GAAQ,GAAI,CAAA,YAAA,CAAA;EAAA,SACd;EACA,QAAA,MAAA,CAAO,MAAS,GAAA,MAAA,CAAA;EAChB,QAAA,MAAA,CAAO,KAAQ,GAAA,KAAA,CAAA;EAAA,OACjB,CAAA;EACA,MAAe,cAAA,EAAA,CAAA;EAEf,MAAI,IAAA,gBAAA,GAAmB,QAAS,CAAA,aAAA,CAAc,KAAK,CAAA,CAAA;EACnD,MAAiB,gBAAA,CAAA,SAAA,CAAU,IAAI,yCAAyC,CAAA,CAAA;EACxE,MAAA,gBAAA,CAAiB,MAAM,QAAW,GAAA,UAAA,CAAA;EAClC,MAAA,gBAAA,CAAiB,MAAM,MAAS,GAAA,iBAAA,CAAA;EAChC,MAAI,IAAA,KAAA,CAAM,iBAAiB,IAAM,EAAA;EAC/B,QAAA,gBAAA,CAAiB,KAAM,CAAA,KAAA,GAAQ,KAAM,CAAA,YAAA,CAAa,UAAa,GAAA,IAAA,CAAA;EAAA,OACjE;EAEA,MACE,IAAA,GAAA,oDAAA,GACA,KAAM,CAAA,YAAA,GACN,SACA,GAAA,KAAA,CAAM,GACN,GAAA,SAAA,GACA,KAAM,CAAA,GAAA,GACN,UACA,GAAA,KAAA,CAAM,IACN,GAAA,wDAAA,CAAA;EACF,MAAQ,IAAA,IAAA,OAAA,CAAA;EACR,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,CAAO,QAAQ,CAAK,EAAA,EAAA;EAC5C,QAAA,IAAI,gBAAmB,GAAA,GAAA,IAAO,KAAM,CAAA,MAAA,CAAO,MAAS,GAAA,CAAA,CAAA,CAAA;EACpD,QAAA,IAAI,gBAAmB,GAAA,CAAA,IAAK,GAAO,IAAA,KAAA,CAAM,OAAO,MAAS,GAAA,CAAA,CAAA,CAAA,CAAA;EACzD,QAAI,IAAA,wBAAA,GAAA,CAA6B,gBAAmB,GAAA,EAAA,IAAM,EAAM,GAAA,GAAA,CAAA;EAChE,QAAI,IAAA,MAAA,GAAU,2BAA2B,gBAAoB,GAAA,GAAA,CAAA;EAC7D,QAAA,IAAA,IACE,qGAEA,gBACA,GAAA,OAAA,GACA,mBACA,WACA,GAAA,MAAA,GACA,qCACA,gBACA,GAAA,MAAA,CAAA;EACF,QAAQ,IAAA,IAAA,oDAAA,GAAuD,KAAM,CAAA,MAAA,CAAO,CAAK,CAAA,GAAA,SAAA,CAAA;EACjF,QAAQ,IAAA,IAAA,QAAA,CAAA;EAAA,OACV;EACA,MAAQ,IAAA,IAAA,QAAA,CAAA;EACR,MAAA,gBAAA,CAAiB,SAAY,GAAA,IAAA,CAAA;EAE7B,MAAgB,eAAA,CAAA,YAAA,CAAa,MAAQ,EAAA,eAAA,CAAgB,iBAAiB,CAAA,CAAA;EACtE,MAAgB,eAAA,CAAA,YAAA,CAAa,gBAAkB,EAAA,MAAA,CAAO,kBAAkB,CAAA,CAAA;EAExE,MAAgB,eAAA,CAAA,YAAA,CAAa,iBAAiB,IAAI,CAAA,CAAA;EAClD,MAAI,IAAA,GAAA,CAAI,YAAY,MAAO,CAAA,QAAA,CAAS,KAAK,CAAK,IAAA,MAAA,CAAO,QAAS,CAAA,MAAM,CAAG,EAAA;EAGrE,QAAA,GAAA,CAAI,SAAU,CAAA,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,OAAO,MAAM,CAAA,CAAA;EACtC,QAAc,WAAA,GAAA,IAAA,CAAA;EAAA,OAChB;EAEA,MAAI,IAAA,KAAA,CAAM,WAAW,IAAM,EAAA;EACzB,QAAgB,eAAA,CAAA,kBAAA,CAAmB,WAAa,EAAA,KAAA,CAAM,MAAM,CAAA,CAAA;EAAA,OAC9D;EAEA,MAAI,IAAA,UAAA,GAAa,QAAS,CAAA,aAAA,CAAc,QAAQ,CAAA,CAAA;EAChD,MAAA,UAAA,CAAW,EAAK,GAAA,oCAAA,CAAA;EAChB,MAAW,UAAA,CAAA,SAAA,CAAU,IAAI,aAAa,CAAA,CAAA;EACtC,MAAW,UAAA,CAAA,QAAA,GAAW,KAAM,CAAA,gBAAA,GAAmB,IAAO,GAAA,KAAA,CAAA;EACtD,MAAA,UAAA,CAAW,YAAY,KAAM,CAAA,YAAA,CAAA;EAC7B,MAAgB,eAAA,CAAA,YAAA,CAAa,UAAY,EAAA,eAAA,CAAgB,kBAAkB,CAAA,CAAA;EAAA,KACtE,MAAA;EACL,MAAO,IAAA,GAAA,6EAAA,CAAA;EACP,MAAQ,IAAA,IAAA,mDAAA,CAAA;EACR,MAAQ,IAAA,IAAA,YAAA,GAAe,MAAM,QAAW,GAAA,WAAA,CAAA;EACxC,MAAI,IAAA,KAAA,CAAM,oBAAoB,IAAM,EAAA;EAClC,QAAQ,IAAA,IAAA,SAAA,GAAY,MAAM,eAAkB,GAAA,MAAA,CAAA;EAC5C,QAAA,IAAI,KAAM,CAAA,cAAA,IAAkB,IAAQ,IAAA,KAAA,CAAM,qBAAuB,EAAA;EAC/D,UAAQ,IAAA,IAAA,eAAA,CAAA;EAAA,SACV;EAAA,OACF;EACA,MAAI,IAAA,KAAA,CAAM,mBAAmB,IAAM,EAAA;EACjC,QAAQ,IAAA,IAAA,QAAA,GAAW,MAAM,cAAiB,GAAA,MAAA,CAAA;EAC1C,QAAA,IAAI,KAAM,CAAA,eAAA,IAAmB,IAAQ,IAAA,KAAA,CAAM,qBAAuB,EAAA;EAChE,UAAQ,IAAA,IAAA,gBAAA,CAAA;EAAA,SACV;EAAA,OACF;EACA,MAAQ,IAAA,IAAA,UAAA,CAAA;EACR,MAAQ,IAAA,IAAA,QAAA,CAAA;EACR,MACE,IAAA,IAAA,gHAAA,CAAA;EACF,MAAI,IAAA,KAAA,CAAM,iBAAiB,IAAM,EAAA;EAC/B,QAAA,IAAA,IAAQ,MAAM,YAAe,GAAA,KAAA,CAAA;EAAA,OACxB,MAAA;EACL,QAAQ,IAAA,IAAA,OAAA,CAAA;EAAA,OACV;EACA,MAAQ,IAAA,IAAA,IAAA,CAAA;EACR,MACE,IAAA,IAAA,oDAAA,GACA,KAAM,CAAA,YAAA,GACN,SACA,GAAA,KAAA,CAAM,GACN,GAAA,SAAA,GACA,KAAM,CAAA,GAAA,GACN,UACA,GAAA,KAAA,CAAM,IACN,GAAA,wDAAA,CAAA;EACF,MAAQ,IAAA,IAAA,OAAA,CAAA;EACR,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,CAAO,QAAQ,CAAK,EAAA,EAAA;EAC5C,QAAA,IAAI,gBAAmB,GAAA,GAAA,IAAO,KAAM,CAAA,MAAA,CAAO,MAAS,GAAA,CAAA,CAAA,CAAA;EACpD,QAAA,IAAI,gBAAmB,GAAA,CAAA,IAAK,GAAO,IAAA,KAAA,CAAM,OAAO,MAAS,GAAA,CAAA,CAAA,CAAA,CAAA;EACzD,QAAI,IAAA,wBAAA,GAAA,CAA6B,gBAAmB,GAAA,EAAA,IAAM,EAAM,GAAA,GAAA,CAAA;EAChE,QAAI,IAAA,MAAA,GAAU,2BAA2B,gBAAoB,GAAA,GAAA,CAAA;EAC7D,QAAA,IAAA,IACE,qGAEA,gBACA,GAAA,OAAA,GACA,mBACA,WACA,GAAA,MAAA,GACA,qCACA,gBACA,GAAA,MAAA,CAAA;EACF,QAAQ,IAAA,IAAA,oDAAA,GAAuD,KAAM,CAAA,MAAA,CAAO,CAAK,CAAA,GAAA,SAAA,CAAA;EACjF,QAAQ,IAAA,IAAA,QAAA,CAAA;EAAA,OACV;EACA,MAAQ,IAAA,IAAA,QAAA,CAAA;EACR,MAAQ,IAAA,IAAA,QAAA,CAAA;EACR,MAAQ,IAAA,IAAA,QAAA,CAAA;EAER,MAAI,IAAA,KAAA,CAAM,WAAW,IAAM,EAAA;EACzB,QAAA,IAAA,IAAQ,KAAM,CAAA,MAAA,CAAA;EAAA,OAChB;EAGA,MAAA,IAAA,IACE,0EACC,KAAM,CAAA,gBAAA,GAAmB,aAAa,EACvC,CAAA,GAAA,GAAA,GACA,MAAM,YACN,GAAA,WAAA,CAAA;EAEF,MAAA,eAAA,CAAgB,SAAY,GAAA,IAAA,CAAA;EAG5B,MAAI,IAAA,GAAA,GAAM,eAAgB,CAAA,aAAA,CAAc,KAAK,CAAA,CAAA;EAC7C,MAAI,IAAA,KAAA,CAAM,oBAAoB,IAAM,EAAA;EAClC,QAAA,MAAA,GAAS,KAAM,CAAA,eAAA,CAAA;EACf,QAAA,IAAI,KAAM,CAAA,cAAA,IAAkB,IAAQ,IAAA,KAAA,CAAM,qBAAuB,EAAA;EAC/D,UAAA,KAAA,GAAQ,GAAI,CAAA,YAAA,IAAgB,KAAM,CAAA,eAAA,GAAkB,GAAI,CAAA,aAAA,CAAA,CAAA;EAAA,SAC1D;EAAA,OACK,MAAA;EACL,QAAA,MAAA,GAAS,GAAI,CAAA,aAAA,CAAA;EAAA,OACf;EACA,MAAI,IAAA,KAAA,CAAM,mBAAmB,IAAM,EAAA;EACjC,QAAA,KAAA,GAAQ,KAAM,CAAA,cAAA,CAAA;EACd,QAAA,IAAI,KAAM,CAAA,eAAA,IAAmB,IAAQ,IAAA,KAAA,CAAM,qBAAuB,EAAA;EAChE,UAAA,MAAA,GAAS,GAAI,CAAA,aAAA,IAAiB,KAAM,CAAA,cAAA,GAAiB,GAAI,CAAA,YAAA,CAAA,CAAA;EAAA,SAC3D;EAAA,iBACS,EAAE,KAAA,CAAM,eAAoB,KAAA,IAAA,IAAQ,MAAM,qBAAwB,CAAA,EAAA;EAG3E,QAAA,KAAA,GAAQ,GAAI,CAAA,YAAA,CAAA;EAAA,OACd;EACA,MAAA,GAAA,CAAI,KAAM,CAAA,MAAA,GAAS,MAAO,CAAA,QAAA,EAAa,GAAA,IAAA,CAAA;EACvC,MAAA,GAAA,CAAI,KAAM,CAAA,KAAA,GAAQ,KAAM,CAAA,QAAA,EAAa,GAAA,IAAA,CAAA;EAAA,KACvC;EAEA,IAAA,IAAI,QAAW,GAAA;EAAA,MACb,EAAI,EAAA,IAAA;EAAA,MACJ,QAAU,EAAA,IAAA;EAAA,KACZ,CAAA;EAEA,IAAA,IAAI,MAAM,gBAAkB,EAAA;EAC1B,MAAA,MAAM,gBAAgB,MAAM;EAC1B,QAAgB,eAAA,CAAA,aAAA;EAAA,UACd,qCAAA;EAAA,UACA,QAAW,GAAA,KAAA,CAAA;EAAA,OACf,CAAA;EAEA,MAAA,eAAA,CACG,aAAc,CAAA,yCAAyC,CACvD,CAAA,gBAAA,CAAiB,aAAa,aAAa,CAAA,CAAA;EAE9C,MAAA,eAAA,CACG,aAAc,CAAA,yCAAyC,CACvD,CAAA,gBAAA,CAAiB,cAAc,aAAa,CAAA,CAAA;EAE/C,MAAA,eAAA,CACG,aAAc,CAAA,yCAAyC,CACvD,CAAA,gBAAA,CAAiB,UAAU,aAAa,CAAA,CAAA;EAAA,KAC7C;EAEA,IAAA,MAAM,YAAY,MAAM;EAEtB,MAAA,IAAI,SAAY,GAAA;EAAA,QACd,IAAI,QAAS,CAAA,EAAA;EAAA,QACb,UAAU,KAAM,CAAA,QAAA;EAAA,QAChB,cAAc,KAAM,CAAA,YAAA;EAAA,QACpB,UAAU,QAAS,CAAA,QAAA;EAAA,OACrB,CAAA;EAGA,MAAK,IAAA,CAAA,OAAA,CAAQ,YAAY,SAAS,CAAA,CAAA;EAAA,KACpC,CAAA;EAEA,IAAA,eAAA,CACG,aAAc,CAAA,qCAAqC,CACnD,CAAA,gBAAA,CAAiB,SAAS,MAAM;EAE/B,MAAI,IAAA,OAAA,GAAU,YAAY,GAAI,EAAA,CAAA;EAC9B,MAAA,QAAA,CAAS,EAAK,GAAA,IAAA,CAAK,KAAM,CAAA,OAAA,GAAU,SAAS,CAAA,CAAA;EAC5C,MAAA,QAAA,CAAS,WAAW,eAAgB,CAAA,aAAA;EAAA,QAClC,yCAAA;EAAA,OACA,CAAA,aAAA,CAAA;EAEF,MAAA,IAAI,MAAM,mBAAqB,EAAA;EAC7B,QAAU,SAAA,EAAA,CAAA;EAAA,OACL,MAAA;EACL,QAAgB,eAAA,CAAA,aAAA;EAAA,UACd,qCAAA;EAAA,UACA,QAAW,GAAA,IAAA,CAAA;EAAA,OACf;EAAA,KACD,CAAA,CAAA;EAEH,IAAI,IAAA,KAAA,CAAM,sBAAsB,IAAM,EAAA;EACpC,MAAK,IAAA,CAAA,OAAA,CAAQ,SAAU,CAAA,UAAA,CAAW,MAAM;EACtC,QAAgB,eAAA,CAAA,aAAA;EAAA,UACd,yCAAA;EAAA,SACF,CAAE,MAAM,UAAa,GAAA,QAAA,CAAA;EAAA,OACvB,EAAG,MAAM,iBAAiB,CAAA,CAAA;EAAA,KAC5B;EAGA,IAAI,IAAA,KAAA,CAAM,mBAAmB,IAAM,EAAA;EACjC,MAAK,IAAA,CAAA,OAAA,CAAQ,SAAU,CAAA,UAAA,CAAW,MAAM;EACtC,QAAU,SAAA,EAAA,CAAA;EAAA,OACZ,EAAG,MAAM,cAAc,CAAA,CAAA;EAAA,KACzB;EAEA,IAAI,IAAA,SAAA,GAAY,YAAY,GAAI,EAAA,CAAA;EAAA,GAClC;EAAA,EAEA,QACE,CAAA,KAAA,EACA,eACA,EAAA,kBAAA,EACA,aACA,EAAA;EACA,IAAA,IAAI,mBAAmB,WAAa,EAAA;EAClC,MAAc,aAAA,EAAA,CAAA;EACd,MAAK,IAAA,CAAA,kBAAA,CAAmB,OAAO,kBAAkB,CAAA,CAAA;EAAA,KACnD;EACA,IAAA,IAAI,mBAAmB,QAAU,EAAA;EAC/B,MAAK,IAAA,CAAA,eAAA,CAAgB,KAAO,EAAA,kBAAA,EAAoB,aAAa,CAAA,CAAA;EAAA,KAC/D;EAAA,GACF;EAAA,EAEQ,sBAAA,CAAuB,OAAwB,kBAAoB,EAAA;EACzE,IAAA,MAAM,YAAe,GAAA;EAAA,MACnB,UAAU,KAAM,CAAA,QAAA;EAAA,MAChB,cAAc,KAAM,CAAA,YAAA;EAAA,MACpB,QAAA,EAAU,KAAK,OAAQ,CAAA,aAAA,CAAc,UAAU,KAAM,CAAA,GAAA,EAAK,MAAM,GAAG,CAAA;EAAA,MACnE,EAAA,EAAI,KAAK,OAAQ,CAAA,aAAA,CAAc,iBAAiB,GAAK,EAAA,EAAA,EAAI,CAAI,GAAA,GAAA,EAAK,IAAI,CAAA;EAAA,KACxE,CAAA;EAEA,IAAA,MAAM,OAAO,IAAK,CAAA,OAAA,CAAQ,SAAU,CAAA,mBAAA,CAAoB,cAAc,kBAAkB,CAAA,CAAA;EAExF,IAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,+BAAgC,CAAA,KAAA,EAAO,IAAI,CAAA,CAAA;EAElE,IAAO,OAAA,IAAA,CAAA;EAAA,GACT;EAAA,EAEQ,kBAAA,CAAmB,OAAwB,kBAAoB,EAAA;EACrE,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;EAElE,IAAK,IAAA,CAAA,OAAA,CAAQ,YAAY,IAAI,CAAA,CAAA;EAAA,GAC/B;EAAA,EAEQ,eAAA,CAAgB,KAAwB,EAAA,kBAAA,EAAoB,aAA2B,EAAA;EAC7F,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;EAElE,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,OAAA,CAAQ,iBAAkB,EAAA,CAAA;EAEvD,IAAK,IAAA,CAAA,KAAA,CAAM,iBAAiB,KAAK,CAAA,CAAA;EACjC,IAAc,aAAA,EAAA,CAAA;EAEd,IAAI,IAAA,IAAA,CAAK,OAAO,IAAM,EAAA;EACpB,MAAM,MAAA,EAAA,GAAK,eAAgB,CAAA,aAAA,CAAgC,qBAAqB,CAAA,CAAA;EAEhF,MAAA,UAAA,CAAW,MAAM;EACf,QAAK,IAAA,CAAA,OAAA,CAAQ,SAAU,CAAA,WAAA,CAAY,EAAE,CAAA,CAAA;EACrC,QAAA,EAAA,CAAG,gBAAgB,IAAK,CAAA,QAAA,CAAA;EAAA,OAC1B,EAAG,IAAK,CAAA,EAAA,GAAK,CAAC,CAAA,CAAA;EAEd,MAAK,IAAA,CAAA,OAAA,CAAQ,UAAU,WAAY,CAAA,eAAA,CAAgB,cAAc,QAAQ,CAAA,EAAG,KAAK,EAAE,CAAA,CAAA;EAAA,KACrF;EAAA,GACF;EACF;;;;;;;;"}