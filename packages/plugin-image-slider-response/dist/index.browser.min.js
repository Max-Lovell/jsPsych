var jsPsychImageSliderResponse = (function (a) {
  "use strict";
  var P = {
    name: "@jspsych/plugin-image-slider-response",
    version: "2.0.0",
    description: "a jspsych plugin for free response survey questions",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-image-slider-response",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/image-slider-response",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const x = {
    name: "image-slider-response",
    version: P.version,
    parameters: {
      stimulus: { type: a.ParameterType.IMAGE, default: void 0 },
      stimulus_height: { type: a.ParameterType.INT, default: null },
      stimulus_width: { type: a.ParameterType.INT, default: null },
      maintain_aspect_ratio: { type: a.ParameterType.BOOL, default: !0 },
      min: { type: a.ParameterType.INT, default: 0 },
      max: { type: a.ParameterType.INT, default: 100 },
      slider_start: { type: a.ParameterType.INT, default: 50 },
      step: { type: a.ParameterType.INT, default: 1 },
      labels: { type: a.ParameterType.STRING, default: [], array: !0 },
      slider_width: { type: a.ParameterType.INT, default: null },
      button_label: { type: a.ParameterType.STRING, default: "Continue", array: !1 },
      require_movement: { type: a.ParameterType.BOOL, default: !1 },
      prompt: { type: a.ParameterType.HTML_STRING, default: null },
      stimulus_duration: { type: a.ParameterType.INT, default: null },
      trial_duration: { type: a.ParameterType.INT, default: null },
      response_ends_trial: { type: a.ParameterType.BOOL, default: !0 },
      render_on_canvas: { type: a.ParameterType.BOOL, default: !0 },
    },
    data: {
      stimulus: { type: a.ParameterType.STRING },
      response: { type: a.ParameterType.INT },
      rt: { type: a.ParameterType.INT },
      slider_start: { type: a.ParameterType.INT },
    },
  };
  class T {
    constructor(s) {
      this.jsPsych = s;
    }
    trial(s, e) {
      var r,
        i,
        t,
        m = 7.5;
      if (e.render_on_canvas) {
        var f = !1;
        if (s.hasChildNodes()) for (; s.firstChild; ) s.removeChild(s.firstChild);
        var p = document.createElement("div");
        (p.id = "jspsych-image-slider-response-wrapper"), (p.style.margin = "100px 0px");
        var d = document.createElement("canvas");
        (d.id = "jspsych-image-slider-response-stimulus"),
          (d.style.margin = "0"),
          (d.style.padding = "0");
        var b = d.getContext("2d"),
          l = new Image();
        (l.onload = () => {
          f || (n(), b.drawImage(l, 0, 0, i, r));
        }),
          (l.src = e.stimulus);
        const n = () => {
          e.stimulus_height !== null
            ? ((r = e.stimulus_height),
              e.stimulus_width == null &&
                e.maintain_aspect_ratio &&
                (i = l.naturalWidth * (e.stimulus_height / l.naturalHeight)))
            : (r = l.naturalHeight),
            e.stimulus_width !== null
              ? ((i = e.stimulus_width),
                e.stimulus_height == null &&
                  e.maintain_aspect_ratio &&
                  (r = l.naturalHeight * (e.stimulus_width / l.naturalWidth)))
              : (e.stimulus_height !== null && e.maintain_aspect_ratio) || (i = l.naturalWidth),
            (d.height = r),
            (d.width = i);
        };
        n();
        var o = document.createElement("div");
        o.classList.add("jspsych-image-slider-response-container"),
          (o.style.position = "relative"),
          (o.style.margin = "0 auto 3em auto"),
          e.slider_width !== null && (o.style.width = e.slider_width.toString() + "px"),
          (t =
            '<input type="range" class="jspsych-slider" value="' +
            e.slider_start +
            '" min="' +
            e.min +
            '" max="' +
            e.max +
            '" step="' +
            e.step +
            '" id="jspsych-image-slider-response-response"></input>'),
          (t += "<div>");
        for (var u = 0; u < e.labels.length; u++) {
          var h = 100 / (e.labels.length - 1),
            c = u * (100 / (e.labels.length - 1)),
            _ = ((c - 50) / 50) * 100,
            v = (_ * m) / 100;
          (t +=
            '<div style="border: 1px solid transparent; display: inline-block; position: absolute; left:calc(' +
            c +
            "% - (" +
            h +
            "% / 2) - " +
            v +
            "px); text-align: center; width: " +
            h +
            '%;">'),
            (t += '<span style="text-align: center; font-size: 80%;">' + e.labels[u] + "</span>"),
            (t += "</div>");
        }
        (t += "</div>"),
          (o.innerHTML = t),
          p.insertBefore(d, p.firstElementChild),
          p.insertBefore(o, d.nextElementSibling),
          s.insertBefore(p, null),
          l.complete &&
            Number.isFinite(i) &&
            Number.isFinite(r) &&
            (b.drawImage(l, 0, 0, i, r), (f = !0)),
          e.prompt !== null && s.insertAdjacentHTML("beforeend", e.prompt);
        var y = document.createElement("button");
        (y.id = "jspsych-image-slider-response-next"),
          y.classList.add("jspsych-btn"),
          (y.disabled = !!e.require_movement),
          (y.innerHTML = e.button_label),
          s.insertBefore(y, s.nextElementSibling);
      } else {
        (t = '<div id="jspsych-image-slider-response-wrapper" style="margin: 100px 0px;">'),
          (t += '<div id="jspsych-image-slider-response-stimulus">'),
          (t += '<img src="' + e.stimulus + '" style="'),
          e.stimulus_height !== null &&
            ((t += "height:" + e.stimulus_height + "px; "),
            e.stimulus_width == null && e.maintain_aspect_ratio && (t += "width: auto; ")),
          e.stimulus_width !== null &&
            ((t += "width:" + e.stimulus_width + "px; "),
            e.stimulus_height == null && e.maintain_aspect_ratio && (t += "height: auto; ")),
          (t += '"></img>'),
          (t += "</div>"),
          (t +=
            '<div class="jspsych-image-slider-response-container" style="position:relative; margin: 0 auto 3em auto; width:'),
          e.slider_width !== null ? (t += e.slider_width + "px;") : (t += "auto;"),
          (t += '">'),
          (t +=
            '<input type="range" class="jspsych-slider" value="' +
            e.slider_start +
            '" min="' +
            e.min +
            '" max="' +
            e.max +
            '" step="' +
            e.step +
            '" id="jspsych-image-slider-response-response"></input>'),
          (t += "<div>");
        for (var u = 0; u < e.labels.length; u++) {
          var h = 100 / (e.labels.length - 1),
            c = u * (100 / (e.labels.length - 1)),
            _ = ((c - 50) / 50) * 100,
            v = (_ * m) / 100;
          (t +=
            '<div style="border: 1px solid transparent; display: inline-block; position: absolute; left:calc(' +
            c +
            "% - (" +
            h +
            "% / 2) - " +
            v +
            "px); text-align: center; width: " +
            h +
            '%;">'),
            (t += '<span style="text-align: center; font-size: 80%;">' + e.labels[u] + "</span>"),
            (t += "</div>");
        }
        (t += "</div>"),
          (t += "</div>"),
          (t += "</div>"),
          e.prompt !== null && (t += e.prompt),
          (t +=
            '<button id="jspsych-image-slider-response-next" class="jspsych-btn" ' +
            (e.require_movement ? "disabled" : "") +
            ">" +
            e.button_label +
            "</button>"),
          (s.innerHTML = t);
        var l = s.querySelector("img");
        e.stimulus_height !== null
          ? ((r = e.stimulus_height),
            e.stimulus_width == null &&
              e.maintain_aspect_ratio &&
              (i = l.naturalWidth * (e.stimulus_height / l.naturalHeight)))
          : (r = l.naturalHeight),
          e.stimulus_width !== null
            ? ((i = e.stimulus_width),
              e.stimulus_height == null &&
                e.maintain_aspect_ratio &&
                (r = l.naturalHeight * (e.stimulus_width / l.naturalWidth)))
            : (e.stimulus_height !== null && e.maintain_aspect_ratio) || (i = l.naturalWidth),
          (l.style.height = r.toString() + "px"),
          (l.style.width = i.toString() + "px");
      }
      var g = { rt: null, response: null };
      if (e.require_movement) {
        const n = () => {
          s.querySelector("#jspsych-image-slider-response-next").disabled = !1;
        };
        s.querySelector("#jspsych-image-slider-response-response").addEventListener("mousedown", n),
          s
            .querySelector("#jspsych-image-slider-response-response")
            .addEventListener("touchstart", n),
          s.querySelector("#jspsych-image-slider-response-response").addEventListener("change", n);
      }
      const w = () => {
        var n = {
          rt: g.rt,
          stimulus: e.stimulus,
          slider_start: e.slider_start,
          response: g.response,
        };
        this.jsPsych.finishTrial(n);
      };
      s.querySelector("#jspsych-image-slider-response-next").addEventListener("click", () => {
        var n = performance.now();
        (g.rt = Math.round(n - j)),
          (g.response = s.querySelector("#jspsych-image-slider-response-response").valueAsNumber),
          e.response_ends_trial
            ? w()
            : (s.querySelector("#jspsych-image-slider-response-next").disabled = !0);
      }),
        e.stimulus_duration !== null &&
          this.jsPsych.pluginAPI.setTimeout(() => {
            s.querySelector("#jspsych-image-slider-response-stimulus").style.visibility = "hidden";
          }, e.stimulus_duration),
        e.trial_duration !== null &&
          this.jsPsych.pluginAPI.setTimeout(() => {
            w();
          }, e.trial_duration);
      var j = performance.now();
    }
    simulate(s, e, r, i) {
      e == "data-only" && (i(), this.simulate_data_only(s, r)),
        e == "visual" && this.simulate_visual(s, r, i);
    }
    create_simulation_data(s, e) {
      const r = {
          stimulus: s.stimulus,
          slider_start: s.slider_start,
          response: this.jsPsych.randomization.randomInt(s.min, s.max),
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0),
        },
        i = this.jsPsych.pluginAPI.mergeSimulationData(r, e);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(s, i), i;
    }
    simulate_data_only(s, e) {
      const r = this.create_simulation_data(s, e);
      this.jsPsych.finishTrial(r);
    }
    simulate_visual(s, e, r) {
      const i = this.create_simulation_data(s, e),
        t = this.jsPsych.getDisplayElement();
      if ((this.trial(t, s), r(), i.rt !== null)) {
        const m = t.querySelector("input[type='range']");
        setTimeout(() => {
          this.jsPsych.pluginAPI.clickTarget(m), (m.valueAsNumber = i.response);
        }, i.rt / 2),
          this.jsPsych.pluginAPI.clickTarget(t.querySelector("button"), i.rt);
      }
    }
  }
  return (T.info = x), T;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
