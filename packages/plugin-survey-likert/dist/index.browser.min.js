var jsPsychSurveyLikert = (function (s) {
  "use strict";
  var P = {
    name: "@jspsych/plugin-survey-likert",
    version: "2.0.0",
    description: "a jspsych plugin for measuring items on a likert scale",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-survey-likert",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/survey-likert",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const k = {
    name: "survey-likert",
    version: P.version,
    parameters: {
      questions: {
        type: s.ParameterType.COMPLEX,
        array: !0,
        nested: {
          prompt: { type: s.ParameterType.HTML_STRING, default: void 0 },
          labels: { type: s.ParameterType.STRING, array: !0, default: void 0 },
          required: { type: s.ParameterType.BOOL, default: !1 },
          name: { type: s.ParameterType.STRING, default: "" },
        },
      },
      randomize_question_order: { type: s.ParameterType.BOOL, default: !1 },
      preamble: { type: s.ParameterType.HTML_STRING, default: null },
      scale_width: { type: s.ParameterType.INT, default: null },
      button_label: { type: s.ParameterType.STRING, default: "Continue" },
      autocomplete: { type: s.ParameterType.BOOL, default: !1 },
    },
    data: {
      response: {
        type: s.ParameterType.COMPLEX,
        nested: {
          identifier: { type: s.ParameterType.STRING },
          response: {
            type:
              s.ParameterType.STRING |
              s.ParameterType.INT |
              s.ParameterType.FLOAT |
              s.ParameterType.BOOL |
              s.ParameterType.OBJECT,
          },
        },
      },
      rt: { type: s.ParameterType.INT },
      question_order: { type: s.ParameterType.INT, array: !0 },
    },
  };
  class d {
    constructor(e) {
      this.jsPsych = e;
    }
    trial(e, r) {
      if (r.scale_width !== null) var n = r.scale_width + "px";
      else var n = "100%";
      var t = "";
      (t += '<style id="jspsych-survey-likert-css">'),
        (t +=
          ".jspsych-survey-likert-statement { display:block; font-size: 16px; padding-top: 40px; margin-bottom:10px; }.jspsych-survey-likert-opts { list-style:none; width:" +
          n +
          "; margin:auto; padding:0 0 35px; display:block; font-size: 14px; line-height:1.1em; }.jspsych-survey-likert-opt-label { line-height: 1.1em; color: #444; }.jspsych-survey-likert-opts:before { content: ''; position:relative; top:11px; /*left:9.5%;*/ display:block; background-color:#efefef; height:4px; width:100%; }.jspsych-survey-likert-opts:last-of-type { border-bottom: 0; }.jspsych-survey-likert-opts li { display:inline-block; /*width:19%;*/ text-align:center; vertical-align: top; }.jspsych-survey-likert-opts li input[type=radio] { display:block; position:relative; top:0; left:50%; margin-left:-6px; }"),
        (t += "</style>"),
        r.preamble !== null &&
          (t +=
            '<div id="jspsych-survey-likert-preamble" class="jspsych-survey-likert-preamble">' +
            r.preamble +
            "</div>"),
        r.autocomplete
          ? (t += '<form id="jspsych-survey-likert-form">')
          : (t += '<form id="jspsych-survey-likert-form" autocomplete="off">');
      for (var l = [], a = 0; a < r.questions.length; a++) l.push(a);
      r.randomize_question_order && (l = this.jsPsych.randomization.shuffle(l));
      for (var a = 0; a < r.questions.length; a++) {
        var i = r.questions[l[a]];
        t += '<label class="jspsych-survey-likert-statement">' + i.prompt + "</label>";
        for (
          var c = 100 / i.labels.length,
            o =
              '<ul class="jspsych-survey-likert-opts" data-name="' +
              i.name +
              '" data-radio-group="Q' +
              l[a] +
              '">',
            u = 0;
          u < i.labels.length;
          u++
        )
          (o +=
            '<li style="width:' +
            c +
            '%"><label class="jspsych-survey-likert-opt-label"><input type="radio" name="Q' +
            l[a] +
            '" value="' +
            u +
            '"'),
            i.required && (o += " required"),
            (o += ">" + i.labels[u] + "</label></li>");
        (o += "</ul>"), (t += o);
      }
      (t +=
        '<input type="submit" id="jspsych-survey-likert-next" class="jspsych-survey-likert jspsych-btn" value="' +
        r.button_label +
        '"></input>'),
        (t += "</form>"),
        (e.innerHTML = t),
        e.querySelector("#jspsych-survey-likert-form").addEventListener("submit", (j) => {
          j.preventDefault();
          for (
            var _ = performance.now(),
              q = Math.round(_ - T),
              m = {},
              y = e.querySelectorAll("#jspsych-survey-likert-form .jspsych-survey-likert-opts"),
              p = 0;
            p < y.length;
            p++
          ) {
            var h = y[p].dataset.radioGroup,
              v = e.querySelector('input[name="' + h + '"]:checked');
            if (v === null) var f = "";
            else var f = parseInt(v.value);
            var g = {};
            if (y[p].attributes["data-name"].value !== "")
              var b = y[p].attributes["data-name"].value;
            else var b = h;
            (g[b] = f), Object.assign(m, g);
          }
          var x = { rt: q, response: m, question_order: l };
          this.jsPsych.finishTrial(x);
        });
      var T = performance.now();
    }
    simulate(e, r, n, t) {
      r == "data-only" && (t(), this.simulate_data_only(e, n)),
        r == "visual" && this.simulate_visual(e, n, t);
    }
    create_simulation_data(e, r) {
      const n = {};
      let t = 1e3;
      for (const i of e.questions) {
        const c = i.name ? i.name : `Q${e.questions.indexOf(i)}`;
        (n[c] = this.jsPsych.randomization.randomInt(0, i.labels.length - 1)),
          (t += this.jsPsych.randomization.sampleExGaussian(1500, 400, 0.005, !0));
      }
      const l = {
          response: n,
          rt: t,
          question_order: e.randomize_question_order
            ? this.jsPsych.randomization.shuffle([...Array(e.questions.length).keys()])
            : [...Array(e.questions.length).keys()],
        },
        a = this.jsPsych.pluginAPI.mergeSimulationData(l, r);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(e, a), a;
    }
    simulate_data_only(e, r) {
      const n = this.create_simulation_data(e, r);
      this.jsPsych.finishTrial(n);
    }
    simulate_visual(e, r, n) {
      const t = this.create_simulation_data(e, r),
        l = this.jsPsych.getDisplayElement();
      this.trial(l, e), n();
      const a = Object.entries(t.response);
      for (let i = 0; i < a.length; i++)
        this.jsPsych.pluginAPI.clickTarget(
          l.querySelector(`input[type="radio"][name="${a[i][0]}"][value="${a[i][1]}"]`),
          ((t.rt - 1e3) / a.length) * (i + 1)
        );
      this.jsPsych.pluginAPI.clickTarget(l.querySelector("#jspsych-survey-likert-next"), t.rt);
    }
  }
  return (d.info = k), d;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
