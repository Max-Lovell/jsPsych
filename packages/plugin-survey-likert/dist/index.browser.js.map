{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"survey-likert\",\n  version: version,\n  parameters: {\n    /** Array containing one or more objects with parameters for the question(s) that should be shown on the page. */\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          default: undefined,\n        },\n        /** Array of likert labels to display for this question. */\n        labels: {\n          type: ParameterType.STRING,\n          array: true,\n          default: undefined,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          default: \"\",\n        },\n      },\n    },\n    /** If true, the order of the questions in the 'questions' array will be randomized. */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** HTML-formatted string to display at top of the page above all of the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** Width of the likert scales in pixels. */\n    scale_width: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Label of the button to submit responses. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /** Setting this to true will enable browser auto-complete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /** An object containing the response for each question. The object will have a separate key (variable) for each question, with the first question in the trial being recorded in `Q0`, the second in `Q1`, and so on. The responses are recorded as integers, representing the position selected on the likert scale for that question. If the `name` parameter is defined for the question, then the response object will use the value of `name` as the key for each question. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    response: {\n      type: ParameterType.COMPLEX,\n      nested: {\n        identifier: {\n          type: ParameterType.STRING,\n        },\n        response: {\n          type:\n            ParameterType.STRING |\n            ParameterType.INT |\n            ParameterType.FLOAT |\n            ParameterType.BOOL |\n            ParameterType.OBJECT,\n        },\n      },\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the questions first appear on the screen until the participant's response(s) are submitted. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** An array with the order of questions. For example `[2,0,1]` would indicate that the first question was `trial.questions[2]` (the third item in the `questions` parameter), the second question was `trial.questions[0]`, and the final question was `trial.questions[1]`. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    question_order: {\n      type: ParameterType.INT,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * The survey-likert plugin displays a set of questions with Likert scale responses. The participant responds\n * by selecting a radio button.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/survey-likert/ survey-likert plugin documentation on jspsych.org}\n */\nclass SurveyLikertPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    if (trial.scale_width !== null) {\n      var w = trial.scale_width + \"px\";\n    } else {\n      var w = \"100%\";\n    }\n\n    var html = \"\";\n    // inject CSS for trial\n    html += '<style id=\"jspsych-survey-likert-css\">';\n    html +=\n      \".jspsych-survey-likert-statement { display:block; font-size: 16px; padding-top: 40px; margin-bottom:10px; }\" +\n      \".jspsych-survey-likert-opts { list-style:none; width:\" +\n      w +\n      \"; margin:auto; padding:0 0 35px; display:block; font-size: 14px; line-height:1.1em; }\" +\n      \".jspsych-survey-likert-opt-label { line-height: 1.1em; color: #444; }\" +\n      \".jspsych-survey-likert-opts:before { content: ''; position:relative; top:11px; /*left:9.5%;*/ display:block; background-color:#efefef; height:4px; width:100%; }\" +\n      \".jspsych-survey-likert-opts:last-of-type { border-bottom: 0; }\" +\n      \".jspsych-survey-likert-opts li { display:inline-block; /*width:19%;*/ text-align:center; vertical-align: top; }\" +\n      \".jspsych-survey-likert-opts li input[type=radio] { display:block; position:relative; top:0; left:50%; margin-left:-6px; }\";\n    html += \"</style>\";\n\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-survey-likert-preamble\" class=\"jspsych-survey-likert-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n\n    if (trial.autocomplete) {\n      html += '<form id=\"jspsych-survey-likert-form\">';\n    } else {\n      html += '<form id=\"jspsych-survey-likert-form\" autocomplete=\"off\">';\n    }\n\n    // add likert scale questions ///\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n    // so that the data are always associated with the same question regardless of order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n\n    for (var i = 0; i < trial.questions.length; i++) {\n      var question = trial.questions[question_order[i]];\n      // add question\n      html += '<label class=\"jspsych-survey-likert-statement\">' + question.prompt + \"</label>\";\n      // add options\n      var width = 100 / question.labels.length;\n      var options_string =\n        '<ul class=\"jspsych-survey-likert-opts\" data-name=\"' +\n        question.name +\n        '\" data-radio-group=\"Q' +\n        question_order[i] +\n        '\">';\n      for (var j = 0; j < question.labels.length; j++) {\n        options_string +=\n          '<li style=\"width:' +\n          width +\n          '%\"><label class=\"jspsych-survey-likert-opt-label\"><input type=\"radio\" name=\"Q' +\n          question_order[i] +\n          '\" value=\"' +\n          j +\n          '\"';\n        if (question.required) {\n          options_string += \" required\";\n        }\n        options_string += \">\" + question.labels[j] + \"</label></li>\";\n      }\n      options_string += \"</ul>\";\n      html += options_string;\n    }\n\n    // add submit button\n    html +=\n      '<input type=\"submit\" id=\"jspsych-survey-likert-next\" class=\"jspsych-survey-likert jspsych-btn\" value=\"' +\n      trial.button_label +\n      '\"></input>';\n\n    html += \"</form>\";\n\n    display_element.innerHTML = html;\n\n    display_element.querySelector(\"#jspsych-survey-likert-form\").addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n      var matches = display_element.querySelectorAll<HTMLFormElement>(\n        \"#jspsych-survey-likert-form .jspsych-survey-likert-opts\"\n      );\n      for (var index = 0; index < matches.length; index++) {\n        var id = matches[index].dataset[\"radioGroup\"];\n        var el = display_element.querySelector<HTMLInputElement>(\n          'input[name=\"' + id + '\"]:checked'\n        );\n        if (el === null) {\n          var response: string | number = \"\";\n        } else {\n          var response: string | number = parseInt(el.value);\n        }\n        var obje = {};\n        if (matches[index].attributes[\"data-name\"].value !== \"\") {\n          var name = matches[index].attributes[\"data-name\"].value;\n        } else {\n          var name = id;\n        }\n        obje[name] = response;\n        Object.assign(question_data, obje);\n      }\n\n      // save data\n      var trial_data = {\n        rt: response_time,\n        response: question_data,\n        question_order: question_order,\n      };\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      question_data[name] = this.jsPsych.randomization.randomInt(0, q.labels.length - 1);\n      rt += this.jsPsych.randomization.sampleExGaussian(1500, 400, 1 / 200, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n      question_order: trial.randomize_question_order\n        ? this.jsPsych.randomization.shuffle([...Array(trial.questions.length).keys()])\n        : [...Array(trial.questions.length).keys()],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers = Object.entries(data.response);\n    for (let i = 0; i < answers.length; i++) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(\n          `input[type=\"radio\"][name=\"${answers[i][0]}\"][value=\"${answers[i][1]}\"]`\n        ),\n        ((data.rt - 1000) / answers.length) * (i + 1)\n      );\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-likert-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyLikertPlugin;\n"],"names":["version","ParameterType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAIA,MAAM,IAAc,GAAA;EAAA,EAClB,IAAM,EAAA,eAAA;EAAA,WACNA,gBAAA;EAAA,EACA,UAAY,EAAA;EAAA,IAEV,SAAW,EAAA;EAAA,MACT,MAAMC,qBAAc,CAAA,OAAA;EAAA,MACpB,KAAO,EAAA,IAAA;EAAA,MACP,MAAQ,EAAA;EAAA,QAEN,MAAQ,EAAA;EAAA,UACN,MAAMA,qBAAc,CAAA,WAAA;EAAA,UACpB,OAAS,EAAA,KAAA,CAAA;EAAA,SACX;EAAA,QAEA,MAAQ,EAAA;EAAA,UACN,MAAMA,qBAAc,CAAA,MAAA;EAAA,UACpB,KAAO,EAAA,IAAA;EAAA,UACP,OAAS,EAAA,KAAA,CAAA;EAAA,SACX;EAAA,QAEA,QAAU,EAAA;EAAA,UACR,MAAMA,qBAAc,CAAA,IAAA;EAAA,UACpB,OAAS,EAAA,KAAA;EAAA,SACX;EAAA,QAEA,IAAM,EAAA;EAAA,UACJ,MAAMA,qBAAc,CAAA,MAAA;EAAA,UACpB,OAAS,EAAA,EAAA;EAAA,SACX;EAAA,OACF;EAAA,KACF;EAAA,IAEA,wBAA0B,EAAA;EAAA,MACxB,MAAMA,qBAAc,CAAA,IAAA;EAAA,MACpB,OAAS,EAAA,KAAA;EAAA,KACX;EAAA,IAEA,QAAU,EAAA;EAAA,MACR,MAAMA,qBAAc,CAAA,WAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,IAEA,WAAa,EAAA;EAAA,MACX,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,OAAS,EAAA,IAAA;EAAA,KACX;EAAA,IAEA,YAAc,EAAA;EAAA,MACZ,MAAMA,qBAAc,CAAA,MAAA;EAAA,MACpB,OAAS,EAAA,UAAA;EAAA,KACX;EAAA,IAEA,YAAc,EAAA;EAAA,MACZ,MAAMA,qBAAc,CAAA,IAAA;EAAA,MACpB,OAAS,EAAA,KAAA;EAAA,KACX;EAAA,GACF;EAAA,EACA,IAAM,EAAA;EAAA,IAEJ,QAAU,EAAA;EAAA,MACR,MAAMA,qBAAc,CAAA,OAAA;EAAA,MACpB,MAAQ,EAAA;EAAA,QACN,UAAY,EAAA;EAAA,UACV,MAAMA,qBAAc,CAAA,MAAA;EAAA,SACtB;EAAA,QACA,QAAU,EAAA;EAAA,UACR,IAAA,EACEA,sBAAc,MACd,GAAAA,qBAAA,CAAc,MACdA,qBAAc,CAAA,KAAA,GACdA,qBAAc,CAAA,IAAA,GACdA,qBAAc,CAAA,MAAA;EAAA,SAClB;EAAA,OACF;EAAA,KACF;EAAA,IAEA,EAAI,EAAA;EAAA,MACF,MAAMA,qBAAc,CAAA,GAAA;EAAA,KACtB;EAAA,IAEA,cAAgB,EAAA;EAAA,MACd,MAAMA,qBAAc,CAAA,GAAA;EAAA,MACpB,KAAO,EAAA,IAAA;EAAA,KACT;EAAA,GACF;EACF,CAAA,CAAA;EAWA,MAAM,kBAAkD,CAAA;EAAA,EAGtD,YAAoB,OAAkB,EAAA;EAAlB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;EAAA,GAAmB;EAAA,EAFvC,OAAO,IAAO,GAAA,IAAA,CAAA;EAAA,EAId,KAAA,CAAM,iBAA8B,KAAwB,EAAA;EAC1D,IAAI,IAAA,KAAA,CAAM,gBAAgB,IAAM,EAAA;EAC9B,MAAI,IAAA,CAAA,GAAI,MAAM,WAAc,GAAA,IAAA,CAAA;EAAA,KACvB,MAAA;EACL,MAAA,IAAI,CAAI,GAAA,MAAA,CAAA;EAAA,KACV;EAEA,IAAA,IAAI,IAAO,GAAA,EAAA,CAAA;EAEX,IAAQ,IAAA,IAAA,wCAAA,CAAA;EACR,IAAA,IAAA,IACE,qKAEA,CACA,GAAA,kmBAAA,CAAA;EAMF,IAAQ,IAAA,IAAA,UAAA,CAAA;EAGR,IAAI,IAAA,KAAA,CAAM,aAAa,IAAM,EAAA;EAC3B,MACE,IAAA,IAAA,kFAAA,GACA,MAAM,QACN,GAAA,QAAA,CAAA;EAAA,KACJ;EAEA,IAAA,IAAI,MAAM,YAAc,EAAA;EACtB,MAAQ,IAAA,IAAA,wCAAA,CAAA;EAAA,KACH,MAAA;EACL,MAAQ,IAAA,IAAA,2DAAA,CAAA;EAAA,KACV;EAKA,IAAA,IAAI,iBAAiB,EAAC,CAAA;EACtB,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,SAAA,CAAU,QAAQ,CAAK,EAAA,EAAA;EAC/C,MAAA,cAAA,CAAe,KAAK,CAAC,CAAA,CAAA;EAAA,KACvB;EACA,IAAA,IAAI,MAAM,wBAA0B,EAAA;EAClC,MAAA,cAAA,GAAiB,IAAK,CAAA,OAAA,CAAQ,aAAc,CAAA,OAAA,CAAQ,cAAc,CAAA,CAAA;EAAA,KACpE;EAEA,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,SAAA,CAAU,QAAQ,CAAK,EAAA,EAAA;EAC/C,MAAI,IAAA,QAAA,GAAW,KAAM,CAAA,SAAA,CAAU,cAAe,CAAA,CAAA,CAAA,CAAA,CAAA;EAE9C,MAAQ,IAAA,IAAA,iDAAA,GAAoD,SAAS,MAAS,GAAA,UAAA,CAAA;EAE9E,MAAI,IAAA,KAAA,GAAQ,GAAM,GAAA,QAAA,CAAS,MAAO,CAAA,MAAA,CAAA;EAClC,MAAA,IAAI,iBACF,oDACA,GAAA,QAAA,CAAS,IACT,GAAA,uBAAA,GACA,eAAe,CACf,CAAA,GAAA,IAAA,CAAA;EACF,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,QAAS,CAAA,MAAA,CAAO,QAAQ,CAAK,EAAA,EAAA;EAC/C,QAAA,cAAA,IACE,sBACA,KACA,GAAA,+EAAA,GACA,cAAe,CAAA,CAAA,CAAA,GACf,cACA,CACA,GAAA,GAAA,CAAA;EACF,QAAA,IAAI,SAAS,QAAU,EAAA;EACrB,UAAkB,cAAA,IAAA,WAAA,CAAA;EAAA,SACpB;EACA,QAAkB,cAAA,IAAA,GAAA,GAAM,QAAS,CAAA,MAAA,CAAO,CAAK,CAAA,GAAA,eAAA,CAAA;EAAA,OAC/C;EACA,MAAkB,cAAA,IAAA,OAAA,CAAA;EAClB,MAAQ,IAAA,IAAA,cAAA,CAAA;EAAA,KACV;EAGA,IACE,IAAA,IAAA,wGAAA,GACA,MAAM,YACN,GAAA,YAAA,CAAA;EAEF,IAAQ,IAAA,IAAA,SAAA,CAAA;EAER,IAAA,eAAA,CAAgB,SAAY,GAAA,IAAA,CAAA;EAE5B,IAAA,eAAA,CAAgB,cAAc,6BAA6B,CAAA,CAAE,gBAAiB,CAAA,QAAA,EAAU,CAAC,CAAM,KAAA;EAC7F,MAAA,CAAA,CAAE,cAAe,EAAA,CAAA;EAEjB,MAAI,IAAA,OAAA,GAAU,YAAY,GAAI,EAAA,CAAA;EAC9B,MAAA,IAAI,aAAgB,GAAA,IAAA,CAAK,KAAM,CAAA,OAAA,GAAU,SAAS,CAAA,CAAA;EAGlD,MAAA,IAAI,gBAAgB,EAAC,CAAA;EACrB,MAAA,IAAI,UAAU,eAAgB,CAAA,gBAAA;EAAA,QAC5B,yDAAA;EAAA,OACF,CAAA;EACA,MAAA,KAAA,IAAS,KAAQ,GAAA,CAAA,EAAG,KAAQ,GAAA,OAAA,CAAQ,QAAQ,KAAS,EAAA,EAAA;EACnD,QAAI,IAAA,EAAA,GAAK,OAAQ,CAAA,KAAA,CAAA,CAAO,OAAQ,CAAA,YAAA,CAAA,CAAA;EAChC,QAAA,IAAI,KAAK,eAAgB,CAAA,aAAA;EAAA,UACvB,iBAAiB,EAAK,GAAA,YAAA;EAAA,SACxB,CAAA;EACA,QAAA,IAAI,OAAO,IAAM,EAAA;EACf,UAAA,IAAI,QAA4B,GAAA,EAAA,CAAA;EAAA,SAC3B,MAAA;EACL,UAAI,IAAA,QAAA,GAA4B,QAAS,CAAA,EAAA,CAAG,KAAK,CAAA,CAAA;EAAA,SACnD;EACA,QAAA,IAAI,OAAO,EAAC,CAAA;EACZ,QAAA,IAAI,OAAQ,CAAA,KAAA,CAAA,CAAO,UAAW,CAAA,WAAA,CAAA,CAAa,UAAU,EAAI,EAAA;EACvD,UAAA,IAAI,IAAO,GAAA,OAAA,CAAQ,KAAO,CAAA,CAAA,UAAA,CAAW,WAAa,CAAA,CAAA,KAAA,CAAA;EAAA,SAC7C,MAAA;EACL,UAAA,IAAI,IAAO,GAAA,EAAA,CAAA;EAAA,SACb;EACA,QAAA,IAAA,CAAK,IAAQ,CAAA,GAAA,QAAA,CAAA;EACb,QAAO,MAAA,CAAA,MAAA,CAAO,eAAe,IAAI,CAAA,CAAA;EAAA,OACnC;EAGA,MAAA,IAAI,UAAa,GAAA;EAAA,QACf,EAAI,EAAA,aAAA;EAAA,QACJ,QAAU,EAAA,aAAA;EAAA,QACV,cAAA;EAAA,OACF,CAAA;EAGA,MAAK,IAAA,CAAA,OAAA,CAAQ,YAAY,UAAU,CAAA,CAAA;EAAA,KACpC,CAAA,CAAA;EAED,IAAI,IAAA,SAAA,GAAY,YAAY,GAAI,EAAA,CAAA;EAAA,GAClC;EAAA,EAEA,QACE,CAAA,KAAA,EACA,eACA,EAAA,kBAAA,EACA,aACA,EAAA;EACA,IAAA,IAAI,mBAAmB,WAAa,EAAA;EAClC,MAAc,aAAA,EAAA,CAAA;EACd,MAAK,IAAA,CAAA,kBAAA,CAAmB,OAAO,kBAAkB,CAAA,CAAA;EAAA,KACnD;EACA,IAAA,IAAI,mBAAmB,QAAU,EAAA;EAC/B,MAAK,IAAA,CAAA,eAAA,CAAgB,KAAO,EAAA,kBAAA,EAAoB,aAAa,CAAA,CAAA;EAAA,KAC/D;EAAA,GACF;EAAA,EAEQ,sBAAA,CAAuB,OAAwB,kBAAoB,EAAA;EACzE,IAAA,MAAM,gBAAgB,EAAC,CAAA;EACvB,IAAA,IAAI,EAAK,GAAA,GAAA,CAAA;EAET,IAAW,KAAA,MAAA,CAAA,IAAK,MAAM,SAAW,EAAA;EAC/B,MAAM,MAAA,IAAA,GAAO,EAAE,IAAO,GAAA,CAAA,CAAE,OAAO,CAAI,CAAA,EAAA,KAAA,CAAM,SAAU,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAA,CAAA,CAAA;EAC5D,MAAc,aAAA,CAAA,IAAA,CAAA,GAAQ,KAAK,OAAQ,CAAA,aAAA,CAAc,UAAU,CAAG,EAAA,CAAA,CAAE,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;EACjF,MAAM,EAAA,IAAA,IAAA,CAAK,QAAQ,aAAc,CAAA,gBAAA,CAAiB,MAAM,GAAK,EAAA,CAAA,GAAI,KAAK,IAAI,CAAA,CAAA;EAAA,KAC5E;EAEA,IAAA,MAAM,YAAe,GAAA;EAAA,MACnB,QAAU,EAAA,aAAA;EAAA,MACV,EAAA;EAAA,MACA,cAAA,EAAgB,KAAM,CAAA,wBAAA,GAClB,IAAK,CAAA,OAAA,CAAQ,aAAc,CAAA,OAAA,CAAQ,CAAC,GAAG,KAAM,CAAA,KAAA,CAAM,SAAU,CAAA,MAAM,EAAE,IAAK,EAAC,CAAC,CAAA,GAC5E,CAAC,GAAG,KAAM,CAAA,KAAA,CAAM,SAAU,CAAA,MAAM,CAAE,CAAA,IAAA,EAAM,CAAA;EAAA,KAC9C,CAAA;EAEA,IAAA,MAAM,OAAO,IAAK,CAAA,OAAA,CAAQ,SAAU,CAAA,mBAAA,CAAoB,cAAc,kBAAkB,CAAA,CAAA;EAExF,IAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,+BAAgC,CAAA,KAAA,EAAO,IAAI,CAAA,CAAA;EAElE,IAAO,OAAA,IAAA,CAAA;EAAA,GACT;EAAA,EAEQ,kBAAA,CAAmB,OAAwB,kBAAoB,EAAA;EACrE,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;EAElE,IAAK,IAAA,CAAA,OAAA,CAAQ,YAAY,IAAI,CAAA,CAAA;EAAA,GAC/B;EAAA,EAEQ,eAAA,CAAgB,KAAwB,EAAA,kBAAA,EAAoB,aAA2B,EAAA;EAC7F,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,kBAAkB,CAAA,CAAA;EAElE,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,OAAA,CAAQ,iBAAkB,EAAA,CAAA;EAEvD,IAAK,IAAA,CAAA,KAAA,CAAM,iBAAiB,KAAK,CAAA,CAAA;EACjC,IAAc,aAAA,EAAA,CAAA;EAEd,IAAA,MAAM,OAAU,GAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;EAC5C,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,OAAA,CAAQ,QAAQ,CAAK,EAAA,EAAA;EACvC,MAAA,IAAA,CAAK,QAAQ,SAAU,CAAA,WAAA;EAAA,QACrB,eAAgB,CAAA,aAAA;EAAA,UACd,CAA6B,0BAAA,EAAA,OAAA,CAAQ,CAAG,CAAA,CAAA,CAAA,CAAA,CAAA,UAAA,EAAe,QAAQ,CAAG,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA;EAAA,SACpE;EAAA,QAAA,CACE,IAAK,CAAA,EAAA,GAAK,GAAQ,IAAA,OAAA,CAAQ,UAAW,CAAI,GAAA,CAAA,CAAA;EAAA,OAC7C,CAAA;EAAA,KACF;EAEA,IAAA,IAAA,CAAK,QAAQ,SAAU,CAAA,WAAA;EAAA,MACrB,eAAA,CAAgB,cAAc,6BAA6B,CAAA;EAAA,MAC3D,IAAK,CAAA,EAAA;EAAA,KACP,CAAA;EAAA,GACF;EACF;;;;;;;;"}