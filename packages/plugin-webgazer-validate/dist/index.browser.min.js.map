{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import type WebGazerExtension from \"@jspsych/extension-webgazer\";\nimport { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"webgazer-validate\",\n  version: version,\n  parameters: {\n    /** Array of points in [x,y] coordinates */\n    validation_points: {\n      type: ParameterType.INT, // TO DO: nested array, so different type?\n      default: [\n        [10, 10],\n        [10, 50],\n        [10, 90],\n        [50, 10],\n        [50, 50],\n        [50, 90],\n        [90, 10],\n        [90, 50],\n        [90, 90],\n      ],\n      array: true,\n    },\n    /**\n     * Are the validation_points specified as percentages of screen width and height, or the distance in pixels from the center of the screen?\n     * Options are 'percent' and 'center-offset-pixels'\n     */\n    validation_point_coordinates: {\n      type: ParameterType.SELECT,\n      default: \"percent\",\n      options: [\"percent\", \"center-offset-pixels\"],\n    },\n    /** Tolerance around validation point in pixels */\n    roi_radius: {\n      type: ParameterType.INT,\n      default: 200,\n    },\n    /** Whether or not to randomize the order of validation points */\n    randomize_validation_order: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Delay before validating after showing a point */\n    time_to_saccade: {\n      type: ParameterType.INT,\n      default: 1000,\n    },\n    /** Length of time to show each point */\n    validation_duration: {\n      type: ParameterType.INT,\n      default: 2000,\n    },\n    /** Validation point size in pixels */\n    point_size: {\n      type: ParameterType.INT,\n      default: 20,\n    },\n    /** If true, then validation data will be shown on the screen after validation is complete */\n    show_validation_data: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /** Raw gaze data for the trial. The array will contain a nested array for each validation point. Within each nested array will be a list of `{x,y,dx,dy}` values specifying the absolute x and y pixels, as well as the distance from the target for that gaze point. */\n    raw_gaze: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      nested: {\n        x: {\n          type: ParameterType.INT,\n        },\n        y: {\n          type: ParameterType.INT,\n        },\n        dx: {\n          type: ParameterType.INT,\n        },\n        dy: {\n          type: ParameterType.INT,\n        },\n      },\n    },\n    /** The percentage of samples within the `roi_radius` for each validation point. */\n    percent_in_roi: {\n      type: ParameterType.FLOAT,\n      array: true,\n    },\n    /** The average `x` and `y` distance from each validation point, plus the median distance `r` of the points from this average offset. */\n    average_offset: {\n      type: ParameterType.FLOAT,\n      array: true,\n    },\n    /** The average number of samples per second. Calculated by finding samples per second for each point and then averaging these estimates together. */\n    samples_per_sec: {\n      type: ParameterType.FLOAT,\n    },\n    /** The list of validation points, in the order that they appeared. */\n    validation_points: {\n      type: ParameterType.INT,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin can be used to measure the accuracy and precision of gaze predictions made by the\n * [WebGazer extension](../extensions/webgazer.md). For a narrative description of eye tracking with jsPsych,\n * see the [eye tracking overview](../overview/eye-tracking.md).\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/webgazer-validate/ webgazer-validate plugin} and\n * {@link https://www.jspsych.org/latest/overview/eye-tracking/ eye-tracking overview} documentation on jspsych.org\n */\nclass WebgazerValidatePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    const extension = this.jsPsych.extensions.webgazer as WebGazerExtension;\n\n    var trial_data = <any>{};\n    trial_data.raw_gaze = [];\n    trial_data.percent_in_roi = [];\n    trial_data.average_offset = [];\n    trial_data.validation_points = null;\n\n    var html = `\n        <div id='webgazer-validate-container' style='position: relative; width:100vw; height:100vh; overflow: hidden;'>\n        </div>`;\n\n    display_element.innerHTML = html;\n\n    var wg_container = display_element.querySelector(\"#webgazer-validate-container\");\n\n    var points_completed = -1;\n    var val_points = null;\n    var start = performance.now();\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      extension.stopSampleInterval();\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    const validation_display = (pt) => {\n      var pt_html = drawValidationPoint(pt[0], pt[1]);\n      wg_container.innerHTML = pt_html;\n\n      var pt_dom = wg_container.querySelector(\".validation-point\");\n\n      var br = pt_dom.getBoundingClientRect();\n      var x = br.left + br.width / 2;\n      var y = br.top + br.height / 2;\n\n      var pt_start_val = performance.now() + trial.time_to_saccade;\n      var pt_finish = pt_start_val + trial.validation_duration;\n\n      var pt_data = [];\n\n      var cancelGazeUpdate = extension.onGazeUpdate((prediction) => {\n        if (performance.now() > pt_start_val) {\n          pt_data.push({\n            x: prediction.x,\n            y: prediction.y,\n            dx: prediction.x - x,\n            dy: prediction.y - y,\n            t: Math.round(prediction.t - start),\n          });\n        }\n      });\n\n      requestAnimationFrame(function watch_dot() {\n        if (performance.now() < pt_finish) {\n          requestAnimationFrame(watch_dot);\n        } else {\n          trial_data.raw_gaze.push(pt_data);\n          cancelGazeUpdate();\n\n          next_validation_point();\n        }\n      });\n    };\n\n    const next_validation_point = () => {\n      points_completed++;\n      if (points_completed == val_points.length) {\n        validation_done();\n      } else {\n        var pt = val_points[points_completed];\n        validation_display(pt);\n      }\n    };\n\n    const validate = () => {\n      if (trial.randomize_validation_order) {\n        val_points = this.jsPsych.randomization.shuffle(trial.validation_points);\n      } else {\n        val_points = trial.validation_points;\n      }\n      trial_data.validation_points = val_points;\n      points_completed = -1;\n      //extension.resume();\n      extension.startSampleInterval();\n      //extension.showPredictions();\n      next_validation_point();\n    };\n\n    const show_validation_data = () => {\n      var html = \"\";\n      for (var i = 0; i < trial.validation_points.length; i++) {\n        html += drawValidationPoint(trial.validation_points[i][0], trial.validation_points[i][1]);\n        html += drawCircle(\n          trial.validation_points[i][0],\n          trial.validation_points[i][1],\n          0,\n          0,\n          trial.roi_radius\n        );\n        for (var j = 0; j < trial_data.raw_gaze[i].length; j++) {\n          html += drawRawDataPoint(\n            trial.validation_points[i][0],\n            trial.validation_points[i][1],\n            trial_data.raw_gaze[i][j].dx,\n            trial_data.raw_gaze[i][j].dy\n          );\n        }\n      }\n\n      html +=\n        '<button id=\"cont\" style=\"position:absolute; top: 50%; left:calc(50% - 50px); width: 100px;\" class=\"jspsych-btn\">Continue</btn>';\n      wg_container.innerHTML = html;\n      wg_container.querySelector(\"#cont\").addEventListener(\"click\", () => {\n        extension.pause();\n        end_trial();\n      });\n      // turn on webgazer's loop\n      extension.showPredictions();\n      extension.stopSampleInterval();\n      extension.resume();\n    };\n\n    const validation_done = () => {\n      trial_data.samples_per_sec = calculateSampleRate(trial_data.raw_gaze).toFixed(2);\n      for (var i = 0; i < trial.validation_points.length; i++) {\n        trial_data.percent_in_roi[i] = calculatePercentInROI(trial_data.raw_gaze[i]);\n        trial_data.average_offset[i] = calculateGazeCentroid(trial_data.raw_gaze[i]);\n      }\n      if (trial.show_validation_data) {\n        show_validation_data();\n      } else {\n        end_trial();\n      }\n    };\n\n    validate();\n\n    // @ts-expect-error\n    function drawValidationPoint(x, y) {\n      if (trial.validation_point_coordinates == \"percent\") {\n        return drawValidationPoint_PercentMode(x, y);\n      }\n      if (trial.validation_point_coordinates == \"center-offset-pixels\") {\n        return drawValidationPoint_CenterOffsetMode(x, y);\n      }\n    }\n\n    function drawValidationPoint_PercentMode(x, y) {\n      return `<div class=\"validation-point\" style=\"width:${trial.point_size}px; height:${trial.point_size}px; border-radius:${trial.point_size}px; border: 1px solid #000; background-color: #333; position: absolute; left:${x}%; top:${y}%;\"></div>`;\n    }\n\n    function drawValidationPoint_CenterOffsetMode(x, y) {\n      return `<div class=\"validation-point\" style=\"width:${trial.point_size}px; height:${\n        trial.point_size\n      }px; border-radius:${\n        trial.point_size\n      }px; border: 1px solid #000; background-color: #333; position: absolute; left:calc(50% - ${\n        trial.point_size / 2\n      }px + ${x}px); top:calc(50% - ${trial.point_size / 2}px + ${y}px);\"></div>`;\n    }\n\n    // @ts-expect-error\n    function drawCircle(target_x, target_y, dx, dy, r) {\n      if (trial.validation_point_coordinates == \"percent\") {\n        return drawCircle_PercentMode(target_x, target_y, dx, dy, r);\n      }\n      if (trial.validation_point_coordinates == \"center-offset-pixels\") {\n        return drawCircle_CenterOffsetMode(target_x, target_y, dx, dy, r);\n      }\n    }\n\n    function drawCircle_PercentMode(target_x, target_y, dx, dy, r) {\n      var html = `\n          <div class=\"validation-centroid\" style=\"width:${r * 2}px; height:${\n        r * 2\n      }px; border: 2px dotted #ccc; border-radius: ${r}px; background-color: transparent; position: absolute; left:calc(${target_x}% + ${\n        dx - r\n      }px); top:calc(${target_y}% + ${dy - r}px);\"></div>\n        `;\n      return html;\n    }\n\n    function drawCircle_CenterOffsetMode(target_x, target_y, dx, dy, r) {\n      var html = `\n          <div class=\"validation-centroid\" style=\"width:${r * 2}px; height:${\n        r * 2\n      }px; border: 2px dotted #ccc; border-radius: ${r}px; background-color: transparent; position: absolute; left:calc(50% + ${target_x}px + ${\n        dx - r\n      }px); top:calc(50% + ${target_y}px + ${dy - r}px);\"></div>\n        `;\n      return html;\n    }\n\n    // @ts-expect-error\n    function drawRawDataPoint(target_x, target_y, dx, dy) {\n      if (trial.validation_point_coordinates == \"percent\") {\n        return drawRawDataPoint_PercentMode(target_x, target_y, dx, dy);\n      }\n      if (trial.validation_point_coordinates == \"center-offset-pixels\") {\n        return drawRawDataPoint_CenterOffsetMode(target_x, target_y, dx, dy);\n      }\n    }\n\n    function drawRawDataPoint_PercentMode(target_x, target_y, dx, dy) {\n      var color = Math.sqrt(dx * dx + dy * dy) <= trial.roi_radius ? \"#afa\" : \"#faa\";\n      return `<div class=\"raw-data-point\" style=\"width:5px; height:5px; border-radius:5px; background-color: ${color}; opacity:0.8; position: absolute; left:calc(${target_x}% + ${\n        dx - 2\n      }px); top:calc(${target_y}% + ${dy - 2}px);\"></div>`;\n    }\n\n    function drawRawDataPoint_CenterOffsetMode(target_x, target_y, dx, dy) {\n      var color = Math.sqrt(dx * dx + dy * dy) <= trial.roi_radius ? \"#afa\" : \"#faa\";\n      return `<div class=\"raw-data-point\" style=\"width:5px; height:5px; border-radius:5px; background-color: ${color}; opacity:0.8; position: absolute; left:calc(50% + ${target_x}px + ${\n        dx - 2\n      }px); top:calc(50% + ${target_y}px + ${dy - 2}px);\"></div>`;\n    }\n\n    function median(arr) {\n      var mid = Math.floor(arr.length / 2);\n      var sorted_arr = arr.sort((a, b) => a - b);\n      if (arr.length % 2 == 0) {\n        return sorted_arr[mid - 1] + sorted_arr[mid] / 2;\n      } else {\n        return sorted_arr[mid];\n      }\n    }\n\n    function calculateGazeCentroid(gazeData) {\n      var x_diff_m = gazeData.reduce((accumulator, currentValue, index) => {\n        accumulator += currentValue.dx;\n        if (index == gazeData.length - 1) {\n          return accumulator / gazeData.length;\n        } else {\n          return accumulator;\n        }\n      }, 0);\n\n      var y_diff_m = gazeData.reduce((accumulator, currentValue, index) => {\n        accumulator += currentValue.dy;\n        if (index == gazeData.length - 1) {\n          return accumulator / gazeData.length;\n        } else {\n          return accumulator;\n        }\n      }, 0);\n\n      var median_distance = median(\n        gazeData.map((x) => Math.sqrt(Math.pow(x.dx - x_diff_m, 2) + Math.pow(x.dy - y_diff_m, 2)))\n      );\n\n      return {\n        x: x_diff_m,\n        y: y_diff_m,\n        r: median_distance,\n      };\n    }\n\n    function calculatePercentInROI(gazeData) {\n      var distances = gazeData.map((p) => Math.sqrt(Math.pow(p.dx, 2) + Math.pow(p.dy, 2)));\n      var sum_in_roi = distances.reduce((accumulator, currentValue) => {\n        if (currentValue <= trial.roi_radius) {\n          accumulator++;\n        }\n        return accumulator;\n      }, 0);\n      var percent = (sum_in_roi / gazeData.length) * 100;\n      return percent;\n    }\n\n    function calculateSampleRate(gazeData) {\n      var mean_diff = [];\n      if (gazeData.length == 0) {\n        return 0;\n      }\n      for (var i = 0; i < gazeData.length; i++) {\n        if (gazeData[i].length > 1) {\n          var t_diff = [];\n          for (var j = 1; j < gazeData[i].length; j++) {\n            t_diff.push(gazeData[i][j].t - gazeData[i][j - 1].t);\n          }\n          mean_diff.push(t_diff.reduce((a, b) => a + b, 0) / t_diff.length);\n        }\n      }\n      if (mean_diff.length > 0) {\n        return 1000 / (mean_diff.reduce((a, b) => a + b, 0) / mean_diff.length);\n      } else {\n        return null;\n      }\n    }\n  }\n}\n\nexport default WebgazerValidatePlugin;\n"],"names":["info","version","ParameterType","WebgazerValidatePlugin","jsPsych","display_element","trial","extension","trial_data","html","wg_container","points_completed","val_points","start","end_trial","validation_display","pt","pt_html","drawValidationPoint","pt_dom","br","x","y","pt_start_val","pt_finish","pt_data","cancelGazeUpdate","prediction","watch_dot","next_validation_point","validation_done","validate","show_validation_data","i","drawCircle","j","drawRawDataPoint","calculateSampleRate","calculatePercentInROI","calculateGazeCentroid","drawValidationPoint_PercentMode","drawValidationPoint_CenterOffsetMode","target_x","target_y","dx","dy","r","drawCircle_PercentMode","drawCircle_CenterOffsetMode","drawRawDataPoint_PercentMode","drawRawDataPoint_CenterOffsetMode","color","median","arr","mid","sorted_arr","a","b","gazeData","x_diff_m","accumulator","currentValue","index","y_diff_m","median_distance","distances","p","sum_in_roi","percent","mean_diff","t_diff"],"mappings":"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"}