{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import type WebGazerExtension from \"@jspsych/extension-webgazer\";\nimport { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"webgazer-validate\",\n  version: version,\n  parameters: {\n    /** Array of points in [x,y] coordinates */\n    validation_points: {\n      type: ParameterType.INT, // TO DO: nested array, so different type?\n      default: [\n        [10, 10],\n        [10, 50],\n        [10, 90],\n        [50, 10],\n        [50, 50],\n        [50, 90],\n        [90, 10],\n        [90, 50],\n        [90, 90],\n      ],\n      array: true,\n    },\n    /**\n     * Are the validation_points specified as percentages of screen width and height, or the distance in pixels from the center of the screen?\n     * Options are 'percent' and 'center-offset-pixels'\n     */\n    validation_point_coordinates: {\n      type: ParameterType.SELECT,\n      default: \"percent\",\n      options: [\"percent\", \"center-offset-pixels\"],\n    },\n    /** Tolerance around validation point in pixels */\n    roi_radius: {\n      type: ParameterType.INT,\n      default: 200,\n    },\n    /** Whether or not to randomize the order of validation points */\n    randomize_validation_order: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Delay before validating after showing a point */\n    time_to_saccade: {\n      type: ParameterType.INT,\n      default: 1000,\n    },\n    /** Length of time to show each point */\n    validation_duration: {\n      type: ParameterType.INT,\n      default: 2000,\n    },\n    /** Validation point size in pixels */\n    point_size: {\n      type: ParameterType.INT,\n      default: 20,\n    },\n    /** If true, then validation data will be shown on the screen after validation is complete */\n    show_validation_data: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /** Raw gaze data for the trial. The array will contain a nested array for each validation point. Within each nested array will be a list of `{x,y,dx,dy}` values specifying the absolute x and y pixels, as well as the distance from the target for that gaze point. */\n    raw_gaze: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      nested: {\n        x: {\n          type: ParameterType.INT,\n        },\n        y: {\n          type: ParameterType.INT,\n        },\n        dx: {\n          type: ParameterType.INT,\n        },\n        dy: {\n          type: ParameterType.INT,\n        },\n      },\n    },\n    /** The percentage of samples within the `roi_radius` for each validation point. */\n    percent_in_roi: {\n      type: ParameterType.FLOAT,\n      array: true,\n    },\n    /** The average `x` and `y` distance from each validation point, plus the median distance `r` of the points from this average offset. */\n    average_offset: {\n      type: ParameterType.FLOAT,\n      array: true,\n    },\n    /** The average number of samples per second. Calculated by finding samples per second for each point and then averaging these estimates together. */\n    samples_per_sec: {\n      type: ParameterType.FLOAT,\n    },\n    /** The list of validation points, in the order that they appeared. */\n    validation_points: {\n      type: ParameterType.INT,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin can be used to measure the accuracy and precision of gaze predictions made by the\n * [WebGazer extension](../extensions/webgazer.md). For a narrative description of eye tracking with jsPsych,\n * see the [eye tracking overview](../overview/eye-tracking.md).\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/webgazer-validate/ webgazer-validate plugin} and\n * {@link https://www.jspsych.org/latest/overview/eye-tracking/ eye-tracking overview} documentation on jspsych.org\n */\nclass WebgazerValidatePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    const extension = this.jsPsych.extensions.webgazer as WebGazerExtension;\n\n    var trial_data = <any>{};\n    trial_data.raw_gaze = [];\n    trial_data.percent_in_roi = [];\n    trial_data.average_offset = [];\n    trial_data.validation_points = null;\n\n    var html = `\n        <div id='webgazer-validate-container' style='position: relative; width:100vw; height:100vh; overflow: hidden;'>\n        </div>`;\n\n    display_element.innerHTML = html;\n\n    var wg_container = display_element.querySelector(\"#webgazer-validate-container\");\n\n    var points_completed = -1;\n    var val_points = null;\n    var start = performance.now();\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      extension.stopSampleInterval();\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    const validation_display = (pt) => {\n      var pt_html = drawValidationPoint(pt[0], pt[1]);\n      wg_container.innerHTML = pt_html;\n\n      var pt_dom = wg_container.querySelector(\".validation-point\");\n\n      var br = pt_dom.getBoundingClientRect();\n      var x = br.left + br.width / 2;\n      var y = br.top + br.height / 2;\n\n      var pt_start_val = performance.now() + trial.time_to_saccade;\n      var pt_finish = pt_start_val + trial.validation_duration;\n\n      var pt_data = [];\n\n      var cancelGazeUpdate = extension.onGazeUpdate((prediction) => {\n        if (performance.now() > pt_start_val) {\n          pt_data.push({\n            x: prediction.x,\n            y: prediction.y,\n            dx: prediction.x - x,\n            dy: prediction.y - y,\n            t: Math.round(prediction.t - start),\n          });\n        }\n      });\n\n      requestAnimationFrame(function watch_dot() {\n        if (performance.now() < pt_finish) {\n          requestAnimationFrame(watch_dot);\n        } else {\n          trial_data.raw_gaze.push(pt_data);\n          cancelGazeUpdate();\n\n          next_validation_point();\n        }\n      });\n    };\n\n    const next_validation_point = () => {\n      points_completed++;\n      if (points_completed == val_points.length) {\n        validation_done();\n      } else {\n        var pt = val_points[points_completed];\n        validation_display(pt);\n      }\n    };\n\n    const validate = () => {\n      if (trial.randomize_validation_order) {\n        val_points = this.jsPsych.randomization.shuffle(trial.validation_points);\n      } else {\n        val_points = trial.validation_points;\n      }\n      trial_data.validation_points = val_points;\n      points_completed = -1;\n      //extension.resume();\n      extension.startSampleInterval();\n      //extension.showPredictions();\n      next_validation_point();\n    };\n\n    const show_validation_data = () => {\n      var html = \"\";\n      for (var i = 0; i < trial.validation_points.length; i++) {\n        html += drawValidationPoint(trial.validation_points[i][0], trial.validation_points[i][1]);\n        html += drawCircle(\n          trial.validation_points[i][0],\n          trial.validation_points[i][1],\n          0,\n          0,\n          trial.roi_radius\n        );\n        for (var j = 0; j < trial_data.raw_gaze[i].length; j++) {\n          html += drawRawDataPoint(\n            trial.validation_points[i][0],\n            trial.validation_points[i][1],\n            trial_data.raw_gaze[i][j].dx,\n            trial_data.raw_gaze[i][j].dy\n          );\n        }\n      }\n\n      html +=\n        '<button id=\"cont\" style=\"position:absolute; top: 50%; left:calc(50% - 50px); width: 100px;\" class=\"jspsych-btn\">Continue</btn>';\n      wg_container.innerHTML = html;\n      wg_container.querySelector(\"#cont\").addEventListener(\"click\", () => {\n        extension.pause();\n        end_trial();\n      });\n      // turn on webgazer's loop\n      extension.showPredictions();\n      extension.stopSampleInterval();\n      extension.resume();\n    };\n\n    const validation_done = () => {\n      trial_data.samples_per_sec = calculateSampleRate(trial_data.raw_gaze).toFixed(2);\n      for (var i = 0; i < trial.validation_points.length; i++) {\n        trial_data.percent_in_roi[i] = calculatePercentInROI(trial_data.raw_gaze[i]);\n        trial_data.average_offset[i] = calculateGazeCentroid(trial_data.raw_gaze[i]);\n      }\n      if (trial.show_validation_data) {\n        show_validation_data();\n      } else {\n        end_trial();\n      }\n    };\n\n    validate();\n\n    // @ts-expect-error\n    function drawValidationPoint(x, y) {\n      if (trial.validation_point_coordinates == \"percent\") {\n        return drawValidationPoint_PercentMode(x, y);\n      }\n      if (trial.validation_point_coordinates == \"center-offset-pixels\") {\n        return drawValidationPoint_CenterOffsetMode(x, y);\n      }\n    }\n\n    function drawValidationPoint_PercentMode(x, y) {\n      return `<div class=\"validation-point\" style=\"width:${trial.point_size}px; height:${trial.point_size}px; border-radius:${trial.point_size}px; border: 1px solid #000; background-color: #333; position: absolute; left:${x}%; top:${y}%;\"></div>`;\n    }\n\n    function drawValidationPoint_CenterOffsetMode(x, y) {\n      return `<div class=\"validation-point\" style=\"width:${trial.point_size}px; height:${\n        trial.point_size\n      }px; border-radius:${\n        trial.point_size\n      }px; border: 1px solid #000; background-color: #333; position: absolute; left:calc(50% - ${\n        trial.point_size / 2\n      }px + ${x}px); top:calc(50% - ${trial.point_size / 2}px + ${y}px);\"></div>`;\n    }\n\n    // @ts-expect-error\n    function drawCircle(target_x, target_y, dx, dy, r) {\n      if (trial.validation_point_coordinates == \"percent\") {\n        return drawCircle_PercentMode(target_x, target_y, dx, dy, r);\n      }\n      if (trial.validation_point_coordinates == \"center-offset-pixels\") {\n        return drawCircle_CenterOffsetMode(target_x, target_y, dx, dy, r);\n      }\n    }\n\n    function drawCircle_PercentMode(target_x, target_y, dx, dy, r) {\n      var html = `\n          <div class=\"validation-centroid\" style=\"width:${r * 2}px; height:${\n        r * 2\n      }px; border: 2px dotted #ccc; border-radius: ${r}px; background-color: transparent; position: absolute; left:calc(${target_x}% + ${\n        dx - r\n      }px); top:calc(${target_y}% + ${dy - r}px);\"></div>\n        `;\n      return html;\n    }\n\n    function drawCircle_CenterOffsetMode(target_x, target_y, dx, dy, r) {\n      var html = `\n          <div class=\"validation-centroid\" style=\"width:${r * 2}px; height:${\n        r * 2\n      }px; border: 2px dotted #ccc; border-radius: ${r}px; background-color: transparent; position: absolute; left:calc(50% + ${target_x}px + ${\n        dx - r\n      }px); top:calc(50% + ${target_y}px + ${dy - r}px);\"></div>\n        `;\n      return html;\n    }\n\n    // @ts-expect-error\n    function drawRawDataPoint(target_x, target_y, dx, dy) {\n      if (trial.validation_point_coordinates == \"percent\") {\n        return drawRawDataPoint_PercentMode(target_x, target_y, dx, dy);\n      }\n      if (trial.validation_point_coordinates == \"center-offset-pixels\") {\n        return drawRawDataPoint_CenterOffsetMode(target_x, target_y, dx, dy);\n      }\n    }\n\n    function drawRawDataPoint_PercentMode(target_x, target_y, dx, dy) {\n      var color = Math.sqrt(dx * dx + dy * dy) <= trial.roi_radius ? \"#afa\" : \"#faa\";\n      return `<div class=\"raw-data-point\" style=\"width:5px; height:5px; border-radius:5px; background-color: ${color}; opacity:0.8; position: absolute; left:calc(${target_x}% + ${\n        dx - 2\n      }px); top:calc(${target_y}% + ${dy - 2}px);\"></div>`;\n    }\n\n    function drawRawDataPoint_CenterOffsetMode(target_x, target_y, dx, dy) {\n      var color = Math.sqrt(dx * dx + dy * dy) <= trial.roi_radius ? \"#afa\" : \"#faa\";\n      return `<div class=\"raw-data-point\" style=\"width:5px; height:5px; border-radius:5px; background-color: ${color}; opacity:0.8; position: absolute; left:calc(50% + ${target_x}px + ${\n        dx - 2\n      }px); top:calc(50% + ${target_y}px + ${dy - 2}px);\"></div>`;\n    }\n\n    function median(arr) {\n      var mid = Math.floor(arr.length / 2);\n      var sorted_arr = arr.sort((a, b) => a - b);\n      if (arr.length % 2 == 0) {\n        return sorted_arr[mid - 1] + sorted_arr[mid] / 2;\n      } else {\n        return sorted_arr[mid];\n      }\n    }\n\n    function calculateGazeCentroid(gazeData) {\n      var x_diff_m = gazeData.reduce((accumulator, currentValue, index) => {\n        accumulator += currentValue.dx;\n        if (index == gazeData.length - 1) {\n          return accumulator / gazeData.length;\n        } else {\n          return accumulator;\n        }\n      }, 0);\n\n      var y_diff_m = gazeData.reduce((accumulator, currentValue, index) => {\n        accumulator += currentValue.dy;\n        if (index == gazeData.length - 1) {\n          return accumulator / gazeData.length;\n        } else {\n          return accumulator;\n        }\n      }, 0);\n\n      var median_distance = median(\n        gazeData.map((x) => Math.sqrt(Math.pow(x.dx - x_diff_m, 2) + Math.pow(x.dy - y_diff_m, 2)))\n      );\n\n      return {\n        x: x_diff_m,\n        y: y_diff_m,\n        r: median_distance,\n      };\n    }\n\n    function calculatePercentInROI(gazeData) {\n      var distances = gazeData.map((p) => Math.sqrt(Math.pow(p.dx, 2) + Math.pow(p.dy, 2)));\n      var sum_in_roi = distances.reduce((accumulator, currentValue) => {\n        if (currentValue <= trial.roi_radius) {\n          accumulator++;\n        }\n        return accumulator;\n      }, 0);\n      var percent = (sum_in_roi / gazeData.length) * 100;\n      return percent;\n    }\n\n    function calculateSampleRate(gazeData) {\n      var mean_diff = [];\n      if (gazeData.length == 0) {\n        return 0;\n      }\n      for (var i = 0; i < gazeData.length; i++) {\n        if (gazeData[i].length > 1) {\n          var t_diff = [];\n          for (var j = 1; j < gazeData[i].length; j++) {\n            t_diff.push(gazeData[i][j].t - gazeData[i][j - 1].t);\n          }\n          mean_diff.push(t_diff.reduce((a, b) => a + b, 0) / t_diff.length);\n        }\n      }\n      if (mean_diff.length > 0) {\n        return 1000 / (mean_diff.reduce((a, b) => a + b, 0) / mean_diff.length);\n      } else {\n        return null;\n      }\n    }\n  }\n}\n\nexport default WebgazerValidatePlugin;\n"],"names":["version","html"],"mappings":"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"}