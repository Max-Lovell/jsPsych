var jsPsychImageKeyboardResponse = (function (r) {
  "use strict";
  var y = {
    name: "@jspsych/plugin-image-keyboard-response",
    version: "2.0.0",
    description: "jsPsych plugin for displaying a stimulus and getting a keyboard response",
    type: "module",
    main: "dist/index.cjs",
    exports: { import: "./dist/index.js", require: "./dist/index.cjs" },
    typings: "dist/index.d.ts",
    unpkg: "dist/index.browser.min.js",
    files: ["src", "dist"],
    source: "src/index.ts",
    scripts: {
      test: "jest",
      "test:watch": "npm test -- --watch",
      tsc: "tsc",
      build: "rollup --config",
      "build:watch": "npm run build -- --watch",
    },
    repository: {
      type: "git",
      url: "git+https://github.com/jspsych/jsPsych.git",
      directory: "packages/plugin-image-keyboard-response",
    },
    author: "Josh de Leeuw",
    license: "MIT",
    bugs: { url: "https://github.com/jspsych/jsPsych/issues" },
    homepage: "https://www.jspsych.org/latest/plugins/image-keyboard-response",
    peerDependencies: { jspsych: ">=7.1.0" },
    devDependencies: { "@jspsych/config": "^3.0.0", "@jspsych/test-utils": "^1.2.0" },
  };
  const _ = {
    name: "image-keyboard-response",
    version: y.version,
    parameters: {
      stimulus: { type: r.ParameterType.IMAGE, default: void 0 },
      stimulus_height: { type: r.ParameterType.INT, default: null },
      stimulus_width: { type: r.ParameterType.INT, default: null },
      maintain_aspect_ratio: { type: r.ParameterType.BOOL, default: !0 },
      choices: { type: r.ParameterType.KEYS, default: "ALL_KEYS" },
      prompt: { type: r.ParameterType.HTML_STRING, default: null },
      stimulus_duration: { type: r.ParameterType.INT, default: null },
      trial_duration: { type: r.ParameterType.INT, default: null },
      response_ends_trial: { type: r.ParameterType.BOOL, default: !0 },
      render_on_canvas: { type: r.ParameterType.BOOL, default: !0 },
    },
    data: {
      stimulus: { type: r.ParameterType.STRING },
      response: { type: r.ParameterType.STRING },
      rt: { type: r.ParameterType.INT },
    },
  };
  class m {
    constructor(e) {
      this.jsPsych = e;
    }
    trial(e, t) {
      var s, i;
      if (t.render_on_canvas) {
        var u = !1;
        if (e.hasChildNodes()) for (; e.firstChild; ) e.removeChild(e.firstChild);
        var l = document.createElement("canvas");
        (l.id = "jspsych-image-keyboard-response-stimulus"),
          (l.style.margin = "0"),
          (l.style.padding = "0");
        var d = l.getContext("2d"),
          a = new Image();
        (a.onload = () => {
          u || (n(), d.drawImage(a, 0, 0, i, s));
        }),
          (a.src = t.stimulus);
        const n = () => {
          t.stimulus_height !== null
            ? ((s = t.stimulus_height),
              t.stimulus_width == null &&
                t.maintain_aspect_ratio &&
                (i = a.naturalWidth * (t.stimulus_height / a.naturalHeight)))
            : (s = a.naturalHeight),
            t.stimulus_width !== null
              ? ((i = t.stimulus_width),
                t.stimulus_height == null &&
                  t.maintain_aspect_ratio &&
                  (s = a.naturalHeight * (t.stimulus_width / a.naturalWidth)))
              : (t.stimulus_height !== null && t.maintain_aspect_ratio) || (i = a.naturalWidth),
            (l.height = s),
            (l.width = i);
        };
        n(),
          e.insertBefore(l, null),
          a.complete &&
            Number.isFinite(i) &&
            Number.isFinite(s) &&
            (d.drawImage(a, 0, 0, i, s), (u = !0)),
          t.prompt !== null && e.insertAdjacentHTML("beforeend", t.prompt);
      } else {
        var p = '<img src="' + t.stimulus + '" id="jspsych-image-keyboard-response-stimulus">';
        t.prompt !== null && (p += t.prompt), (e.innerHTML = p);
        var a = e.querySelector("#jspsych-image-keyboard-response-stimulus");
        t.stimulus_height !== null
          ? ((s = t.stimulus_height),
            t.stimulus_width == null &&
              t.maintain_aspect_ratio &&
              (i = a.naturalWidth * (t.stimulus_height / a.naturalHeight)))
          : (s = a.naturalHeight),
          t.stimulus_width !== null
            ? ((i = t.stimulus_width),
              t.stimulus_height == null &&
                t.maintain_aspect_ratio &&
                (s = a.naturalHeight * (t.stimulus_width / a.naturalWidth)))
            : (t.stimulus_height !== null && t.maintain_aspect_ratio) || (i = a.naturalWidth),
          (a.style.height = s.toString() + "px"),
          (a.style.width = i.toString() + "px");
      }
      var o = { rt: null, key: null };
      const h = () => {
        typeof c != "undefined" && this.jsPsych.pluginAPI.cancelKeyboardResponse(c);
        var n = { rt: o.rt, stimulus: t.stimulus, response: o.key };
        this.jsPsych.finishTrial(n);
      };
      var g = (n) => {
        (e.querySelector("#jspsych-image-keyboard-response-stimulus").className += " responded"),
          o.key == null && (o = n),
          t.response_ends_trial && h();
      };
      if (t.choices != "NO_KEYS")
        var c = this.jsPsych.pluginAPI.getKeyboardResponse({
          callback_function: g,
          valid_responses: t.choices,
          rt_method: "performance",
          persist: !1,
          allow_held_key: !1,
        });
      t.stimulus_duration !== null &&
        this.jsPsych.pluginAPI.setTimeout(() => {
          e.querySelector("#jspsych-image-keyboard-response-stimulus").style.visibility = "hidden";
        }, t.stimulus_duration),
        t.trial_duration !== null
          ? this.jsPsych.pluginAPI.setTimeout(() => {
              h();
            }, t.trial_duration)
          : t.response_ends_trial === !1 &&
            console.warn(
              "The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true."
            );
    }
    simulate(e, t, s, i) {
      t == "data-only" && (i(), this.simulate_data_only(e, s)),
        t == "visual" && this.simulate_visual(e, s, i);
    }
    simulate_data_only(e, t) {
      const s = this.create_simulation_data(e, t);
      this.jsPsych.finishTrial(s);
    }
    simulate_visual(e, t, s) {
      const i = this.create_simulation_data(e, t),
        u = this.jsPsych.getDisplayElement();
      this.trial(u, e), s(), i.rt !== null && this.jsPsych.pluginAPI.pressKey(i.response, i.rt);
    }
    create_simulation_data(e, t) {
      const s = {
          stimulus: e.stimulus,
          rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 0.006666666666666667, !0),
          response: this.jsPsych.pluginAPI.getValidKey(e.choices),
        },
        i = this.jsPsych.pluginAPI.mergeSimulationData(s, t);
      return this.jsPsych.pluginAPI.ensureSimulationDataConsistency(e, i), i;
    }
  }
  return (m.info = _), m;
})(jsPsychModule);
//# sourceMappingURL=index.browser.min.js.map
