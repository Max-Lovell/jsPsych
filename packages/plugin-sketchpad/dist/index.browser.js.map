{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"sketchpad\",\n  version: version,\n  parameters: {\n    /**\n     * The shape of the canvas element. Accepts `'rectangle'` or `'circle'`\n     */\n    canvas_shape: {\n      type: ParameterType.STRING,\n      default: \"rectangle\",\n    },\n    /**\n     * Width of the canvas in pixels when `canvas_shape` is a `\"rectangle\"`.\n     */\n    canvas_width: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /**\n     * Height of the canvas in pixels when `canvas_shape` is a `\"rectangle\"`.\n     */\n    canvas_height: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /**\n     * Diameter of the canvas (when `canvas_shape` is `'circle'`) in pixels.\n     */\n    canvas_diameter: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /**\n     * This width of the border around the canvas element\n     */\n    canvas_border_width: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /**\n     * The color of the border around the canvas element.\n     */\n    canvas_border_color: {\n      type: ParameterType.STRING,\n      default: \"#000\",\n    },\n    /**\n     * Path to an image to render as the background of the canvas.\n     */\n    background_image: {\n      type: ParameterType.IMAGE,\n      default: null,\n    },\n    /**\n     * Color of the canvas background. Note that a `background_image` will render on top of the color.\n     */\n    background_color: {\n      type: ParameterType.STRING,\n      default: \"#ffffff\",\n    },\n    /**\n     * The width of the strokes on the canvas.\n     */\n    stroke_width: {\n      type: ParameterType.INT,\n      default: 2,\n    },\n    /**\n     * The color of the stroke on the canvas.\n     */\n    stroke_color: {\n      type: ParameterType.STRING,\n      default: \"#000000\",\n    },\n    /**\n     * Array of colors to render as a palette of choices for stroke color. Clicking on the corresponding color button will change the stroke color.\n     */\n    stroke_color_palette: {\n      type: ParameterType.STRING,\n      array: true,\n      default: [],\n    },\n    /**\n     * HTML content to render above or below the canvas (use `prompt_location` parameter to change location).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /**\n     * Location of the `prompt` content. Can be 'abovecanvas' or 'belowcanvas' or 'belowbutton'.\n     */\n    prompt_location: {\n      type: ParameterType.STRING,\n      default: \"abovecanvas\",\n    },\n    /**\n     * Whether to save the final image in the data as a base64 encoded data URL.\n     */\n    save_final_image: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * Whether to save the individual stroke data that generated the final image.\n     */\n    save_strokes: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * If this key is held down then it is like the mouse button being held down.\n     * The \"ink\" will flow when the button is held and stop when it is lifted.\n     * Pass in the string representation of the key, e.g., `'a'` for the A key\n     * or `' '` for the spacebar.\n     */\n    key_to_draw: {\n      type: ParameterType.KEY,\n      default: null,\n    },\n    /**\n     * Whether to show the button that ends the trial.\n     */\n    show_finished_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * The label for the button that ends the trial.\n     */\n    finished_button_label: {\n      type: ParameterType.STRING,\n      default: \"Finished\",\n    },\n    /**\n     * Whether to show the button that clears the entire drawing.\n     */\n    show_clear_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * The label for the button that clears the entire drawing.\n     */\n    clear_button_label: {\n      type: ParameterType.STRING,\n      default: \"Clear\",\n    },\n    /**\n     * Whether to show the button that enables an undo action.\n     */\n    show_undo_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * The label for the button that performs an undo action.\n     */\n    undo_button_label: {\n      type: ParameterType.STRING,\n      default: \"Undo\",\n    },\n    /**\n     * Whether to show the button that enables an redo action. `show_undo_button` must also\n     * be `true` for the redo button to show.\n     */\n    show_redo_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * The label for the button that performs an redo action.\n     */\n    redo_button_label: {\n      type: ParameterType.STRING,\n      default: \"Redo\",\n    },\n    /**\n     * This array contains the key(s) that the participant is allowed to press in order to end\n     * the trial. Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`,\n     * `'ArrowDown'`) - see [this page](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)\n     * and [this page (event.key column)](https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/)\n     * for more examples. Any key presses that are not listed in the array will be ignored. The default value of `\"NO_KEYS\"`\n     * means that no keys will be accepted as valid responses. Specifying `\"ALL_KEYS\"` will mean that all responses are allowed.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"NO_KEYS\",\n    },\n    /**\n     * Length of time before the trial ends. If `null` the trial will continue indefinitely\n     * (until another way of ending the trial occurs).\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /**\n     * Whether to show a timer that counts down until the end of the trial when `trial_duration` is not `null`.\n     */\n    show_countdown_trial_duration: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /**\n     * The HTML to use for rendering the countdown timer. The element with `id=\"sketchpad-timer\"`\n     * will have its content replaced by a countdown timer in the format `MM:SS`.\n     */\n    countdown_timer_html: {\n      type: ParameterType.HTML_STRING,\n      default: `<span id=\"sketchpad-timer\"></span> remaining`,\n    },\n  },\n  data: {\n    /** The length of time from the start of the trial to the end of the trial. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** If the trial was ended by clicking the finished button, then `\"button\"`. If the trial was ended by pressing a key, then the key that was pressed. If the trial timed out, then `null`. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** If `save_final_image` is true, then this will contain the base64 encoded data URL for the image, in png format. */\n    png: {\n      type: ParameterType.STRING,\n    },\n    /** If `save_strokes` is true, then this will contain an array of stroke objects. Objects have an `action` property that is either `\"start\"`, `\"move\"`, or `\"end\"`. If `action` is `\"start\"` or `\"move\"` it will have an `x` and `y` property that report the coordinates of the action relative to the upper-left corner of the canvas. If `action` is `\"start\"` then the object will also have a `t` and `color` property, specifying the time of the action relative to the onset of the trial (ms) and the color of the stroke. If `action` is `\"end\"` then it will only have a `t` property. */\n    strokes: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      parameters: {\n        action: {\n          type: ParameterType.STRING,\n        },\n        x: {\n          type: ParameterType.INT,\n          optional: true,\n        },\n        y: {\n          type: ParameterType.INT,\n          optional: true,\n        },\n        t: {\n          type: ParameterType.INT,\n          optional: true,\n        },\n        color: {\n          type: ParameterType.STRING,\n          optional: true,\n        },\n      },\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin creates an interactive canvas that the participant can draw on using their mouse or touchscreen.\n * It can be used for sketching tasks, like asking the participant to draw a particular object.\n * It can also be used for some image segmentation or annotation tasks by setting the `background_image` parameter to render an image on the canvas.\n *\n * The plugin stores a [base 64 data URL representation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) of the final image.\n * This can be converted to an image file using [online tools](https://www.google.com/search?q=base64+image+decoder) or short programs in [R](https://stackoverflow.com/q/58604195/3726673), [python](https://stackoverflow.com/q/2323128/3726673), or another language of your choice.\n * It also records all of the individual strokes that the participant made during the trial.\n *\n * !!! warning\n *     This plugin generates **a lot** of data. Each trial can easily add 500kb+ of data to a final JSON output.\n *     You can reduce the amount of data generated by turning off storage of the individual stroke data (`save_strokes: false`) or storage of the final image (`save_final_image: false`) if your use case doesn't require that information.\n *     If you are going to be collecting a lot of data with this plugin you may want to save your data to your server after each trial and not wait until the end of the experiment to perform a single bulk upload.\n *     You can do this by putting data saving code inside the [`on_data_update` event handler](../overview/events.md#on_data_update).\n *\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/sketchpad/ sketchpad plugin documentation on jspsych.org}\n */\nclass SketchpadPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private display: HTMLElement;\n  private params: TrialType<Info>;\n  private sketchpad: HTMLCanvasElement;\n  private is_drawing = false;\n  private ctx: CanvasRenderingContext2D;\n  private trial_finished_handler;\n  private background_image;\n  private strokes = [];\n  private stroke = [];\n  private undo_history = [];\n  private current_stroke_color;\n  private start_time;\n  private mouse_position = { x: 0, y: 0 };\n  private draw_key_held = false;\n  private timer_interval;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    this.display = display_element;\n    this.params = trial;\n    this.current_stroke_color = trial.stroke_color;\n\n    this.init_display();\n\n    this.setup_event_listeners();\n\n    this.add_background_color();\n    this.add_background_image().then(() => {\n      on_load();\n    });\n\n    this.start_time = performance.now();\n    this.set_trial_duration_timer();\n\n    return new Promise((resolve, reject) => {\n      this.trial_finished_handler = resolve;\n    });\n  }\n\n  private init_display() {\n    this.add_css();\n\n    let canvas_html;\n    if (this.params.canvas_shape == \"rectangle\") {\n      canvas_html = `\n        <canvas id=\"sketchpad-canvas\" \n        width=\"${this.params.canvas_width}\" \n        height=\"${this.params.canvas_height}\" \n        class=\"sketchpad-rectangle\"></canvas>\n      `;\n    } else if (this.params.canvas_shape == \"circle\") {\n      canvas_html = `\n        <canvas id=\"sketchpad-canvas\" \n        width=\"${this.params.canvas_diameter}\" \n        height=\"${this.params.canvas_diameter}\" \n        class=\"sketchpad-circle\">\n        </canvas>\n      `;\n    } else {\n      throw new Error(\n        '`canvas_shape` parameter in sketchpad plugin must be either \"rectangle\" or \"circle\"'\n      );\n    }\n\n    let sketchpad_controls = `<div id=\"sketchpad-controls\">`;\n\n    sketchpad_controls += `<div id=\"sketchpad-color-palette\">`;\n    for (const color of this.params.stroke_color_palette) {\n      sketchpad_controls += `<button class=\"sketchpad-color-select\" data-color=\"${color}\" style=\"background-color:${color};\"></button>`;\n    }\n    sketchpad_controls += `</div>`;\n\n    sketchpad_controls += `<div id=\"sketchpad-actions\">`;\n    if (this.params.show_clear_button) {\n      sketchpad_controls += `<button class=\"jspsych-btn\" id=\"sketchpad-clear\" disabled>${this.params.clear_button_label}</button>`;\n    }\n    if (this.params.show_undo_button) {\n      sketchpad_controls += `<button class=\"jspsych-btn\" id=\"sketchpad-undo\" disabled>${this.params.undo_button_label}</button>`;\n      if (this.params.show_redo_button) {\n        sketchpad_controls += `<button class=\"jspsych-btn\" id=\"sketchpad-redo\" disabled>${this.params.redo_button_label}</button>`;\n      }\n    }\n    sketchpad_controls += `</div></div>`;\n\n    canvas_html += sketchpad_controls;\n\n    let finish_button_html = \"\";\n    if (this.params.show_finished_button) {\n      finish_button_html = `<p id=\"finish-btn\"><button class=\"jspsych-btn\" id=\"sketchpad-end\">${this.params.finished_button_label}</button></p>`;\n    }\n\n    let timer_html = \"\";\n    if (this.params.show_countdown_trial_duration && this.params.trial_duration) {\n      timer_html = `<p id=\"countdown-timer\">${this.params.countdown_timer_html}</p>`;\n    }\n\n    let display_html;\n    if (this.params.prompt !== null) {\n      if (this.params.prompt_location == \"abovecanvas\") {\n        display_html = this.params.prompt + timer_html + canvas_html + finish_button_html;\n      }\n      if (this.params.prompt_location == \"belowcanvas\") {\n        display_html = timer_html + canvas_html + this.params.prompt + finish_button_html;\n      }\n      if (this.params.prompt_location == \"belowbutton\") {\n        display_html = timer_html + canvas_html + finish_button_html + this.params.prompt;\n      }\n    } else {\n      display_html = timer_html + canvas_html + finish_button_html;\n    }\n\n    this.display.innerHTML = display_html;\n\n    this.sketchpad = this.display.querySelector(\"#sketchpad-canvas\");\n    this.ctx = this.sketchpad.getContext(\"2d\");\n  }\n\n  private setup_event_listeners() {\n    document.addEventListener(\"pointermove\", (e) => {\n      this.mouse_position = { x: e.clientX, y: e.clientY };\n    });\n\n    if (this.params.show_finished_button) {\n      this.display.querySelector(\"#sketchpad-end\").addEventListener(\"click\", () => {\n        this.end_trial(\"button\");\n      });\n    }\n\n    this.sketchpad.addEventListener(\"pointerdown\", this.start_draw);\n    this.sketchpad.addEventListener(\"pointermove\", this.move_draw);\n    this.sketchpad.addEventListener(\"pointerup\", this.end_draw);\n    this.sketchpad.addEventListener(\"pointerleave\", this.end_draw);\n    this.sketchpad.addEventListener(\"pointercancel\", this.end_draw);\n\n    if (this.params.key_to_draw !== null) {\n      document.addEventListener(\"keydown\", (e) => {\n        if (e.key == this.params.key_to_draw && !this.is_drawing && !this.draw_key_held) {\n          this.draw_key_held = true;\n          if (\n            document.elementFromPoint(this.mouse_position.x, this.mouse_position.y) ==\n            this.sketchpad\n          ) {\n            this.sketchpad.dispatchEvent(\n              new PointerEvent(\"pointerdown\", {\n                clientX: this.mouse_position.x,\n                clientY: this.mouse_position.y,\n              })\n            );\n          }\n        }\n      });\n\n      document.addEventListener(\"keyup\", (e) => {\n        if (e.key == this.params.key_to_draw) {\n          this.draw_key_held = false;\n          if (\n            document.elementFromPoint(this.mouse_position.x, this.mouse_position.y) ==\n            this.sketchpad\n          ) {\n            this.sketchpad.dispatchEvent(\n              new PointerEvent(\"pointerup\", {\n                clientX: this.mouse_position.x,\n                clientY: this.mouse_position.y,\n              })\n            );\n          }\n        }\n      });\n    }\n\n    if (this.params.show_undo_button) {\n      this.display.querySelector(\"#sketchpad-undo\").addEventListener(\"click\", this.undo);\n      if (this.params.show_redo_button) {\n        this.display.querySelector(\"#sketchpad-redo\").addEventListener(\"click\", this.redo);\n      }\n    }\n    if (this.params.show_clear_button) {\n      this.display.querySelector(\"#sketchpad-clear\").addEventListener(\"click\", this.clear);\n    }\n\n    const color_btns = Array.from(this.display.querySelectorAll(\".sketchpad-color-select\"));\n    for (const btn of color_btns) {\n      btn.addEventListener(\"click\", (e) => {\n        const target = e.target as HTMLButtonElement;\n        this.current_stroke_color = target.getAttribute(\"data-color\");\n      });\n    }\n\n    this.jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: this.after_key_response,\n      valid_responses: this.params.choices,\n      persist: false,\n      allow_held_key: false,\n    });\n  }\n\n  private add_css() {\n    document.querySelector(\"head\").insertAdjacentHTML(\n      \"beforeend\",\n      `<style id=\"sketchpad-styles\">\n        #sketchpad-controls {\n          line-height: 1; \n          width:${\n            this.params.canvas_shape == \"rectangle\"\n              ? this.params.canvas_width + this.params.canvas_border_width * 2\n              : this.params.canvas_diameter + this.params.canvas_border_width * 2\n          }px; \n          display: flex; \n          justify-content: space-between; \n          flex-wrap: wrap;\n          margin: auto;\n        }\n        #sketchpad-color-palette { \n          display: inline-block; text-align:left; flex-grow: 1;\n        }\n        .sketchpad-color-select { \n          cursor: pointer; height: 33px; width: 33px; border-radius: 4px; padding: 0; border: 1px solid #ccc; \n        }\n        #sketchpad-actions {\n          display:inline-block; text-align:right; flex-grow: 1;\n        }\n        #sketchpad-actions button {\n          margin-left: 4px;\n        }\n        #sketchpad-canvas {\n          touch-action: none;\n          border: ${this.params.canvas_border_width}px solid ${this.params.canvas_border_color};\n        }\n        .sketchpad-circle {\n          border-radius: ${this.params.canvas_diameter / 2}px;\n        }\n        #countdown-timer {\n          width:${\n            this.params.canvas_shape == \"rectangle\"\n              ? this.params.canvas_width + this.params.canvas_border_width * 2\n              : this.params.canvas_diameter + this.params.canvas_border_width * 2\n          }px; \n          text-align: right;\n          font-size: 12px; \n          margin-bottom: 0.2em;\n        }\n      </style>`\n    );\n  }\n\n  private add_background_color() {\n    this.ctx.fillStyle = this.params.background_color;\n    if (this.params.canvas_shape == \"rectangle\") {\n      this.ctx.fillRect(0, 0, this.params.canvas_width, this.params.canvas_height);\n    }\n    if (this.params.canvas_shape == \"circle\") {\n      this.ctx.fillRect(0, 0, this.params.canvas_diameter, this.params.canvas_diameter);\n    }\n  }\n\n  private add_background_image() {\n    return new Promise((resolve, reject) => {\n      if (this.params.background_image !== null) {\n        this.background_image = new Image();\n        this.background_image.src = this.params.background_image;\n        this.background_image.onload = () => {\n          this.ctx.drawImage(this.background_image, 0, 0);\n          resolve(true);\n        };\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  private start_draw(e) {\n    this.is_drawing = true;\n\n    const x = Math.round(e.clientX - this.sketchpad.getBoundingClientRect().left);\n    const y = Math.round(e.clientY - this.sketchpad.getBoundingClientRect().top);\n\n    this.undo_history = [];\n    this.set_redo_btn_state(false);\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(x, y);\n    this.ctx.strokeStyle = this.current_stroke_color;\n    this.ctx.lineJoin = \"round\";\n    this.ctx.lineWidth = this.params.stroke_width;\n    this.stroke = [];\n    this.stroke.push({\n      x: x,\n      y: y,\n      color: this.current_stroke_color,\n      action: \"start\",\n      t: Math.round(performance.now() - this.start_time),\n    });\n\n    this.sketchpad.releasePointerCapture(e.pointerId);\n  }\n\n  private move_draw(e) {\n    if (this.is_drawing) {\n      const x = Math.round(e.clientX - this.sketchpad.getBoundingClientRect().left);\n      const y = Math.round(e.clientY - this.sketchpad.getBoundingClientRect().top);\n\n      this.ctx.lineTo(x, y);\n      this.ctx.stroke();\n      this.stroke.push({\n        x: x,\n        y: y,\n        action: \"move\",\n      });\n    }\n  }\n\n  private end_draw(e) {\n    if (this.is_drawing) {\n      this.stroke.push({\n        action: \"end\",\n        t: Math.round(performance.now() - this.start_time),\n      });\n      this.strokes.push(this.stroke);\n      this.set_undo_btn_state(true);\n      this.set_clear_btn_state(true);\n    }\n    this.is_drawing = false;\n  }\n\n  private render_drawing() {\n    this.ctx.clearRect(0, 0, this.sketchpad.width, this.sketchpad.height);\n    this.add_background_color();\n    if (this.background_image) {\n      this.ctx.drawImage(this.background_image, 0, 0);\n    }\n    for (const stroke of this.strokes) {\n      for (const m of stroke) {\n        if (m.action == \"start\") {\n          this.ctx.beginPath();\n          this.ctx.moveTo(m.x, m.y);\n          this.ctx.strokeStyle = m.color;\n          this.ctx.lineJoin = \"round\";\n          this.ctx.lineWidth = this.params.stroke_width;\n        }\n        if (m.action == \"move\") {\n          this.ctx.lineTo(m.x, m.y);\n          this.ctx.stroke();\n        }\n      }\n    }\n  }\n\n  private undo() {\n    this.undo_history.push(this.strokes.pop());\n    this.set_redo_btn_state(true);\n    if (this.strokes.length == 0) {\n      this.set_undo_btn_state(false);\n    }\n    this.render_drawing();\n  }\n\n  private redo() {\n    this.strokes.push(this.undo_history.pop());\n    this.set_undo_btn_state(true);\n    if (this.undo_history.length == 0) {\n      this.set_redo_btn_state(false);\n    }\n    this.render_drawing();\n  }\n\n  private clear() {\n    this.strokes = [];\n    this.undo_history = [];\n    this.render_drawing();\n    this.set_redo_btn_state(false);\n    this.set_undo_btn_state(false);\n    this.set_clear_btn_state(false);\n  }\n\n  private set_undo_btn_state(enabled: boolean) {\n    if (this.params.show_undo_button) {\n      (this.display.querySelector(\"#sketchpad-undo\") as HTMLButtonElement).disabled = !enabled;\n    }\n  }\n\n  private set_redo_btn_state(enabled: boolean) {\n    if (this.params.show_undo_button && this.params.show_redo_button) {\n      (this.display.querySelector(\"#sketchpad-redo\") as HTMLButtonElement).disabled = !enabled;\n    }\n  }\n\n  private set_clear_btn_state(enabled: boolean) {\n    if (this.params.show_clear_button) {\n      (this.display.querySelector(\"#sketchpad-clear\") as HTMLButtonElement).disabled = !enabled;\n    }\n  }\n\n  private set_trial_duration_timer() {\n    if (this.params.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        this.end_trial();\n      }, this.params.trial_duration);\n      if (this.params.show_countdown_trial_duration) {\n        this.timer_interval = setInterval(() => {\n          const remaining = this.params.trial_duration - (performance.now() - this.start_time);\n          let minutes = Math.floor(remaining / 1000 / 60);\n          let seconds = Math.ceil((remaining - minutes * 1000 * 60) / 1000);\n          if (seconds == 60) {\n            seconds = 0;\n            minutes++;\n          }\n          const minutes_str = minutes.toString();\n          const seconds_str = seconds.toString().padStart(2, \"0\");\n          const timer_span = this.display.querySelector(\"#sketchpad-timer\");\n          if (timer_span) {\n            timer_span.innerHTML = `${minutes_str}:${seconds_str}`;\n          }\n          if (remaining <= 0) {\n            if (timer_span) {\n              timer_span.innerHTML = `0:00`;\n            }\n            clearInterval(this.timer_interval);\n          }\n        }, 250);\n      }\n    }\n  }\n\n  private after_key_response(info) {\n    this.end_trial(info.key);\n  }\n\n  private end_trial(response = null) {\n    this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n    clearInterval(this.timer_interval);\n\n    const trial_data = <any>{};\n\n    trial_data.rt = Math.round(performance.now() - this.start_time);\n    trial_data.response = response;\n\n    if (this.params.save_final_image) {\n      trial_data.png = this.sketchpad.toDataURL();\n    }\n\n    if (this.params.save_strokes) {\n      trial_data.strokes = this.strokes;\n    }\n\n    document.querySelector(\"#sketchpad-styles\").remove();\n\n    this.jsPsych.finishTrial(trial_data);\n\n    this.trial_finished_handler();\n  }\n}\n\nexport default SketchpadPlugin;\n"],"names":["version","ParameterType","info"],"mappings":"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"}