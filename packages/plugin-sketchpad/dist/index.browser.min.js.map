{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"sketchpad\",\n  version: version,\n  parameters: {\n    /**\n     * The shape of the canvas element. Accepts `'rectangle'` or `'circle'`\n     */\n    canvas_shape: {\n      type: ParameterType.STRING,\n      default: \"rectangle\",\n    },\n    /**\n     * Width of the canvas in pixels when `canvas_shape` is a `\"rectangle\"`.\n     */\n    canvas_width: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /**\n     * Height of the canvas in pixels when `canvas_shape` is a `\"rectangle\"`.\n     */\n    canvas_height: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /**\n     * Diameter of the canvas (when `canvas_shape` is `'circle'`) in pixels.\n     */\n    canvas_diameter: {\n      type: ParameterType.INT,\n      default: 500,\n    },\n    /**\n     * This width of the border around the canvas element\n     */\n    canvas_border_width: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n    /**\n     * The color of the border around the canvas element.\n     */\n    canvas_border_color: {\n      type: ParameterType.STRING,\n      default: \"#000\",\n    },\n    /**\n     * Path to an image to render as the background of the canvas.\n     */\n    background_image: {\n      type: ParameterType.IMAGE,\n      default: null,\n    },\n    /**\n     * Color of the canvas background. Note that a `background_image` will render on top of the color.\n     */\n    background_color: {\n      type: ParameterType.STRING,\n      default: \"#ffffff\",\n    },\n    /**\n     * The width of the strokes on the canvas.\n     */\n    stroke_width: {\n      type: ParameterType.INT,\n      default: 2,\n    },\n    /**\n     * The color of the stroke on the canvas.\n     */\n    stroke_color: {\n      type: ParameterType.STRING,\n      default: \"#000000\",\n    },\n    /**\n     * Array of colors to render as a palette of choices for stroke color. Clicking on the corresponding color button will change the stroke color.\n     */\n    stroke_color_palette: {\n      type: ParameterType.STRING,\n      array: true,\n      default: [],\n    },\n    /**\n     * HTML content to render above or below the canvas (use `prompt_location` parameter to change location).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /**\n     * Location of the `prompt` content. Can be 'abovecanvas' or 'belowcanvas' or 'belowbutton'.\n     */\n    prompt_location: {\n      type: ParameterType.STRING,\n      default: \"abovecanvas\",\n    },\n    /**\n     * Whether to save the final image in the data as a base64 encoded data URL.\n     */\n    save_final_image: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * Whether to save the individual stroke data that generated the final image.\n     */\n    save_strokes: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * If this key is held down then it is like the mouse button being held down.\n     * The \"ink\" will flow when the button is held and stop when it is lifted.\n     * Pass in the string representation of the key, e.g., `'a'` for the A key\n     * or `' '` for the spacebar.\n     */\n    key_to_draw: {\n      type: ParameterType.KEY,\n      default: null,\n    },\n    /**\n     * Whether to show the button that ends the trial.\n     */\n    show_finished_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * The label for the button that ends the trial.\n     */\n    finished_button_label: {\n      type: ParameterType.STRING,\n      default: \"Finished\",\n    },\n    /**\n     * Whether to show the button that clears the entire drawing.\n     */\n    show_clear_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * The label for the button that clears the entire drawing.\n     */\n    clear_button_label: {\n      type: ParameterType.STRING,\n      default: \"Clear\",\n    },\n    /**\n     * Whether to show the button that enables an undo action.\n     */\n    show_undo_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * The label for the button that performs an undo action.\n     */\n    undo_button_label: {\n      type: ParameterType.STRING,\n      default: \"Undo\",\n    },\n    /**\n     * Whether to show the button that enables an redo action. `show_undo_button` must also\n     * be `true` for the redo button to show.\n     */\n    show_redo_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /**\n     * The label for the button that performs an redo action.\n     */\n    redo_button_label: {\n      type: ParameterType.STRING,\n      default: \"Redo\",\n    },\n    /**\n     * This array contains the key(s) that the participant is allowed to press in order to end\n     * the trial. Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`,\n     * `'ArrowDown'`) - see [this page](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)\n     * and [this page (event.key column)](https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/)\n     * for more examples. Any key presses that are not listed in the array will be ignored. The default value of `\"NO_KEYS\"`\n     * means that no keys will be accepted as valid responses. Specifying `\"ALL_KEYS\"` will mean that all responses are allowed.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"NO_KEYS\",\n    },\n    /**\n     * Length of time before the trial ends. If `null` the trial will continue indefinitely\n     * (until another way of ending the trial occurs).\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /**\n     * Whether to show a timer that counts down until the end of the trial when `trial_duration` is not `null`.\n     */\n    show_countdown_trial_duration: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /**\n     * The HTML to use for rendering the countdown timer. The element with `id=\"sketchpad-timer\"`\n     * will have its content replaced by a countdown timer in the format `MM:SS`.\n     */\n    countdown_timer_html: {\n      type: ParameterType.HTML_STRING,\n      default: `<span id=\"sketchpad-timer\"></span> remaining`,\n    },\n  },\n  data: {\n    /** The length of time from the start of the trial to the end of the trial. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** If the trial was ended by clicking the finished button, then `\"button\"`. If the trial was ended by pressing a key, then the key that was pressed. If the trial timed out, then `null`. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** If `save_final_image` is true, then this will contain the base64 encoded data URL for the image, in png format. */\n    png: {\n      type: ParameterType.STRING,\n    },\n    /** If `save_strokes` is true, then this will contain an array of stroke objects. Objects have an `action` property that is either `\"start\"`, `\"move\"`, or `\"end\"`. If `action` is `\"start\"` or `\"move\"` it will have an `x` and `y` property that report the coordinates of the action relative to the upper-left corner of the canvas. If `action` is `\"start\"` then the object will also have a `t` and `color` property, specifying the time of the action relative to the onset of the trial (ms) and the color of the stroke. If `action` is `\"end\"` then it will only have a `t` property. */\n    strokes: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      parameters: {\n        action: {\n          type: ParameterType.STRING,\n        },\n        x: {\n          type: ParameterType.INT,\n          optional: true,\n        },\n        y: {\n          type: ParameterType.INT,\n          optional: true,\n        },\n        t: {\n          type: ParameterType.INT,\n          optional: true,\n        },\n        color: {\n          type: ParameterType.STRING,\n          optional: true,\n        },\n      },\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin creates an interactive canvas that the participant can draw on using their mouse or touchscreen.\n * It can be used for sketching tasks, like asking the participant to draw a particular object.\n * It can also be used for some image segmentation or annotation tasks by setting the `background_image` parameter to render an image on the canvas.\n *\n * The plugin stores a [base 64 data URL representation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) of the final image.\n * This can be converted to an image file using [online tools](https://www.google.com/search?q=base64+image+decoder) or short programs in [R](https://stackoverflow.com/q/58604195/3726673), [python](https://stackoverflow.com/q/2323128/3726673), or another language of your choice.\n * It also records all of the individual strokes that the participant made during the trial.\n *\n * !!! warning\n *     This plugin generates **a lot** of data. Each trial can easily add 500kb+ of data to a final JSON output.\n *     You can reduce the amount of data generated by turning off storage of the individual stroke data (`save_strokes: false`) or storage of the final image (`save_final_image: false`) if your use case doesn't require that information.\n *     If you are going to be collecting a lot of data with this plugin you may want to save your data to your server after each trial and not wait until the end of the experiment to perform a single bulk upload.\n *     You can do this by putting data saving code inside the [`on_data_update` event handler](../overview/events.md#on_data_update).\n *\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/sketchpad/ sketchpad plugin documentation on jspsych.org}\n */\nclass SketchpadPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private display: HTMLElement;\n  private params: TrialType<Info>;\n  private sketchpad: HTMLCanvasElement;\n  private is_drawing = false;\n  private ctx: CanvasRenderingContext2D;\n  private trial_finished_handler;\n  private background_image;\n  private strokes = [];\n  private stroke = [];\n  private undo_history = [];\n  private current_stroke_color;\n  private start_time;\n  private mouse_position = { x: 0, y: 0 };\n  private draw_key_held = false;\n  private timer_interval;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    this.display = display_element;\n    this.params = trial;\n    this.current_stroke_color = trial.stroke_color;\n\n    this.init_display();\n\n    this.setup_event_listeners();\n\n    this.add_background_color();\n    this.add_background_image().then(() => {\n      on_load();\n    });\n\n    this.start_time = performance.now();\n    this.set_trial_duration_timer();\n\n    return new Promise((resolve, reject) => {\n      this.trial_finished_handler = resolve;\n    });\n  }\n\n  private init_display() {\n    this.add_css();\n\n    let canvas_html;\n    if (this.params.canvas_shape == \"rectangle\") {\n      canvas_html = `\n        <canvas id=\"sketchpad-canvas\" \n        width=\"${this.params.canvas_width}\" \n        height=\"${this.params.canvas_height}\" \n        class=\"sketchpad-rectangle\"></canvas>\n      `;\n    } else if (this.params.canvas_shape == \"circle\") {\n      canvas_html = `\n        <canvas id=\"sketchpad-canvas\" \n        width=\"${this.params.canvas_diameter}\" \n        height=\"${this.params.canvas_diameter}\" \n        class=\"sketchpad-circle\">\n        </canvas>\n      `;\n    } else {\n      throw new Error(\n        '`canvas_shape` parameter in sketchpad plugin must be either \"rectangle\" or \"circle\"'\n      );\n    }\n\n    let sketchpad_controls = `<div id=\"sketchpad-controls\">`;\n\n    sketchpad_controls += `<div id=\"sketchpad-color-palette\">`;\n    for (const color of this.params.stroke_color_palette) {\n      sketchpad_controls += `<button class=\"sketchpad-color-select\" data-color=\"${color}\" style=\"background-color:${color};\"></button>`;\n    }\n    sketchpad_controls += `</div>`;\n\n    sketchpad_controls += `<div id=\"sketchpad-actions\">`;\n    if (this.params.show_clear_button) {\n      sketchpad_controls += `<button class=\"jspsych-btn\" id=\"sketchpad-clear\" disabled>${this.params.clear_button_label}</button>`;\n    }\n    if (this.params.show_undo_button) {\n      sketchpad_controls += `<button class=\"jspsych-btn\" id=\"sketchpad-undo\" disabled>${this.params.undo_button_label}</button>`;\n      if (this.params.show_redo_button) {\n        sketchpad_controls += `<button class=\"jspsych-btn\" id=\"sketchpad-redo\" disabled>${this.params.redo_button_label}</button>`;\n      }\n    }\n    sketchpad_controls += `</div></div>`;\n\n    canvas_html += sketchpad_controls;\n\n    let finish_button_html = \"\";\n    if (this.params.show_finished_button) {\n      finish_button_html = `<p id=\"finish-btn\"><button class=\"jspsych-btn\" id=\"sketchpad-end\">${this.params.finished_button_label}</button></p>`;\n    }\n\n    let timer_html = \"\";\n    if (this.params.show_countdown_trial_duration && this.params.trial_duration) {\n      timer_html = `<p id=\"countdown-timer\">${this.params.countdown_timer_html}</p>`;\n    }\n\n    let display_html;\n    if (this.params.prompt !== null) {\n      if (this.params.prompt_location == \"abovecanvas\") {\n        display_html = this.params.prompt + timer_html + canvas_html + finish_button_html;\n      }\n      if (this.params.prompt_location == \"belowcanvas\") {\n        display_html = timer_html + canvas_html + this.params.prompt + finish_button_html;\n      }\n      if (this.params.prompt_location == \"belowbutton\") {\n        display_html = timer_html + canvas_html + finish_button_html + this.params.prompt;\n      }\n    } else {\n      display_html = timer_html + canvas_html + finish_button_html;\n    }\n\n    this.display.innerHTML = display_html;\n\n    this.sketchpad = this.display.querySelector(\"#sketchpad-canvas\");\n    this.ctx = this.sketchpad.getContext(\"2d\");\n  }\n\n  private setup_event_listeners() {\n    document.addEventListener(\"pointermove\", (e) => {\n      this.mouse_position = { x: e.clientX, y: e.clientY };\n    });\n\n    if (this.params.show_finished_button) {\n      this.display.querySelector(\"#sketchpad-end\").addEventListener(\"click\", () => {\n        this.end_trial(\"button\");\n      });\n    }\n\n    this.sketchpad.addEventListener(\"pointerdown\", this.start_draw);\n    this.sketchpad.addEventListener(\"pointermove\", this.move_draw);\n    this.sketchpad.addEventListener(\"pointerup\", this.end_draw);\n    this.sketchpad.addEventListener(\"pointerleave\", this.end_draw);\n    this.sketchpad.addEventListener(\"pointercancel\", this.end_draw);\n\n    if (this.params.key_to_draw !== null) {\n      document.addEventListener(\"keydown\", (e) => {\n        if (e.key == this.params.key_to_draw && !this.is_drawing && !this.draw_key_held) {\n          this.draw_key_held = true;\n          if (\n            document.elementFromPoint(this.mouse_position.x, this.mouse_position.y) ==\n            this.sketchpad\n          ) {\n            this.sketchpad.dispatchEvent(\n              new PointerEvent(\"pointerdown\", {\n                clientX: this.mouse_position.x,\n                clientY: this.mouse_position.y,\n              })\n            );\n          }\n        }\n      });\n\n      document.addEventListener(\"keyup\", (e) => {\n        if (e.key == this.params.key_to_draw) {\n          this.draw_key_held = false;\n          if (\n            document.elementFromPoint(this.mouse_position.x, this.mouse_position.y) ==\n            this.sketchpad\n          ) {\n            this.sketchpad.dispatchEvent(\n              new PointerEvent(\"pointerup\", {\n                clientX: this.mouse_position.x,\n                clientY: this.mouse_position.y,\n              })\n            );\n          }\n        }\n      });\n    }\n\n    if (this.params.show_undo_button) {\n      this.display.querySelector(\"#sketchpad-undo\").addEventListener(\"click\", this.undo);\n      if (this.params.show_redo_button) {\n        this.display.querySelector(\"#sketchpad-redo\").addEventListener(\"click\", this.redo);\n      }\n    }\n    if (this.params.show_clear_button) {\n      this.display.querySelector(\"#sketchpad-clear\").addEventListener(\"click\", this.clear);\n    }\n\n    const nodeList = this.display.querySelectorAll(\".sketchpad-color-select\");\n    for (let b = 0; b < nodeList.length; b++) {\n      nodeList[b].addEventListener(\"click\", (e) => {\n        const target = e.target as HTMLButtonElement;\n        this.current_stroke_color = target.getAttribute(\"data-color\");\n      });\n    }\n\n    this.jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: this.after_key_response,\n      valid_responses: this.params.choices,\n      persist: false,\n      allow_held_key: false,\n    });\n  }\n\n  private add_css() {\n    document.querySelector(\"head\").insertAdjacentHTML(\n      \"beforeend\",\n      `<style id=\"sketchpad-styles\">\n        #sketchpad-controls {\n          line-height: 1; \n          width:${\n            this.params.canvas_shape == \"rectangle\"\n              ? this.params.canvas_width + this.params.canvas_border_width * 2\n              : this.params.canvas_diameter + this.params.canvas_border_width * 2\n          }px; \n          display: flex; \n          justify-content: space-between; \n          flex-wrap: wrap;\n          margin: auto;\n        }\n        #sketchpad-color-palette { \n          display: inline-block; text-align:left; flex-grow: 1;\n        }\n        .sketchpad-color-select { \n          cursor: pointer; height: 33px; width: 33px; border-radius: 4px; padding: 0; border: 1px solid #ccc; \n        }\n        #sketchpad-actions {\n          display:inline-block; text-align:right; flex-grow: 1;\n        }\n        #sketchpad-actions button {\n          margin-left: 4px;\n        }\n        #sketchpad-canvas {\n          touch-action: none;\n          border: ${this.params.canvas_border_width}px solid ${this.params.canvas_border_color};\n        }\n        .sketchpad-circle {\n          border-radius: ${this.params.canvas_diameter / 2}px;\n        }\n        #countdown-timer {\n          width:${\n            this.params.canvas_shape == \"rectangle\"\n              ? this.params.canvas_width + this.params.canvas_border_width * 2\n              : this.params.canvas_diameter + this.params.canvas_border_width * 2\n          }px; \n          text-align: right;\n          font-size: 12px; \n          margin-bottom: 0.2em;\n        }\n      </style>`\n    );\n  }\n\n  private add_background_color() {\n    this.ctx.fillStyle = this.params.background_color;\n    if (this.params.canvas_shape == \"rectangle\") {\n      this.ctx.fillRect(0, 0, this.params.canvas_width, this.params.canvas_height);\n    }\n    if (this.params.canvas_shape == \"circle\") {\n      this.ctx.fillRect(0, 0, this.params.canvas_diameter, this.params.canvas_diameter);\n    }\n  }\n\n  private add_background_image() {\n    return new Promise((resolve, reject) => {\n      if (this.params.background_image !== null) {\n        this.background_image = new Image();\n        this.background_image.src = this.params.background_image;\n        this.background_image.onload = () => {\n          this.ctx.drawImage(this.background_image, 0, 0);\n          resolve(true);\n        };\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  private start_draw(e) {\n    this.is_drawing = true;\n\n    const x = Math.round(e.clientX - this.sketchpad.getBoundingClientRect().left);\n    const y = Math.round(e.clientY - this.sketchpad.getBoundingClientRect().top);\n\n    this.undo_history = [];\n    this.set_redo_btn_state(false);\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(x, y);\n    this.ctx.strokeStyle = this.current_stroke_color;\n    this.ctx.lineJoin = \"round\";\n    this.ctx.lineWidth = this.params.stroke_width;\n    this.stroke = [];\n    this.stroke.push({\n      x: x,\n      y: y,\n      color: this.current_stroke_color,\n      action: \"start\",\n      t: Math.round(performance.now() - this.start_time),\n    });\n\n    this.sketchpad.releasePointerCapture(e.pointerId);\n  }\n\n  private move_draw(e) {\n    if (this.is_drawing) {\n      const x = Math.round(e.clientX - this.sketchpad.getBoundingClientRect().left);\n      const y = Math.round(e.clientY - this.sketchpad.getBoundingClientRect().top);\n\n      this.ctx.lineTo(x, y);\n      this.ctx.stroke();\n      this.stroke.push({\n        x: x,\n        y: y,\n        action: \"move\",\n      });\n    }\n  }\n\n  private end_draw(e) {\n    if (this.is_drawing) {\n      this.stroke.push({\n        action: \"end\",\n        t: Math.round(performance.now() - this.start_time),\n      });\n      this.strokes.push(this.stroke);\n      this.set_undo_btn_state(true);\n      this.set_clear_btn_state(true);\n    }\n    this.is_drawing = false;\n  }\n\n  private render_drawing() {\n    this.ctx.clearRect(0, 0, this.sketchpad.width, this.sketchpad.height);\n    this.add_background_color();\n    if (this.background_image) {\n      this.ctx.drawImage(this.background_image, 0, 0);\n    }\n    for (const stroke of this.strokes) {\n      for (const m of stroke) {\n        if (m.action == \"start\") {\n          this.ctx.beginPath();\n          this.ctx.moveTo(m.x, m.y);\n          this.ctx.strokeStyle = m.color;\n          this.ctx.lineJoin = \"round\";\n          this.ctx.lineWidth = this.params.stroke_width;\n        }\n        if (m.action == \"move\") {\n          this.ctx.lineTo(m.x, m.y);\n          this.ctx.stroke();\n        }\n      }\n    }\n  }\n\n  private undo() {\n    this.undo_history.push(this.strokes.pop());\n    this.set_redo_btn_state(true);\n    if (this.strokes.length == 0) {\n      this.set_undo_btn_state(false);\n    }\n    this.render_drawing();\n  }\n\n  private redo() {\n    this.strokes.push(this.undo_history.pop());\n    this.set_undo_btn_state(true);\n    if (this.undo_history.length == 0) {\n      this.set_redo_btn_state(false);\n    }\n    this.render_drawing();\n  }\n\n  private clear() {\n    this.strokes = [];\n    this.undo_history = [];\n    this.render_drawing();\n    this.set_redo_btn_state(false);\n    this.set_undo_btn_state(false);\n    this.set_clear_btn_state(false);\n  }\n\n  private set_undo_btn_state(enabled: boolean) {\n    if (this.params.show_undo_button) {\n      (this.display.querySelector(\"#sketchpad-undo\") as HTMLButtonElement).disabled = !enabled;\n    }\n  }\n\n  private set_redo_btn_state(enabled: boolean) {\n    if (this.params.show_undo_button && this.params.show_redo_button) {\n      (this.display.querySelector(\"#sketchpad-redo\") as HTMLButtonElement).disabled = !enabled;\n    }\n  }\n\n  private set_clear_btn_state(enabled: boolean) {\n    if (this.params.show_clear_button) {\n      (this.display.querySelector(\"#sketchpad-clear\") as HTMLButtonElement).disabled = !enabled;\n    }\n  }\n\n  private set_trial_duration_timer() {\n    if (this.params.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        this.end_trial();\n      }, this.params.trial_duration);\n      if (this.params.show_countdown_trial_duration) {\n        this.timer_interval = setInterval(() => {\n          const remaining = this.params.trial_duration - (performance.now() - this.start_time);\n          let minutes = Math.floor(remaining / 1000 / 60);\n          let seconds = Math.ceil((remaining - minutes * 1000 * 60) / 1000);\n          if (seconds == 60) {\n            seconds = 0;\n            minutes++;\n          }\n          const minutes_str = minutes.toString();\n          const seconds_str = seconds.toString().padStart(2, \"0\");\n          const timer_span = this.display.querySelector(\"#sketchpad-timer\");\n          if (timer_span) {\n            timer_span.innerHTML = `${minutes_str}:${seconds_str}`;\n          }\n          if (remaining <= 0) {\n            if (timer_span) {\n              timer_span.innerHTML = `0:00`;\n            }\n            clearInterval(this.timer_interval);\n          }\n        }, 250);\n      }\n    }\n  }\n\n  private after_key_response(info) {\n    this.end_trial(info.key);\n  }\n\n  private end_trial(response = null) {\n    this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n    clearInterval(this.timer_interval);\n\n    const trial_data = <any>{};\n\n    trial_data.rt = Math.round(performance.now() - this.start_time);\n    trial_data.response = response;\n\n    if (this.params.save_final_image) {\n      trial_data.png = this.sketchpad.toDataURL();\n    }\n\n    if (this.params.save_strokes) {\n      trial_data.strokes = this.strokes;\n    }\n\n    document.querySelector(\"#sketchpad-styles\").remove();\n\n    this.jsPsych.finishTrial(trial_data);\n\n    this.trial_finished_handler();\n  }\n}\n\nexport default SketchpadPlugin;\n"],"names":["info","version","ParameterType","SketchpadPlugin","jsPsych","display_element","trial","on_load","resolve","reject","canvas_html","sketchpad_controls","color","finish_button_html","timer_html","display_html","e","nodeList","b","target","x","y","stroke","m","enabled","remaining","minutes","seconds","minutes_str","seconds_str","timer_span","response","trial_data"],"mappings":"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"}